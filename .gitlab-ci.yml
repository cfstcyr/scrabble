image: xwiillz/node-chromium-mongo:lts-bionic

cache:
    key: '${CI_COMMIT_REF_SLUG}-client'
    paths:
        - packages/client/node_modules/
        - packages/server/node_modules/
    policy: pull

.only-client: &only-client
    only:
        refs:
            - master
            - merge_requests
        changes:
            - packages/client/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-client'
        paths:
            - packages/client/node_modules/
        policy: pull

.only-server: &only-server
    only:
        refs:
            - master
            - merge_requests
        changes:
            - packages/server/**/*
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - packages/server/node_modules/
        policy: pull

stages:
    - install
    - lint
    - build
    - test
    - deploy
    - deploy:push

install:client:
    stage: install
    <<: *only-client
    needs: []
    script:
        - cd packages/client
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-client'
        paths:
            - packages/client/node_modules/
            - packages/client/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    needs: []
    script:
        - cd packages/server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: '${CI_COMMIT_REF_SLUG}-server'
        paths:
            - packages/server/node_modules/
            - packages/server/.npm/
        policy: pull-push

lint:client:
    stage: lint
    allow_failure: true
    <<: *only-client
    needs: ['install:client']
    script:
        - cd packages/client
        - npm run lint

lint:server:
    stage: lint
    allow_failure: true
    <<: *only-server
    needs: ['install:server']
    script:
        - cd packages/server
        - npm run lint

build:client:
    stage: build
    <<: *only-client
    needs: ['install:client']
    script:
        - cd packages/client
        - npm run build
    artifacts:
        paths:
            - packages/client/dist/

build:server:
    stage: build
    <<: *only-server
    needs: ['install:server']
    script:
        - cd packages/server
        - npm run build
    artifacts:
        paths:
            - packages/server/out/

test:client:
    stage: test
    <<: *only-client
    needs: ['install:client']
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd packages/client
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    dependencies:
        - build:client
    artifacts:
        paths:
            - packages/client/coverage/

test:server:
    stage: test
    <<: *only-server
    needs: ['install:server']
    script:
        - cd packages/server
        - npm run coverage
    dependencies:
        - build:server
    artifacts:
        paths:
            - packages/server/coverage/

pages:
    image: node:14.15.0
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG =~ /deploy/'
          when: manual
    script:
        - cd packages/client
        - npm ci --cache .npm --prefer-offline
        - npm run deploy -- --base-href $BASE_HREF
        - mkdir ../public
        - mv dist/client/* ../public/
    artifacts:
        paths:
            - public

variables:
    EC2_USER: ec2-user
    ORIGIN: 'https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}'

deploy:client:
    image: docker
    services:
        - docker:20.10.16-dind
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG'
          when: manual
          changes:
              - packages/client/**/*
    script:
        - export DOCKER_BUILDKIT=1
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build --target=client-prod -t $CI_REGISTRY/polytechnique-montr-al/log3900/23-1/equipe-103/log3900-103/client:$CI_COMMIT_TAG -t $CI_REGISTRY/polytechnique-montr-al/log3900/23-1/equipe-103/log3900-103/client:latest .
        - docker push $CI_REGISTRY/polytechnique-montr-al/log3900/23-1/equipe-103/log3900-103/client --all-tags

deploy:server:
    image: docker
    services:
        - docker:20.10.16-dind
    stage: deploy
    rules:
        - if: '$CI_COMMIT_TAG'
          when: manual
          changes:
              - packages/server/**/*
    script:
        - export DOCKER_BUILDKIT=1
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build --target=server-prod -t $CI_REGISTRY/polytechnique-montr-al/log3900/23-1/equipe-103/log3900-103/server:$CI_COMMIT_TAG -t $CI_REGISTRY/polytechnique-montr-al/log3900/23-1/equipe-103/log3900-103/server:latest .
        - docker push $CI_REGISTRY/polytechnique-montr-al/log3900/23-1/equipe-103/log3900-103/server --all-tags

deploy:push:
    stage: deploy:push
    environment:
        name: production
        url: http://scrabble.cfstcyr.com
    needs: []
    rules:
        - if: '$CI_COMMIT_TAG'
          when: manual
    script:
        - 'which ssh-agent || (apt-get update -qq && apt-get install -qq openssh-client )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$EC2_PEM_FILE_CONTENT")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - |
            timeout 600 ssh -t -o ServerAliveInterval=15 -o ServerAliveCountMax=5 "${EC2_USER}@${EC2_HOST}" "
                set -x -ev

                git clone ${ORIGIN} --branch develop LOG3900-103 || echo Git repository already exist
                cd LOG3900-103

                # Update the remote origin 
                # This action is important because the CI_JOB_TOKEN become invalid after each pipeline
                git remote remove origin
                git remote add origin ${ORIGIN}

                # Checkout to the targeted commit
                git fetch origin ${CI_COMMIT_SHA} --depth 1
                git checkout ${CI_COMMIT_SHA}

                export IMAGE_SERVER_VERSION=latest

                docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
                docker-compose up --pull always --detach --remove-orphans --force-recreate

                docker image prune -f
            "
