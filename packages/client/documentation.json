{
    "pipes": [
        {
            "name": "DurationPipe",
            "id": "pipe-DurationPipe-27f978ec8e1017813541409c29fa409177a79b2c5a834a551bc74205c2c21c913da3765934d427e1e9102efbd652789396ae42c11d2aaa5bf97a4dc6d27963d9",
            "file": "src/app/pipes/duration/duration.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDurationTimes",
                    "args": [],
                    "optional": false,
                    "returnType": "DurationTime[]",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getRemainingTime",
                    "args": [
                        {
                            "name": "factor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "factor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "join",
                    "args": [
                        {
                            "name": "timeString",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeString",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToString",
                    "args": [
                        {
                            "name": "durationsTimes",
                            "type": "DurationTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "durationsTimes",
                            "type": "DurationTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takeMaxTimeUnits",
                    "args": [
                        {
                            "name": "durationsTimes",
                            "type": "DurationTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "durationsTimes",
                            "type": "DurationTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trimDurationTimes",
                    "args": [
                        {
                            "name": "durationsTimes",
                            "type": "DurationTime[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DurationTime[]",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "durationsTimes",
                            "type": "DurationTime[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "duration",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { SECONDS_TO_MILLISECONDS } from '@app/constants/game-constants';\nimport { padStart, take } from 'lodash';\nimport { pipe } from 'rxjs';\n\nexport type DurationTime = [time: number, suffix: string, noPad?: boolean];\n\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst SECONDS_IN_DAY = HOURS_IN_DAY * MINUTES_IN_HOUR * SECONDS_IN_MINUTE;\nconst SECONDS_IN_HOUR = MINUTES_IN_HOUR * SECONDS_IN_MINUTE;\nconst MINIMUM_TIME_UNITS = 1;\nconst MAXIMUM_TIME_UNITS = 2;\n\n@Pipe({\n    name: 'duration',\n})\nexport class DurationPipe implements PipeTransform {\n    private duration: number;\n\n    transform(duration: number): string {\n        this.duration = duration;\n        return pipe(this.trimDurationTimes, this.takeMaxTimeUnits, this.trimDurationTimes, this.mapToString, this.join)(this.getDurationTimes());\n    }\n\n    private trimDurationTimes(durationsTimes: DurationTime[]): DurationTime[] {\n        durationsTimes = [...durationsTimes];\n        while (durationsTimes.length > MINIMUM_TIME_UNITS && durationsTimes[0][0] === 0) durationsTimes.shift();\n        while (durationsTimes.length > MINIMUM_TIME_UNITS && durationsTimes[durationsTimes.length - 1][0] === 0) durationsTimes.pop();\n        return durationsTimes;\n    }\n\n    private takeMaxTimeUnits(durationsTimes: DurationTime[]) {\n        return take(durationsTimes, MAXIMUM_TIME_UNITS);\n    }\n\n    private mapToString(durationsTimes: DurationTime[]): string[] {\n        return durationsTimes.map(([time, suffix, noPad], index) => `${index > 0 && !noPad ? padStart(time.toString(), 2, '0') : time}${suffix}`);\n    }\n\n    private join(timeString: string[]): string {\n        return timeString.join(' ');\n    }\n\n    private getDurationTimes(): DurationTime[] {\n        return [\n            [this.getRemainingTime(SECONDS_IN_DAY * SECONDS_TO_MILLISECONDS), ' jour(s)', true],\n            [this.getRemainingTime(SECONDS_IN_HOUR * SECONDS_TO_MILLISECONDS), 'h', true],\n            [this.getRemainingTime(SECONDS_IN_MINUTE * SECONDS_TO_MILLISECONDS), 'm'],\n            [this.getRemainingTime(SECONDS_TO_MILLISECONDS), 's'],\n            [this.getRemainingTime(1), 'ms'],\n        ];\n    }\n\n    private getRemainingTime(factor: number): number {\n        const time = Math.floor(this.duration / factor);\n        this.duration -= time * factor;\n        return time;\n    }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ActionData",
            "id": "interface-ActionData-249c1ad1deb41bf89379b424f9828c66ce2bb0f2cc65b1709936a9a84d3db6a00280def9582468540cf8dca1e74d259c16af336b7affb0250c114b506b096ca5",
            "file": "src/app/classes/actions/action-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Tile } from '@app/classes/tile';\n\nexport const ACTION_COMMAND_INDICATOR = '!';\n\nexport enum ActionType {\n    PLACE = 'placer',\n    EXCHANGE = 'échanger',\n    PASS = 'passer',\n    RESERVE = 'réserve',\n    HELP = 'aide',\n    HINT = 'indice',\n}\nexport interface ActionPayload {\n    playerId?: string;\n}\n\nexport interface ExchangeActionPayload extends ActionPayload {\n    tiles: Tile[];\n}\nexport interface PlaceActionPayload extends ActionPayload {\n    tiles: Tile[];\n    startPosition: Position;\n    orientation: Orientation;\n}\nexport interface ActionData<T extends ActionPayload = ActionPayload> {\n    type: ActionType;\n    input: string;\n    payload: T;\n}\n",
            "properties": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionType",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActionPayload",
            "id": "interface-ActionPayload-249c1ad1deb41bf89379b424f9828c66ce2bb0f2cc65b1709936a9a84d3db6a00280def9582468540cf8dca1e74d259c16af336b7affb0250c114b506b096ca5",
            "file": "src/app/classes/actions/action-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Tile } from '@app/classes/tile';\n\nexport const ACTION_COMMAND_INDICATOR = '!';\n\nexport enum ActionType {\n    PLACE = 'placer',\n    EXCHANGE = 'échanger',\n    PASS = 'passer',\n    RESERVE = 'réserve',\n    HELP = 'aide',\n    HINT = 'indice',\n}\nexport interface ActionPayload {\n    playerId?: string;\n}\n\nexport interface ExchangeActionPayload extends ActionPayload {\n    tiles: Tile[];\n}\nexport interface PlaceActionPayload extends ActionPayload {\n    tiles: Tile[];\n    startPosition: Position;\n    orientation: Orientation;\n}\nexport interface ActionData<T extends ActionPayload = ActionPayload> {\n    type: ActionType;\n    input: string;\n    payload: T;\n}\n",
            "properties": [
                {
                    "name": "playerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BasicDictionaryData",
            "id": "interface-BasicDictionaryData-993c66ff8741d1961e3530141c364ee075c24b7f41cda00a9030e6e8518234d07b6ec9ff184f36aa04bef8827f8365424fda2a3f5af4baf353ccab44d489563f",
            "file": "src/app/classes/dictionary/dictionary-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BasicDictionaryData {\n    title: string;\n    description: string;\n    words: string[];\n}\n\nexport interface DictionaryData {\n    title: string;\n    description: string;\n    words: string[];\n}\n\nexport interface DictionaryUpdateInfo {\n    id: string;\n    title?: string;\n    description?: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "words",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Channel",
            "id": "interface-Channel-acbbfdc0f587fedeb0716b45054dec36a96e3f649e7c2030b51b7a531e2a4bc33ad5d113fe5ed770b3d6bbb2ba19fda0bac62141dcaed8f651fdb92e77b77815",
            "file": "src/app/components/chatbox-container/chatbox-container.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Message } from '@app/components/chatbox-message/chatbox-message.component';\n\ninterface Channel {\n    id: string;\n    title: string;\n    messages: Message[];\n}\n\n@Component({\n    selector: 'app-chatbox-container',\n    templateUrl: './chatbox-container.component.html',\n    styleUrls: ['./chatbox-container.component.scss'],\n})\nexport class ChatboxContainerComponent {\n    @Input() channels: Channel[];\n    openedChannels: Channel[];\n    newMessageIsOpen: boolean = false;\n\n    constructor() {\n        this.channels = [\n            {\n                id: '1',\n                title: 'Général',\n                messages: [],\n            },\n            {\n                id: '2',\n                title: 'sup',\n                messages: [],\n            },\n        ];\n        this.openedChannels = [];\n    }\n\n    getChannelsForNewMessage(): (Channel & { canOpen: boolean })[] {\n        return this.channels.map<Channel & { canOpen: boolean }>((channel) => ({\n            ...channel,\n            canOpen: !this.openedChannels.find((c) => channel.id === c.id),\n        }));\n    }\n\n    showChannel(channel: Channel) {\n        this.openedChannels.push(channel);\n        this.closeNewMessage();\n    }\n\n    minimizeChannel(channel: Channel) {\n        const index = this.openedChannels.findIndex(({ id }) => channel.id === id);\n        this.openedChannels.splice(index, 1);\n    }\n\n    closeChannel(channel: Channel) {\n        if (confirm(`Do you want to quit channel \"${channel.title}\"?`)) {\n            this.minimizeChannel(channel);\n            this.channels = this.channels.filter(({ id }) => id !== channel.id);\n        }\n    }\n\n    closeNewMessage() {\n        this.newMessageIsOpen = false;\n    }\n\n    toggleNewMessage() {\n        this.newMessageIsOpen = !this.newMessageIsOpen;\n    }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConvertResult",
            "id": "interface-ConvertResult-28993406797c4075071afbf6ce90a938df142959dca29aef6477fd0be1cb04b0a08c3d47de00c282de0f34701b71a4d6fa3f9bd80c4eec97784db1e83ec3f6e7",
            "file": "src/app/components/convert-dialog/convert-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameDispatcherService } from '@app/services';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\nimport { VirtualPlayer } from '@common/models/virtual-player';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport interface ConvertResult {\n    isConverting: boolean;\n}\n\n@Component({\n    selector: 'app-convert-dialog',\n    templateUrl: './convert-dialog.component.html',\n    styleUrls: ['./convert-dialog.component.scss'],\n})\nexport class ConvertDialogComponent implements OnInit, OnDestroy {\n    virtualPlayerLevels: typeof VirtualPlayerLevel;\n    gameParameters: FormGroup;\n\n    private playerName: string;\n    private virtualPlayerNameMap: Map<VirtualPlayerLevel, string[]>;\n    private pageDestroyed$: Subject<boolean>;\n\n    constructor(\n        private dialogRef: MatDialogRef<ConvertDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: string,\n        private gameDispatcherService: GameDispatcherService,\n        private readonly virtualPlayerProfilesService: VirtualPlayerProfilesService,\n    ) {\n        this.playerName = data;\n        this.virtualPlayerLevels = VirtualPlayerLevel;\n        this.virtualPlayerNameMap = new Map();\n        this.pageDestroyed$ = new Subject();\n        this.gameParameters = new FormGroup({\n            gameMode: new FormControl(GameMode.Solo, Validators.required),\n            level: new FormControl(VirtualPlayerLevel.Beginner, Validators.required),\n            virtualPlayerName: new FormControl('', Validators.required),\n        });\n\n        this.setupDialog();\n    }\n\n    ngOnInit(): void {\n        this.gameParameters\n            .get('level')\n            ?.valueChanges.pipe(takeUntil(this.pageDestroyed$))\n            .subscribe(() => this.gameParameters?.get('virtualPlayerName')?.reset());\n\n        this.virtualPlayerProfilesService.subscribeToVirtualPlayerProfilesUpdateEvent(this.pageDestroyed$, (profiles) => {\n            this.generateVirtualPlayerProfileMap(profiles);\n        });\n        this.virtualPlayerProfilesService.getAllVirtualPlayersProfile();\n    }\n\n    ngOnDestroy(): void {\n        this.pageDestroyed$.next(true);\n        this.pageDestroyed$.complete();\n    }\n\n    onSubmit(): void {\n        this.handleConvertToSolo();\n    }\n\n    getVirtualPlayerNames(): string[] {\n        if (!this.virtualPlayerNameMap) return [];\n        const namesForLevel: string[] | undefined = this.virtualPlayerNameMap.get(this.gameParameters.get('level')?.value);\n        return namesForLevel ?? [];\n    }\n\n    returnToWaiting(): void {\n        this.gameDispatcherService.handleRecreateGame();\n        this.dialogRef.close({ isConverting: false });\n    }\n\n    private generateVirtualPlayerProfileMap(virtualPlayerProfiles: VirtualPlayer[]): void {\n        virtualPlayerProfiles.forEach((profile: VirtualPlayer) => {\n            if (profile.name === this.playerName) return;\n\n            const namesForLevel: string[] | undefined = this.virtualPlayerNameMap.get(profile.level as VirtualPlayerLevel);\n            if (!namesForLevel) this.virtualPlayerNameMap.set(profile.level as VirtualPlayerLevel, [profile.name]);\n            else namesForLevel.push(profile.name);\n        });\n    }\n\n    private handleConvertToSolo(): void {\n        this.gameDispatcherService.handleRecreateGame(this.gameParameters);\n        this.dialogRef.close({ isConverting: true });\n    }\n\n    private setupDialog(): void {\n        this.dialogRef.disableClose = true;\n        this.dialogRef.backdropClick().subscribe(() => this.returnToWaiting());\n    }\n}\n",
            "properties": [
                {
                    "name": "isConverting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CssStyleProperty",
            "id": "interface-CssStyleProperty-2bfb14d75cb1829513817c933dee27e7c092987310086bbe5bad53466985d62014c153ffd4de34df5d26c27df12c91521c8e6b35992dcf2f7b2810bc588ea035",
            "file": "src/app/components/square/square.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Orientation } from '@app/classes/actions/orientation';\nimport { SquareView } from '@app/classes/square';\nimport { DEFAULT_SQUARE_VIEW } from '@app/constants/game-constants';\nimport { SQUARE_TILE_DEFAULT_FONT_SIZE } from '@app/constants/tile-font-size-constants';\n\nexport interface CssStyleProperty {\n    key: string;\n    value: string;\n}\n\n@Component({\n    selector: 'app-square',\n    templateUrl: './square.component.html',\n    styleUrls: ['./square.component.scss'],\n})\nexport class SquareComponent implements OnInit {\n    @Input() squareView: SquareView = DEFAULT_SQUARE_VIEW;\n    @Input() tileFontSize: number = SQUARE_TILE_DEFAULT_FONT_SIZE;\n    @Input() isCursor: boolean = false;\n    @Input() cursorOrientation: Orientation = Orientation.Horizontal;\n    multiplierType: string | undefined = undefined;\n    multiplierValue: string | undefined = undefined;\n\n    ngOnInit(): void {\n        [this.multiplierType, this.multiplierValue] = this.squareView.getText();\n    }\n\n    getOrientationClass(): string {\n        return `cursor-${this.cursorOrientation === Orientation.Horizontal ? 'horizontal' : 'vertical'}`;\n    }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DefaultDialogButtonParameters",
            "id": "interface-DefaultDialogButtonParameters-9b5348e857a460ed088975eee1c96ac0c54b1aee22ad79e79a302bb12bb31d225cb5ef3c764b1570a5b4a1ea126cf500cfe925a83050378f0f6c5aa6a7ab332f",
            "file": "src/app/components/default-dialog/default-dialog.component.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from '@app/components/icon/icon.component.type';\n\nexport interface DefaultDialogButtonParameters {\n    content: string;\n    closeDialog?: boolean;\n    action?: () => void;\n    redirect?: string;\n    style?: string;\n    icon?: IconName;\n}\nexport interface DefaultDialogParameters {\n    title: string;\n    content: string;\n    buttons: DefaultDialogButtonParameters[];\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "closeDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "redirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DefaultDialogParameters",
            "id": "interface-DefaultDialogParameters-9b5348e857a460ed088975eee1c96ac0c54b1aee22ad79e79a302bb12bb31d225cb5ef3c764b1570a5b4a1ea126cf500cfe925a83050378f0f6c5aa6a7ab332f",
            "file": "src/app/components/default-dialog/default-dialog.component.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from '@app/components/icon/icon.component.type';\n\nexport interface DefaultDialogButtonParameters {\n    content: string;\n    closeDialog?: boolean;\n    action?: () => void;\n    redirect?: string;\n    style?: string;\n    icon?: IconName;\n}\nexport interface DefaultDialogParameters {\n    title: string;\n    content: string;\n    buttons: DefaultDialogButtonParameters[];\n}\n",
            "properties": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DefaultDialogButtonParameters[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DeleteDictionaryDialogParameters",
            "id": "interface-DeleteDictionaryDialogParameters-b765d4642f1fb2c25be3bd7f6cd888e944b57d45b6a6bd7c5f284e421b3f0d1411548c425c85f2690d7018b7d828d3e1650f609976f9e557ea706a104e368ee4",
            "file": "src/app/components/delete-dictionary-dialog/delete-dictionary-dialog.component.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DeleteDictionaryDialogParameters {\n    pageTitle: string;\n    dictionaryId: string;\n    onClose: () => void;\n}\n",
            "properties": [
                {
                    "name": "dictionaryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DeleteVirtualPlayerDialogParameters",
            "id": "interface-DeleteVirtualPlayerDialogParameters-1a142e7cedaba73d37455aa01647634c7d0b7b529ca51c4340ea4559f51121553bd40dcd2e133846f7475cbe79294214c795ba161b7397f5fc3e25acff9f2926",
            "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { VirtualPlayer } from '@common/models/virtual-player';\n\nexport type DisplayVirtualPlayersKeys = keyof { name: string } | 'name' | 'actions';\n\nexport type DisplayVirtualPlayersColumns = {\n    [Property in DisplayVirtualPlayersKeys]: string;\n};\n\nexport type DisplayVirtualPlayersColumnsIteratorItem = { key: DisplayVirtualPlayersKeys; label: string };\n\nexport enum VirtualPlayersComponentState {\n    Ready = 'ready',\n    Loading = 'loading',\n    Error = 'error',\n}\n\nexport type UpdateVirtualPlayersDialogParameters = Omit<VirtualPlayer, 'isDefault'>;\n\nexport interface DeleteVirtualPlayerDialogParameters extends Omit<VirtualPlayer, 'isDefault'> {\n    onClose: () => void;\n}\n",
            "properties": [
                {
                    "name": "onClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Omit"
        },
        {
            "name": "DictionaryData",
            "id": "interface-DictionaryData-993c66ff8741d1961e3530141c364ee075c24b7f41cda00a9030e6e8518234d07b6ec9ff184f36aa04bef8827f8365424fda2a3f5af4baf353ccab44d489563f",
            "file": "src/app/classes/dictionary/dictionary-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BasicDictionaryData {\n    title: string;\n    description: string;\n    words: string[];\n}\n\nexport interface DictionaryData {\n    title: string;\n    description: string;\n    words: string[];\n}\n\nexport interface DictionaryUpdateInfo {\n    id: string;\n    title?: string;\n    description?: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "words",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DictionaryDialogParameters",
            "id": "interface-DictionaryDialogParameters-d9dfb200d9cd8d52d1aaf81c635f3e72ad405ebfd65c944c3eed0ac5280491c4266223c5a5de6de4c8563d83d11325a54ae8505aab10286eb9fd1d4bec9e3f7f",
            "file": "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DictionaryDialogParameters {\n    dictionaryToModifyTitle: string;\n    dictionaryToModifyDescription: string;\n    dictionaryId: string;\n}\n\nexport enum ModifyDictionaryComponentIcons {\n    SuccessIcon = 'check',\n    ErrorIcon = 'times',\n    NoIcon = '',\n}\n",
            "properties": [
                {
                    "name": "dictionaryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dictionaryToModifyDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "dictionaryToModifyTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DictionarySummary",
            "id": "interface-DictionarySummary-367fd994cb26b311ae3de1deaba950bcf8985daded4e03e8711d682478be3a039c3a92b55ab9e4ee0b1e17ef254178c48abd4b07c3fb932a2ce722631f5fec63",
            "file": "src/app/classes/communication/dictionary-summary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DictionarySummary {\n    title: string;\n    description: string;\n    id: string;\n    isDefault: boolean;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DictionaryUpdateInfo",
            "id": "interface-DictionaryUpdateInfo-993c66ff8741d1961e3530141c364ee075c24b7f41cda00a9030e6e8518234d07b6ec9ff184f36aa04bef8827f8365424fda2a3f5af4baf353ccab44d489563f",
            "file": "src/app/classes/dictionary/dictionary-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BasicDictionaryData {\n    title: string;\n    description: string;\n    words: string[];\n}\n\nexport interface DictionaryData {\n    title: string;\n    description: string;\n    words: string[];\n}\n\nexport interface DictionaryUpdateInfo {\n    id: string;\n    title?: string;\n    description?: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DisplayMessage",
            "id": "interface-DisplayMessage-0b7858c657bff4dfef512320f010e8f27cf539db47dbcee99187279eab92a8ae510acbe7d2d756a26c605a7536b7ef312775fb8d2cc141a716929f1b77f51273",
            "file": "src/app/components/chatbox-message/chatbox-message.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { onlyHasEmoji } from '@app/utils/emoji/emoji';\nimport { emojify } from 'node-emoji';\nimport { ChatBoxComponent } from '@app/components/chatbox/chatbox.component';\n\nexport interface Message {\n    message: string;\n    isCurrentUser: boolean;\n    username: string;\n}\n\nexport interface DisplayMessage {\n    username: string;\n    isCurrentUser: boolean;\n    messages: string[];\n}\n\n@Component({\n    selector: 'app-chatbox-message',\n    templateUrl: './chatbox-message.component.html',\n    styleUrls: ['./chatbox-message.component.scss'],\n})\nexport class ChatboxMessageComponent extends ChatBoxComponent {\n    @Input() messages: Message[];\n    messageForm: FormGroup;\n    onlyHasEmoji = onlyHasEmoji;\n\n    constructor(private readonly formBuilder: FormBuilder) {\n        super();\n        this.messageForm = this.formBuilder.group({\n            message: new FormControl('', [Validators.required]),\n        });\n    }\n\n    getMessages(): DisplayMessage[] {\n        return this.messages.reduce<DisplayMessage[]>((messages, current) => {\n            const last = messages[messages.length - 1];\n\n            if (last) {\n                if (last.username === current.username) {\n                    last.messages.push(emojify(current.message.trim()));\n                } else {\n                    messages.push({\n                        username: current.username,\n                        isCurrentUser: current.isCurrentUser,\n                        messages: [emojify(current.message.trim())],\n                    });\n                }\n                return messages;\n            } else {\n                return [\n                    {\n                        username: current.username,\n                        isCurrentUser: current.isCurrentUser,\n                        messages: [emojify(current.message.trim())],\n                    },\n                ];\n            }\n        }, []);\n        // return [];\n    }\n\n    addMessage(message: Message): void {\n        this.messages.push(message);\n    }\n\n    onMessageSubmit() {\n        if (!this.messageForm.valid) return;\n\n        const message = this.messageForm.value.message.trim();\n\n        if (message.length === 0) return;\n\n        this.addMessage({\n            message,\n            isCurrentUser: true,\n            username: 'Me',\n        });\n        this.messageForm.setValue({ message: '' });\n    }\n\n    onEmojiClick(emoji: string) {\n        this.addMessage({\n            message: emoji,\n            isCurrentUser: true,\n            username: 'Me',\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "isCurrentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EventClass",
            "id": "interface-EventClass-530fb43c6385d02e9507868d366d2e9e0ce8af44aac7778f3e7f6a23154f7cddd40ad7df87267c073b001fcd182a319b371545f9192fdb5c660c1e78f0b315c2",
            "file": "src/app/services/game-view-event-manager-service/event-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { InitializeGameData } from '@app/classes/communication/game-config';\nimport { Message } from '@app/classes/communication/message';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nexport interface EventTypes {\n    tileRackUpdate: string;\n    noActiveGame: void;\n    reRender: void;\n    newMessage: Message | null;\n    usedTiles: PlaceActionPayload | undefined;\n    resetUsedTiles: void;\n    gameInitialized: InitializeGameData | undefined;\n    resetServices: void;\n    endOfGame: string[];\n}\n\ntype GenericEventClass<T> = {\n    [S in keyof T]: Subject<T[S]>;\n};\n\nexport interface EventClass extends GenericEventClass<EventTypes> {\n    newMessage: BehaviorSubject<Message | null>;\n    usedTiles: BehaviorSubject<PlaceActionPayload | undefined>;\n    gameInitialized: BehaviorSubject<InitializeGameData | undefined>;\n}\n",
            "properties": [
                {
                    "name": "gameInitialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<InitializeGameData | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "newMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Message | null>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "usedTiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<PlaceActionPayload | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "GenericEventClass"
        },
        {
            "name": "EventTypes",
            "id": "interface-EventTypes-530fb43c6385d02e9507868d366d2e9e0ce8af44aac7778f3e7f6a23154f7cddd40ad7df87267c073b001fcd182a319b371545f9192fdb5c660c1e78f0b315c2",
            "file": "src/app/services/game-view-event-manager-service/event-types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { InitializeGameData } from '@app/classes/communication/game-config';\nimport { Message } from '@app/classes/communication/message';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nexport interface EventTypes {\n    tileRackUpdate: string;\n    noActiveGame: void;\n    reRender: void;\n    newMessage: Message | null;\n    usedTiles: PlaceActionPayload | undefined;\n    resetUsedTiles: void;\n    gameInitialized: InitializeGameData | undefined;\n    resetServices: void;\n    endOfGame: string[];\n}\n\ntype GenericEventClass<T> = {\n    [S in keyof T]: Subject<T[S]>;\n};\n\nexport interface EventClass extends GenericEventClass<EventTypes> {\n    newMessage: BehaviorSubject<Message | null>;\n    usedTiles: BehaviorSubject<PlaceActionPayload | undefined>;\n    gameInitialized: BehaviorSubject<InitializeGameData | undefined>;\n}\n",
            "properties": [
                {
                    "name": "endOfGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "gameInitialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InitializeGameData | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "newMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "noActiveGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "reRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "resetServices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "resetUsedTiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "tileRackUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "usedTiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlaceActionPayload | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExchangeActionPayload",
            "id": "interface-ExchangeActionPayload-249c1ad1deb41bf89379b424f9828c66ce2bb0f2cc65b1709936a9a84d3db6a00280def9582468540cf8dca1e74d259c16af336b7affb0250c114b506b096ca5",
            "file": "src/app/classes/actions/action-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Tile } from '@app/classes/tile';\n\nexport const ACTION_COMMAND_INDICATOR = '!';\n\nexport enum ActionType {\n    PLACE = 'placer',\n    EXCHANGE = 'échanger',\n    PASS = 'passer',\n    RESERVE = 'réserve',\n    HELP = 'aide',\n    HINT = 'indice',\n}\nexport interface ActionPayload {\n    playerId?: string;\n}\n\nexport interface ExchangeActionPayload extends ActionPayload {\n    tiles: Tile[];\n}\nexport interface PlaceActionPayload extends ActionPayload {\n    tiles: Tile[];\n    startPosition: Position;\n    orientation: Orientation;\n}\nexport interface ActionData<T extends ActionPayload = ActionPayload> {\n    type: ActionType;\n    input: string;\n    payload: T;\n}\n",
            "properties": [
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ActionPayload"
        },
        {
            "name": "GameConfig",
            "id": "interface-GameConfig-769c99860db54f42ad776cd446b40e1d7795083a647cdbd675b9298f6dd3d5f4d5b95382c17b63c4eed7f4f9bb03d3a816b08d03bdde9ea3d0d7c63773028b51",
            "file": "src/app/classes/communication/game-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DictionarySummary } from './dictionary-summary';\nimport PlayerData from './player-data';\nimport { RoundData } from './round-data';\n\nexport interface GameConfigData {\n    playerName: string;\n    playerId: string;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n    virtualPlayerName?: string;\n    virtualPlayerLevel?: VirtualPlayerLevel;\n}\n\nexport interface GameConfig {\n    player1: PlayerData;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n}\n\nexport interface ReadyGameConfig extends GameConfig {\n    player2: PlayerData;\n}\n\nexport interface StartGameData extends ReadyGameConfig {\n    gameId: string;\n    board: Square[][];\n    tileReserve: TileReserveData[];\n    round: RoundData;\n}\n\nexport interface InitializeGameData {\n    localPlayerId: string;\n    startGameData: StartGameData;\n}\n",
            "properties": [
                {
                    "name": "dictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionarySummary",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "gameMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameMode",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "gameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameType",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "maxRoundTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "player1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GameConfigData",
            "id": "interface-GameConfigData-769c99860db54f42ad776cd446b40e1d7795083a647cdbd675b9298f6dd3d5f4d5b95382c17b63c4eed7f4f9bb03d3a816b08d03bdde9ea3d0d7c63773028b51",
            "file": "src/app/classes/communication/game-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DictionarySummary } from './dictionary-summary';\nimport PlayerData from './player-data';\nimport { RoundData } from './round-data';\n\nexport interface GameConfigData {\n    playerName: string;\n    playerId: string;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n    virtualPlayerName?: string;\n    virtualPlayerLevel?: VirtualPlayerLevel;\n}\n\nexport interface GameConfig {\n    player1: PlayerData;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n}\n\nexport interface ReadyGameConfig extends GameConfig {\n    player2: PlayerData;\n}\n\nexport interface StartGameData extends ReadyGameConfig {\n    gameId: string;\n    board: Square[][];\n    tileReserve: TileReserveData[];\n    round: RoundData;\n}\n\nexport interface InitializeGameData {\n    localPlayerId: string;\n    startGameData: StartGameData;\n}\n",
            "properties": [
                {
                    "name": "dictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionarySummary",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "gameMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameMode",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "gameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameType",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "maxRoundTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "playerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "playerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "virtualPlayerLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VirtualPlayerLevel",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "virtualPlayerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GameHistoriesData",
            "id": "interface-GameHistoriesData-4e61187a909eddc6becbdc75b4c863946732b4844cf81f3c09c8b71129a97aaa80c64e0195437f413cd1fe317190f30e1c1c16f71b22ae6e05ff716ff1ab956a",
            "file": "src/app/classes/communication/game-histories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GameHistoryWithPlayers } from '@common/models/game-history';\n\nexport type GameHistoryData = Omit<GameHistoryWithPlayers, 'startTime' | 'endTime'> & { startTime: string; endTime: string };\n\nexport interface GameHistoriesData {\n    gameHistories: GameHistoryData[];\n}\n",
            "properties": [
                {
                    "name": "gameHistories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameHistoryData[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GameInfoData",
            "id": "interface-GameInfoData-ec23270d4bddea9f8b1af83341e3fc2d55eee67541bccba3b9f1c1ee0e1acb765b64165f489df809a6f8209f7b5bb9bda570143ece007bf460ed2c485b78ab8e",
            "file": "src/app/classes/communication/game-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Round } from '@app/classes/round/round';\nimport { Square } from '@app/classes/square';\nimport PlayerData from './player-data';\n\nexport interface GameInfoData {\n    player1: PlayerData;\n    player2: PlayerData;\n    isGameOver: boolean;\n    board: Square[][];\n    round: Round;\n}\n",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Square[][]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isGameOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "player1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "player2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "round",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Round",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GameObjectivesData",
            "id": "interface-GameObjectivesData-f172bb6cff35ebebf0b66d1ddfa38b7173ba2160b9a5eb629bc18b8bf55ee389c824a33a4c67a58e03e877552ffd45880539319a5d21f9831713bb263acd4446",
            "file": "src/app/classes/communication/game-objectives-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ObjectiveData } from './objective-data';\n\nexport interface GameObjectivesData {\n    player1Objectives?: ObjectiveData[];\n    player2Objectives?: ObjectiveData[];\n}\n",
            "properties": [
                {
                    "name": "player1Objectives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectiveData[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "player2Objectives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectiveData[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GameUpdateData",
            "id": "interface-GameUpdateData-e60656cb63c3a7f7da0f2a743f80025ab810d9349704090195def33403d42c72e8b16c870d3706f22c680cbe8dc7415c7bb9a5dabbe1405e85693e171335b181",
            "file": "src/app/classes/communication/game-update-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { PlayerData } from './';\nimport { GameObjectivesData } from './game-objectives-data';\nimport { RoundData } from './round-data';\n\nexport default interface GameUpdateData {\n    player1?: PlayerData;\n    player2?: PlayerData;\n    isGameOver?: boolean;\n    winners?: string[];\n    board?: Square[];\n    round?: RoundData;\n    tileReserve?: TileReserveData[];\n    gameObjective?: GameObjectivesData;\n}\n",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Square[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "gameObjective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameObjectivesData",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isGameOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "player1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "player2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "round",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoundData",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tileReserve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TileReserveData[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "winners",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IconInputs",
            "id": "interface-IconInputs-d015fb6e4144a03e3b0011e4a8edaf529a9374ad64af98b7cb23f5e7c8d8051a9060f813a6228ed53f2e4d738e241a469206c3461e8d0ef8c5e41804eba8051e",
            "file": "src/app/components/icon/icon.component.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IconInputs {\n    icon: IconName;\n    styling?: IconStyle;\n    animation?: IconAnimation;\n    size?: IconSize;\n    rotation?: IconRotation;\n}\n\nexport type IconType = IconName | IconInputs;\n\nexport type IconStyle = 'solid' | 'regular' | 'light' | 'duotone';\n\nexport type IconPrefix = 'far' | 'fal' | 'fas' | 'fad';\n\nexport type IconAnimation = 'spin' | 'pulse';\n\nexport type IconSize = 'xs' | 'sm' | 'lg' | '2x' | '3x' | '5x' | '7x' | '10x';\n\nexport type IconRotation = 'rotate-90' | 'rotate-180' | 'rotate-270' | 'flip-horizontal' | 'flip-vertical' | 'flip-both';\n\nexport type IconName =\n    | 'abacus'\n    | 'acorn'\n    | 'ad'\n    | 'address-book'\n    | 'address-card'\n    | 'adjust'\n    | 'air-conditioner'\n    | 'air-freshener'\n    | 'alarm-clock'\n    | 'alarm-exclamation'\n    | 'alarm-plus'\n    | 'alarm-snooze'\n    | 'album'\n    | 'album-collection'\n    | 'alicorn'\n    | 'alien'\n    | 'alien-monster'\n    | 'align-center'\n    | 'align-justify'\n    | 'align-left'\n    | 'align-right'\n    | 'align-slash'\n    | 'allergies'\n    | 'ambulance'\n    | 'american-sign-language-interpreting'\n    | 'amp-guitar'\n    | 'analytics'\n    | 'anchor'\n    | 'angel'\n    | 'angle-double-down'\n    | 'angle-double-left'\n    | 'angle-double-right'\n    | 'angle-double-up'\n    | 'angle-down'\n    | 'angle-left'\n    | 'angle-right'\n    | 'angle-up'\n    | 'angry'\n    | 'ankh'\n    | 'apple-alt'\n    | 'apple-crate'\n    | 'archive'\n    | 'archway'\n    | 'arrow-alt-circle-down'\n    | 'arrow-alt-circle-left'\n    | 'arrow-alt-circle-right'\n    | 'arrow-alt-circle-up'\n    | 'arrow-alt-down'\n    | 'arrow-alt-from-bottom'\n    | 'arrow-alt-from-left'\n    | 'arrow-alt-from-right'\n    | 'arrow-alt-from-top'\n    | 'arrow-alt-left'\n    | 'arrow-alt-right'\n    | 'arrow-alt-square-down'\n    | 'arrow-alt-square-left'\n    | 'arrow-alt-square-right'\n    | 'arrow-alt-square-up'\n    | 'arrow-alt-to-bottom'\n    | 'arrow-alt-to-left'\n    | 'arrow-alt-to-right'\n    | 'arrow-alt-to-top'\n    | 'arrow-alt-up'\n    | 'arrow-circle-down'\n    | 'arrow-circle-left'\n    | 'arrow-circle-right'\n    | 'arrow-circle-up'\n    | 'arrow-down'\n    | 'arrow-from-bottom'\n    | 'arrow-from-left'\n    | 'arrow-from-right'\n    | 'arrow-from-top'\n    | 'arrow-left'\n    | 'arrow-right'\n    | 'arrow-square-down'\n    | 'arrow-square-left'\n    | 'arrow-square-right'\n    | 'arrow-square-up'\n    | 'arrow-to-bottom'\n    | 'arrow-to-left'\n    | 'arrow-to-right'\n    | 'arrow-to-top'\n    | 'arrow-up'\n    | 'arrows'\n    | 'arrows-alt'\n    | 'arrows-alt-h'\n    | 'arrows-alt-v'\n    | 'arrows-h'\n    | 'arrows-v'\n    | 'assistive-listening-systems'\n    | 'asterisk'\n    | 'at'\n    | 'atlas'\n    | 'atom'\n    | 'atom-alt'\n    | 'audio-description'\n    | 'award'\n    | 'axe'\n    | 'axe-battle'\n    | 'baby'\n    | 'baby-carriage'\n    | 'backpack'\n    | 'backspace'\n    | 'backward'\n    | 'bacon'\n    | 'bacteria'\n    | 'bacterium'\n    | 'badge'\n    | 'badge-check'\n    | 'badge-dollar'\n    | 'badge-percent'\n    | 'badge-sheriff'\n    | 'badger-honey'\n    | 'bags-shopping'\n    | 'bahai'\n    | 'balance-scale'\n    | 'balance-scale-left'\n    | 'balance-scale-right'\n    | 'ball-pile'\n    | 'ballot'\n    | 'ballot-check'\n    | 'ban'\n    | 'band-aid'\n    | 'banjo'\n    | 'barcode'\n    | 'barcode-alt'\n    | 'barcode-read'\n    | 'barcode-scan'\n    | 'bars'\n    | 'baseball'\n    | 'baseball-ball'\n    | 'basketball-ball'\n    | 'basketball-hoop'\n    | 'bat'\n    | 'bath'\n    | 'battery-bolt'\n    | 'battery-empty'\n    | 'battery-full'\n    | 'battery-half'\n    | 'battery-quarter'\n    | 'battery-slash'\n    | 'battery-three-quarters'\n    | 'bed'\n    | 'bed-alt'\n    | 'bed-bunk'\n    | 'bed-empty'\n    | 'beer'\n    | 'bell'\n    | 'bell-exclamation'\n    | 'bell-on'\n    | 'bell-plus'\n    | 'bell-school'\n    | 'bell-school-slash'\n    | 'bell-slash'\n    | 'bells'\n    | 'betamax'\n    | 'bezier-curve'\n    | 'bible'\n    | 'bicycle'\n    | 'biking'\n    | 'biking-mountain'\n    | 'binoculars'\n    | 'biohazard'\n    | 'birthday-cake'\n    | 'blanket'\n    | 'blender'\n    | 'blender-phone'\n    | 'blind'\n    | 'blinds'\n    | 'blinds-open'\n    | 'blinds-raised'\n    | 'blog'\n    | 'bold'\n    | 'bolt'\n    | 'bomb'\n    | 'bone'\n    | 'bone-break'\n    | 'bong'\n    | 'book'\n    | 'book-alt'\n    | 'book-dead'\n    | 'book-heart'\n    | 'book-medical'\n    | 'book-open'\n    | 'book-reader'\n    | 'book-spells'\n    | 'book-user'\n    | 'bookmark'\n    | 'books'\n    | 'books-medical'\n    | 'boombox'\n    | 'boot'\n    | 'booth-curtain'\n    | 'border-all'\n    | 'border-bottom'\n    | 'border-center-h'\n    | 'border-center-v'\n    | 'border-inner'\n    | 'border-left'\n    | 'border-none'\n    | 'border-outer'\n    | 'border-right'\n    | 'border-style'\n    | 'border-style-alt'\n    | 'border-top'\n    | 'bow-arrow'\n    | 'bowling-ball'\n    | 'bowling-pins'\n    | 'box'\n    | 'box-alt'\n    | 'box-ballot'\n    | 'box-check'\n    | 'box-fragile'\n    | 'box-full'\n    | 'box-heart'\n    | 'box-open'\n    | 'box-tissue'\n    | 'box-up'\n    | 'box-usd'\n    | 'boxes'\n    | 'boxes-alt'\n    | 'boxing-glove'\n    | 'brackets'\n    | 'brackets-curly'\n    | 'braille'\n    | 'brain'\n    | 'bread-loaf'\n    | 'bread-slice'\n    | 'briefcase'\n    | 'briefcase-medical'\n    | 'bring-forward'\n    | 'bring-front'\n    | 'broadcast-tower'\n    | 'broom'\n    | 'browser'\n    | 'brush'\n    | 'bug'\n    | 'building'\n    | 'bullhorn'\n    | 'bullseye'\n    | 'bullseye-arrow'\n    | 'bullseye-pointer'\n    | 'burger-soda'\n    | 'burn'\n    | 'burrito'\n    | 'bus'\n    | 'bus-alt'\n    | 'bus-school'\n    | 'business-time'\n    | 'cabinet-filing'\n    | 'cactus'\n    | 'calculator'\n    | 'calculator-alt'\n    | 'calendar'\n    | 'calendar-alt'\n    | 'calendar-check'\n    | 'calendar-day'\n    | 'calendar-edit'\n    | 'calendar-exclamation'\n    | 'calendar-minus'\n    | 'calendar-plus'\n    | 'calendar-star'\n    | 'calendar-times'\n    | 'calendar-week'\n    | 'camcorder'\n    | 'camera'\n    | 'camera-alt'\n    | 'camera-home'\n    | 'camera-movie'\n    | 'camera-polaroid'\n    | 'camera-retro'\n    | 'campfire'\n    | 'campground'\n    | 'candle-holder'\n    | 'candy-cane'\n    | 'candy-corn'\n    | 'cannabis'\n    | 'capsules'\n    | 'car'\n    | 'car-alt'\n    | 'car-battery'\n    | 'car-building'\n    | 'car-bump'\n    | 'car-bus'\n    | 'car-crash'\n    | 'car-garage'\n    | 'car-mechanic'\n    | 'car-side'\n    | 'car-tilt'\n    | 'car-wash'\n    | 'caravan'\n    | 'caravan-alt'\n    | 'caret-circle-down'\n    | 'caret-circle-left'\n    | 'caret-circle-right'\n    | 'caret-circle-up'\n    | 'caret-down'\n    | 'caret-left'\n    | 'caret-right'\n    | 'caret-square-down'\n    | 'caret-square-left'\n    | 'caret-square-right'\n    | 'caret-square-up'\n    | 'caret-up'\n    | 'carrot'\n    | 'cars'\n    | 'cart-arrow-down'\n    | 'cart-plus'\n    | 'cash-register'\n    | 'cassette-tape'\n    | 'cat'\n    | 'cat-space'\n    | 'cauldron'\n    | 'cctv'\n    | 'certificate'\n    | 'chair'\n    | 'chair-office'\n    | 'chalkboard'\n    | 'chalkboard-teacher'\n    | 'charging-station'\n    | 'chart-area'\n    | 'chart-bar'\n    | 'chart-line'\n    | 'chart-line-down'\n    | 'chart-network'\n    | 'chart-pie'\n    | 'chart-pie-alt'\n    | 'chart-scatter'\n    | 'check'\n    | 'check-circle'\n    | 'check-double'\n    | 'check-square'\n    | 'cheese'\n    | 'cheese-swiss'\n    | 'cheeseburger'\n    | 'chess'\n    | 'chess-bishop'\n    | 'chess-bishop-alt'\n    | 'chess-board'\n    | 'chess-clock'\n    | 'chess-clock-alt'\n    | 'chess-king'\n    | 'chess-king-alt'\n    | 'chess-knight'\n    | 'chess-knight-alt'\n    | 'chess-pawn'\n    | 'chess-pawn-alt'\n    | 'chess-queen'\n    | 'chess-queen-alt'\n    | 'chess-rook'\n    | 'chess-rook-alt'\n    | 'chevron-circle-down'\n    | 'chevron-circle-left'\n    | 'chevron-circle-right'\n    | 'chevron-circle-up'\n    | 'chevron-double-down'\n    | 'chevron-double-left'\n    | 'chevron-double-right'\n    | 'chevron-double-up'\n    | 'chevron-down'\n    | 'chevron-left'\n    | 'chevron-right'\n    | 'chevron-square-down'\n    | 'chevron-square-left'\n    | 'chevron-square-right'\n    | 'chevron-square-up'\n    | 'chevron-up'\n    | 'child'\n    | 'chimney'\n    | 'church'\n    | 'circle'\n    | 'circle-notch'\n    | 'city'\n    | 'clarinet'\n    | 'claw-marks'\n    | 'clinic-medical'\n    | 'clipboard'\n    | 'clipboard-check'\n    | 'clipboard-list'\n    | 'clipboard-list-check'\n    | 'clipboard-prescription'\n    | 'clipboard-user'\n    | 'clock'\n    | 'clone'\n    | 'closed-captioning'\n    | 'cloud'\n    | 'cloud-download'\n    | 'cloud-download-alt'\n    | 'cloud-drizzle'\n    | 'cloud-hail'\n    | 'cloud-hail-mixed'\n    | 'cloud-meatball'\n    | 'cloud-moon'\n    | 'cloud-moon-rain'\n    | 'cloud-music'\n    | 'cloud-rain'\n    | 'cloud-rainbow'\n    | 'cloud-showers'\n    | 'cloud-showers-heavy'\n    | 'cloud-sleet'\n    | 'cloud-snow'\n    | 'cloud-sun'\n    | 'cloud-sun-rain'\n    | 'cloud-upload'\n    | 'cloud-upload-alt'\n    | 'clouds'\n    | 'clouds-moon'\n    | 'clouds-sun'\n    | 'club'\n    | 'cocktail'\n    | 'code'\n    | 'code-branch'\n    | 'code-commit'\n    | 'code-merge'\n    | 'coffee'\n    | 'coffee-pot'\n    | 'coffee-togo'\n    | 'coffin'\n    | 'coffin-cross'\n    | 'cog'\n    | 'cogs'\n    | 'coin'\n    | 'coins'\n    | 'columns'\n    | 'comet'\n    | 'comment'\n    | 'comment-alt'\n    | 'comment-alt-check'\n    | 'comment-alt-dollar'\n    | 'comment-alt-dots'\n    | 'comment-alt-edit'\n    | 'comment-alt-exclamation'\n    | 'comment-alt-lines'\n    | 'comment-alt-medical'\n    | 'comment-alt-minus'\n    | 'comment-alt-music'\n    | 'comment-alt-plus'\n    | 'comment-alt-slash'\n    | 'comment-alt-smile'\n    | 'comment-alt-times'\n    | 'comment-check'\n    | 'comment-dollar'\n    | 'comment-dots'\n    | 'comment-edit'\n    | 'comment-exclamation'\n    | 'comment-lines'\n    | 'comment-medical'\n    | 'comment-minus'\n    | 'comment-music'\n    | 'comment-plus'\n    | 'comment-slash'\n    | 'comment-smile'\n    | 'comment-times'\n    | 'comments'\n    | 'comments-alt'\n    | 'comments-alt-dollar'\n    | 'comments-dollar'\n    | 'compact-disc'\n    | 'compass'\n    | 'compass-slash'\n    | 'compress'\n    | 'compress-alt'\n    | 'compress-arrows-alt'\n    | 'compress-wide'\n    | 'computer-classic'\n    | 'computer-speaker'\n    | 'concierge-bell'\n    | 'construction'\n    | 'container-storage'\n    | 'conveyor-belt'\n    | 'conveyor-belt-alt'\n    | 'cookie'\n    | 'cookie-bite'\n    | 'copy'\n    | 'copyright'\n    | 'corn'\n    | 'couch'\n    | 'cow'\n    | 'cowbell'\n    | 'cowbell-more'\n    | 'credit-card'\n    | 'credit-card-blank'\n    | 'credit-card-front'\n    | 'cricket'\n    | 'croissant'\n    | 'crop'\n    | 'crop-alt'\n    | 'cross'\n    | 'crosshairs'\n    | 'crow'\n    | 'crown'\n    | 'crutch'\n    | 'crutches'\n    | 'cube'\n    | 'cubes'\n    | 'curling'\n    | 'cut'\n    | 'dagger'\n    | 'database'\n    | 'deaf'\n    | 'debug'\n    | 'deer'\n    | 'deer-rudolph'\n    | 'democrat'\n    | 'desktop'\n    | 'desktop-alt'\n    | 'dewpoint'\n    | 'dharmachakra'\n    | 'diagnoses'\n    | 'diamond'\n    | 'dice'\n    | 'dice-d10'\n    | 'dice-d12'\n    | 'dice-d20'\n    | 'dice-d4'\n    | 'dice-d6'\n    | 'dice-d8'\n    | 'dice-five'\n    | 'dice-four'\n    | 'dice-one'\n    | 'dice-six'\n    | 'dice-three'\n    | 'dice-two'\n    | 'digging'\n    | 'digital-tachograph'\n    | 'diploma'\n    | 'directions'\n    | 'disc-drive'\n    | 'disease'\n    | 'divide'\n    | 'dizzy'\n    | 'dna'\n    | 'do-not-enter'\n    | 'dog'\n    | 'dog-leashed'\n    | 'dollar-sign'\n    | 'dolly'\n    | 'dolly-empty'\n    | 'dolly-flatbed'\n    | 'dolly-flatbed-alt'\n    | 'dolly-flatbed-empty'\n    | 'donate'\n    | 'door-closed'\n    | 'door-open'\n    | 'dot-circle'\n    | 'dove'\n    | 'download'\n    | 'drafting-compass'\n    | 'dragon'\n    | 'draw-circle'\n    | 'draw-polygon'\n    | 'draw-square'\n    | 'dreidel'\n    | 'drone'\n    | 'drone-alt'\n    | 'drum'\n    | 'drum-steelpan'\n    | 'drumstick'\n    | 'drumstick-bite'\n    | 'dryer'\n    | 'dryer-alt'\n    | 'duck'\n    | 'dumbbell'\n    | 'dumpster'\n    | 'dumpster-fire'\n    | 'dungeon'\n    | 'ear'\n    | 'ear-muffs'\n    | 'eclipse'\n    | 'eclipse-alt'\n    | 'edit'\n    | 'egg'\n    | 'egg-fried'\n    | 'eject'\n    | 'elephant'\n    | 'ellipsis-h'\n    | 'ellipsis-h-alt'\n    | 'ellipsis-v'\n    | 'ellipsis-v-alt'\n    | 'empty-set'\n    | 'engine-warning'\n    | 'envelope'\n    | 'envelope-open'\n    | 'envelope-open-dollar'\n    | 'envelope-open-text'\n    | 'envelope-square'\n    | 'equals'\n    | 'eraser'\n    | 'ethernet'\n    | 'euro-sign'\n    | 'exchange'\n    | 'exchange-alt'\n    | 'exclamation'\n    | 'exclamation-circle'\n    | 'exclamation-square'\n    | 'exclamation-triangle'\n    | 'expand'\n    | 'expand-alt'\n    | 'expand-arrows'\n    | 'expand-arrows-alt'\n    | 'expand-wide'\n    | 'external-link'\n    | 'external-link-alt'\n    | 'external-link-square'\n    | 'external-link-square-alt'\n    | 'eye'\n    | 'eye-dropper'\n    | 'eye-evil'\n    | 'eye-slash'\n    | 'fan'\n    | 'fan-table'\n    | 'farm'\n    | 'fast-backward'\n    | 'fast-forward'\n    | 'faucet'\n    | 'faucet-drip'\n    | 'fax'\n    | 'feather'\n    | 'feather-alt'\n    | 'female'\n    | 'field-hockey'\n    | 'fighter-jet'\n    | 'file'\n    | 'file-alt'\n    | 'file-archive'\n    | 'file-audio'\n    | 'file-certificate'\n    | 'file-chart-line'\n    | 'file-chart-pie'\n    | 'file-check'\n    | 'file-code'\n    | 'file-contract'\n    | 'file-csv'\n    | 'file-download'\n    | 'file-edit'\n    | 'file-excel'\n    | 'file-exclamation'\n    | 'file-export'\n    | 'file-image'\n    | 'file-import'\n    | 'file-invoice'\n    | 'file-invoice-dollar'\n    | 'file-medical'\n    | 'file-medical-alt'\n    | 'file-minus'\n    | 'file-music'\n    | 'file-pdf'\n    | 'file-plus'\n    | 'file-powerpoint'\n    | 'file-prescription'\n    | 'file-search'\n    | 'file-signature'\n    | 'file-spreadsheet'\n    | 'file-times'\n    | 'file-upload'\n    | 'file-user'\n    | 'file-video'\n    | 'file-word'\n    | 'files-medical'\n    | 'fill'\n    | 'fill-drip'\n    | 'film'\n    | 'film-alt'\n    | 'film-canister'\n    | 'filter'\n    | 'fingerprint'\n    | 'fire'\n    | 'fire-alt'\n    | 'fire-extinguisher'\n    | 'fire-smoke'\n    | 'fireplace'\n    | 'first-aid'\n    | 'fish'\n    | 'fish-cooked'\n    | 'fist-raised'\n    | 'flag'\n    | 'flag-alt'\n    | 'flag-checkered'\n    | 'flag-usa'\n    | 'flame'\n    | 'flashlight'\n    | 'flask'\n    | 'flask-poison'\n    | 'flask-potion'\n    | 'flower'\n    | 'flower-daffodil'\n    | 'flower-tulip'\n    | 'flushed'\n    | 'flute'\n    | 'flux-capacitor'\n    | 'fog'\n    | 'folder'\n    | 'folder-download'\n    | 'folder-minus'\n    | 'folder-open'\n    | 'folder-plus'\n    | 'folder-times'\n    | 'folder-tree'\n    | 'folder-upload'\n    | 'folders'\n    | 'font'\n    | 'font-case'\n    | 'football-ball'\n    | 'football-helmet'\n    | 'forklift'\n    | 'forward'\n    | 'fragile'\n    | 'french-fries'\n    | 'frog'\n    | 'frosty-head'\n    | 'frown'\n    | 'frown-open'\n    | 'function'\n    | 'funnel-dollar'\n    | 'futbol'\n    | 'galaxy'\n    | 'game-board'\n    | 'game-board-alt'\n    | 'game-console-handheld'\n    | 'gamepad'\n    | 'gamepad-alt'\n    | 'garage'\n    | 'garage-car'\n    | 'garage-open'\n    | 'gas-pump'\n    | 'gas-pump-slash'\n    | 'gavel'\n    | 'gem'\n    | 'genderless'\n    | 'ghost'\n    | 'gift'\n    | 'gift-card'\n    | 'gifts'\n    | 'gingerbread-man'\n    | 'glass'\n    | 'glass-champagne'\n    | 'glass-cheers'\n    | 'glass-citrus'\n    | 'glass-martini'\n    | 'glass-martini-alt'\n    | 'glass-whiskey'\n    | 'glass-whiskey-rocks'\n    | 'glasses'\n    | 'glasses-alt'\n    | 'globe'\n    | 'globe-africa'\n    | 'globe-americas'\n    | 'globe-asia'\n    | 'globe-europe'\n    | 'globe-snow'\n    | 'globe-stand'\n    | 'golf-ball'\n    | 'golf-club'\n    | 'gopuram'\n    | 'graduation-cap'\n    | 'gramophone'\n    | 'greater-than'\n    | 'greater-than-equal'\n    | 'grimace'\n    | 'grin'\n    | 'grin-alt'\n    | 'grin-beam'\n    | 'grin-beam-sweat'\n    | 'grin-hearts'\n    | 'grin-squint'\n    | 'grin-squint-tears'\n    | 'grin-stars'\n    | 'grin-tears'\n    | 'grin-tongue'\n    | 'grin-tongue-squint'\n    | 'grin-tongue-wink'\n    | 'grin-wink'\n    | 'grip-horizontal'\n    | 'grip-lines'\n    | 'grip-lines-vertical'\n    | 'grip-vertical'\n    | 'guitar'\n    | 'guitar-electric'\n    | 'guitars'\n    | 'h-square'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'hamburger'\n    | 'hammer'\n    | 'hammer-war'\n    | 'hamsa'\n    | 'hand-heart'\n    | 'hand-holding'\n    | 'hand-holding-box'\n    | 'hand-holding-heart'\n    | 'hand-holding-magic'\n    | 'hand-holding-medical'\n    | 'hand-holding-seedling'\n    | 'hand-holding-usd'\n    | 'hand-holding-water'\n    | 'hand-lizard'\n    | 'hand-middle-finger'\n    | 'hand-paper'\n    | 'hand-peace'\n    | 'hand-point-down'\n    | 'hand-point-left'\n    | 'hand-point-right'\n    | 'hand-point-up'\n    | 'hand-pointer'\n    | 'hand-receiving'\n    | 'hand-rock'\n    | 'hand-scissors'\n    | 'hand-sparkles'\n    | 'hand-spock'\n    | 'hands'\n    | 'hands-heart'\n    | 'hands-helping'\n    | 'hands-usd'\n    | 'hands-wash'\n    | 'handshake'\n    | 'handshake-alt'\n    | 'handshake-alt-slash'\n    | 'handshake-slash'\n    | 'hanukiah'\n    | 'hard-hat'\n    | 'hashtag'\n    | 'hat-chef'\n    | 'hat-cowboy'\n    | 'hat-cowboy-side'\n    | 'hat-santa'\n    | 'hat-winter'\n    | 'hat-witch'\n    | 'hat-wizard'\n    | 'hdd'\n    | 'head-side'\n    | 'head-side-brain'\n    | 'head-side-cough'\n    | 'head-side-cough-slash'\n    | 'head-side-headphones'\n    | 'head-side-mask'\n    | 'head-side-medical'\n    | 'head-side-virus'\n    | 'head-vr'\n    | 'heading'\n    | 'headphones'\n    | 'headphones-alt'\n    | 'headset'\n    | 'heart'\n    | 'heart-broken'\n    | 'heart-circle'\n    | 'heart-rate'\n    | 'heart-square'\n    | 'heartbeat'\n    | 'heat'\n    | 'helicopter'\n    | 'helmet-battle'\n    | 'hexagon'\n    | 'highlighter'\n    | 'hiking'\n    | 'hippo'\n    | 'history'\n    | 'hockey-mask'\n    | 'hockey-puck'\n    | 'hockey-sticks'\n    | 'holly-berry'\n    | 'home'\n    | 'home-alt'\n    | 'home-heart'\n    | 'home-lg'\n    | 'home-lg-alt'\n    | 'hood-cloak'\n    | 'horizontal-rule'\n    | 'horse'\n    | 'horse-head'\n    | 'horse-saddle'\n    | 'hospital'\n    | 'hospital-alt'\n    | 'hospital-symbol'\n    | 'hospital-user'\n    | 'hospitals'\n    | 'hot-tub'\n    | 'hotdog'\n    | 'hotel'\n    | 'hourglass'\n    | 'hourglass-end'\n    | 'hourglass-half'\n    | 'hourglass-start'\n    | 'house'\n    | 'house-damage'\n    | 'house-day'\n    | 'house-flood'\n    | 'house-leave'\n    | 'house-night'\n    | 'house-return'\n    | 'house-signal'\n    | 'house-user'\n    | 'hryvnia'\n    | 'humidity'\n    | 'hurricane'\n    | 'i-cursor'\n    | 'ice-cream'\n    | 'ice-skate'\n    | 'icicles'\n    | 'icons'\n    | 'icons-alt'\n    | 'id-badge'\n    | 'id-card'\n    | 'id-card-alt'\n    | 'igloo'\n    | 'image'\n    | 'image-polaroid'\n    | 'images'\n    | 'inbox'\n    | 'inbox-in'\n    | 'inbox-out'\n    | 'indent'\n    | 'industry'\n    | 'industry-alt'\n    | 'infinity'\n    | 'info'\n    | 'info-circle'\n    | 'info-square'\n    | 'inhaler'\n    | 'integral'\n    | 'intersection'\n    | 'inventory'\n    | 'island-tropical'\n    | 'italic'\n    | 'jack-o-lantern'\n    | 'jedi'\n    | 'joint'\n    | 'journal-whills'\n    | 'joystick'\n    | 'jug'\n    | 'kaaba'\n    | 'kazoo'\n    | 'kerning'\n    | 'key'\n    | 'key-skeleton'\n    | 'keyboard'\n    | 'keynote'\n    | 'khanda'\n    | 'kidneys'\n    | 'kiss'\n    | 'kiss-beam'\n    | 'kiss-wink-heart'\n    | 'kite'\n    | 'kiwi-bird'\n    | 'knife-kitchen'\n    | 'lambda'\n    | 'lamp'\n    | 'lamp-desk'\n    | 'lamp-floor'\n    | 'landmark'\n    | 'landmark-alt'\n    | 'language'\n    | 'laptop'\n    | 'laptop-code'\n    | 'laptop-house'\n    | 'laptop-medical'\n    | 'lasso'\n    | 'laugh'\n    | 'laugh-beam'\n    | 'laugh-squint'\n    | 'laugh-wink'\n    | 'layer-group'\n    | 'layer-minus'\n    | 'layer-plus'\n    | 'leaf'\n    | 'leaf-heart'\n    | 'leaf-maple'\n    | 'leaf-oak'\n    | 'lemon'\n    | 'less-than'\n    | 'less-than-equal'\n    | 'level-down'\n    | 'level-down-alt'\n    | 'level-up'\n    | 'level-up-alt'\n    | 'life-ring'\n    | 'light-ceiling'\n    | 'light-switch'\n    | 'light-switch-off'\n    | 'light-switch-on'\n    | 'lightbulb'\n    | 'lightbulb-dollar'\n    | 'lightbulb-exclamation'\n    | 'lightbulb-on'\n    | 'lightbulb-slash'\n    | 'lights-holiday'\n    | 'line-columns'\n    | 'line-height'\n    | 'link'\n    | 'lips'\n    | 'lira-sign'\n    | 'list'\n    | 'list-alt'\n    | 'list-music'\n    | 'list-ol'\n    | 'list-ul'\n    | 'location'\n    | 'location-arrow'\n    | 'location-circle'\n    | 'location-slash'\n    | 'lock'\n    | 'lock-alt'\n    | 'lock-open'\n    | 'lock-open-alt'\n    | 'long-arrow-alt-down'\n    | 'long-arrow-alt-left'\n    | 'long-arrow-alt-right'\n    | 'long-arrow-alt-up'\n    | 'long-arrow-down'\n    | 'long-arrow-left'\n    | 'long-arrow-right'\n    | 'long-arrow-up'\n    | 'loveseat'\n    | 'low-vision'\n    | 'luchador'\n    | 'luggage-cart'\n    | 'lungs'\n    | 'lungs-virus'\n    | 'mace'\n    | 'magic'\n    | 'magnet'\n    | 'mail-bulk'\n    | 'mailbox'\n    | 'male'\n    | 'mandolin'\n    | 'map'\n    | 'map-marked'\n    | 'map-marked-alt'\n    | 'map-marker'\n    | 'map-marker-alt'\n    | 'map-marker-alt-slash'\n    | 'map-marker-check'\n    | 'map-marker-edit'\n    | 'map-marker-exclamation'\n    | 'map-marker-minus'\n    | 'map-marker-plus'\n    | 'map-marker-question'\n    | 'map-marker-slash'\n    | 'map-marker-smile'\n    | 'map-marker-times'\n    | 'map-pin'\n    | 'map-signs'\n    | 'marker'\n    | 'mars'\n    | 'mars-double'\n    | 'mars-stroke'\n    | 'mars-stroke-h'\n    | 'mars-stroke-v'\n    | 'mask'\n    | 'meat'\n    | 'medal'\n    | 'medkit'\n    | 'megaphone'\n    | 'meh'\n    | 'meh-blank'\n    | 'meh-rolling-eyes'\n    | 'memory'\n    | 'menorah'\n    | 'mercury'\n    | 'meteor'\n    | 'microchip'\n    | 'microphone'\n    | 'microphone-alt'\n    | 'microphone-alt-slash'\n    | 'microphone-slash'\n    | 'microphone-stand'\n    | 'microscope'\n    | 'microwave'\n    | 'mind-share'\n    | 'minus'\n    | 'minus-circle'\n    | 'minus-hexagon'\n    | 'minus-octagon'\n    | 'minus-square'\n    | 'mistletoe'\n    | 'mitten'\n    | 'mobile'\n    | 'mobile-alt'\n    | 'mobile-android'\n    | 'mobile-android-alt'\n    | 'money-bill'\n    | 'money-bill-alt'\n    | 'money-bill-wave'\n    | 'money-bill-wave-alt'\n    | 'money-check'\n    | 'money-check-alt'\n    | 'money-check-edit'\n    | 'money-check-edit-alt'\n    | 'monitor-heart-rate'\n    | 'monkey'\n    | 'monument'\n    | 'moon'\n    | 'moon-cloud'\n    | 'moon-stars'\n    | 'mortar-pestle'\n    | 'mosque'\n    | 'motorcycle'\n    | 'mountain'\n    | 'mountains'\n    | 'mouse'\n    | 'mouse-alt'\n    | 'mouse-pointer'\n    | 'mp3-player'\n    | 'mug'\n    | 'mug-hot'\n    | 'mug-marshmallows'\n    | 'mug-tea'\n    | 'music'\n    | 'music-alt'\n    | 'music-alt-slash'\n    | 'music-slash'\n    | 'narwhal'\n    | 'network-wired'\n    | 'neuter'\n    | 'newspaper'\n    | 'not-equal'\n    | 'notes-medical'\n    | 'object-group'\n    | 'object-ungroup'\n    | 'octagon'\n    | 'oil-can'\n    | 'oil-temp'\n    | 'om'\n    | 'omega'\n    | 'ornament'\n    | 'otter'\n    | 'outdent'\n    | 'outlet'\n    | 'oven'\n    | 'overline'\n    | 'page-break'\n    | 'pager'\n    | 'paint-brush'\n    | 'paint-brush-alt'\n    | 'paint-roller'\n    | 'palette'\n    | 'pallet'\n    | 'pallet-alt'\n    | 'paper-plane'\n    | 'paperclip'\n    | 'parachute-box'\n    | 'paragraph'\n    | 'paragraph-rtl'\n    | 'parking'\n    | 'parking-circle'\n    | 'parking-circle-slash'\n    | 'parking-slash'\n    | 'passport'\n    | 'pastafarianism'\n    | 'paste'\n    | 'pause'\n    | 'pause-circle'\n    | 'paw'\n    | 'paw-alt'\n    | 'paw-claws'\n    | 'peace'\n    | 'pegasus'\n    | 'pen'\n    | 'pen-alt'\n    | 'pen-fancy'\n    | 'pen-nib'\n    | 'pen-square'\n    | 'pencil'\n    | 'pencil-alt'\n    | 'pencil-paintbrush'\n    | 'pencil-ruler'\n    | 'pennant'\n    | 'people-arrows'\n    | 'people-carry'\n    | 'pepper-hot'\n    | 'percent'\n    | 'percentage'\n    | 'person-booth'\n    | 'person-carry'\n    | 'person-dolly'\n    | 'person-dolly-empty'\n    | 'person-sign'\n    | 'phone'\n    | 'phone-alt'\n    | 'phone-laptop'\n    | 'phone-office'\n    | 'phone-plus'\n    | 'phone-rotary'\n    | 'phone-slash'\n    | 'phone-square'\n    | 'phone-square-alt'\n    | 'phone-volume'\n    | 'photo-video'\n    | 'pi'\n    | 'piano'\n    | 'piano-keyboard'\n    | 'pie'\n    | 'pig'\n    | 'piggy-bank'\n    | 'pills'\n    | 'pizza'\n    | 'pizza-slice'\n    | 'place-of-worship'\n    | 'plane'\n    | 'plane-alt'\n    | 'plane-arrival'\n    | 'plane-departure'\n    | 'plane-slash'\n    | 'planet-moon'\n    | 'planet-ringed'\n    | 'play'\n    | 'play-circle'\n    | 'plug'\n    | 'plus'\n    | 'plus-circle'\n    | 'plus-hexagon'\n    | 'plus-octagon'\n    | 'plus-square'\n    | 'podcast'\n    | 'podium'\n    | 'podium-star'\n    | 'police-box'\n    | 'poll'\n    | 'poll-h'\n    | 'poll-people'\n    | 'poo'\n    | 'poo-storm'\n    | 'poop'\n    | 'popcorn'\n    | 'portal-enter'\n    | 'portal-exit'\n    | 'portrait'\n    | 'pound-sign'\n    | 'power-off'\n    | 'pray'\n    | 'praying-hands'\n    | 'prescription'\n    | 'prescription-bottle'\n    | 'prescription-bottle-alt'\n    | 'presentation'\n    | 'print'\n    | 'print-search'\n    | 'print-slash'\n    | 'procedures'\n    | 'project-diagram'\n    | 'projector'\n    | 'pump-medical'\n    | 'pump-soap'\n    | 'pumpkin'\n    | 'puzzle-piece'\n    | 'qrcode'\n    | 'question'\n    | 'question-circle'\n    | 'question-square'\n    | 'quidditch'\n    | 'quote-left'\n    | 'quote-right'\n    | 'quran'\n    | 'rabbit'\n    | 'rabbit-fast'\n    | 'racquet'\n    | 'radar'\n    | 'radiation'\n    | 'radiation-alt'\n    | 'radio'\n    | 'radio-alt'\n    | 'rainbow'\n    | 'raindrops'\n    | 'ram'\n    | 'ramp-loading'\n    | 'random'\n    | 'raygun'\n    | 'receipt'\n    | 'record-vinyl'\n    | 'rectangle-landscape'\n    | 'rectangle-portrait'\n    | 'rectangle-wide'\n    | 'recycle'\n    | 'redo'\n    | 'redo-alt'\n    | 'refrigerator'\n    | 'registered'\n    | 'remove-format'\n    | 'repeat'\n    | 'repeat-1'\n    | 'repeat-1-alt'\n    | 'repeat-alt'\n    | 'reply'\n    | 'reply-all'\n    | 'republican'\n    | 'restroom'\n    | 'retweet'\n    | 'retweet-alt'\n    | 'ribbon'\n    | 'ring'\n    | 'rings-wedding'\n    | 'road'\n    | 'robot'\n    | 'rocket'\n    | 'rocket-launch'\n    | 'route'\n    | 'route-highway'\n    | 'route-interstate'\n    | 'router'\n    | 'rss'\n    | 'rss-square'\n    | 'ruble-sign'\n    | 'ruler'\n    | 'ruler-combined'\n    | 'ruler-horizontal'\n    | 'ruler-triangle'\n    | 'ruler-vertical'\n    | 'running'\n    | 'rupee-sign'\n    | 'rv'\n    | 'sack'\n    | 'sack-dollar'\n    | 'sad-cry'\n    | 'sad-tear'\n    | 'salad'\n    | 'sandwich'\n    | 'satellite'\n    | 'satellite-dish'\n    | 'sausage'\n    | 'save'\n    | 'sax-hot'\n    | 'saxophone'\n    | 'scalpel'\n    | 'scalpel-path'\n    | 'scanner'\n    | 'scanner-image'\n    | 'scanner-keyboard'\n    | 'scanner-touchscreen'\n    | 'scarecrow'\n    | 'scarf'\n    | 'school'\n    | 'screwdriver'\n    | 'scroll'\n    | 'scroll-old'\n    | 'scrubber'\n    | 'scythe'\n    | 'sd-card'\n    | 'search'\n    | 'search-dollar'\n    | 'search-location'\n    | 'search-minus'\n    | 'search-plus'\n    | 'seedling'\n    | 'send-back'\n    | 'send-backward'\n    | 'sensor'\n    | 'sensor-alert'\n    | 'sensor-fire'\n    | 'sensor-on'\n    | 'sensor-smoke'\n    | 'server'\n    | 'shapes'\n    | 'share'\n    | 'share-all'\n    | 'share-alt'\n    | 'share-alt-square'\n    | 'share-square'\n    | 'sheep'\n    | 'shekel-sign'\n    | 'shield'\n    | 'shield-alt'\n    | 'shield-check'\n    | 'shield-cross'\n    | 'shield-virus'\n    | 'ship'\n    | 'shipping-fast'\n    | 'shipping-timed'\n    | 'shish-kebab'\n    | 'shoe-prints'\n    | 'shopping-bag'\n    | 'shopping-basket'\n    | 'shopping-cart'\n    | 'shovel'\n    | 'shovel-snow'\n    | 'shower'\n    | 'shredder'\n    | 'shuttle-van'\n    | 'shuttlecock'\n    | 'sickle'\n    | 'sigma'\n    | 'sign'\n    | 'sign-in'\n    | 'sign-in-alt'\n    | 'sign-language'\n    | 'sign-out'\n    | 'sign-out-alt'\n    | 'signal'\n    | 'signal-1'\n    | 'signal-2'\n    | 'signal-3'\n    | 'signal-4'\n    | 'signal-alt'\n    | 'signal-alt-1'\n    | 'signal-alt-2'\n    | 'signal-alt-3'\n    | 'signal-alt-slash'\n    | 'signal-slash'\n    | 'signal-stream'\n    | 'signature'\n    | 'sim-card'\n    | 'sink'\n    | 'siren'\n    | 'siren-on'\n    | 'sitemap'\n    | 'skating'\n    | 'skeleton'\n    | 'ski-jump'\n    | 'ski-lift'\n    | 'skiing'\n    | 'skiing-nordic'\n    | 'skull'\n    | 'skull-cow'\n    | 'skull-crossbones'\n    | 'slash'\n    | 'sledding'\n    | 'sleigh'\n    | 'sliders-h'\n    | 'sliders-h-square'\n    | 'sliders-v'\n    | 'sliders-v-square'\n    | 'smile'\n    | 'smile-beam'\n    | 'smile-plus'\n    | 'smile-wink'\n    | 'smog'\n    | 'smoke'\n    | 'smoking'\n    | 'smoking-ban'\n    | 'sms'\n    | 'snake'\n    | 'snooze'\n    | 'snow-blowing'\n    | 'snowboarding'\n    | 'snowflake'\n    | 'snowflakes'\n    | 'snowman'\n    | 'snowmobile'\n    | 'snowplow'\n    | 'soap'\n    | 'socks'\n    | 'solar-panel'\n    | 'solar-system'\n    | 'sort'\n    | 'sort-alpha-down'\n    | 'sort-alpha-down-alt'\n    | 'sort-alpha-up'\n    | 'sort-alpha-up-alt'\n    | 'sort-alt'\n    | 'sort-amount-down'\n    | 'sort-amount-down-alt'\n    | 'sort-amount-up'\n    | 'sort-amount-up-alt'\n    | 'sort-circle'\n    | 'sort-circle-down'\n    | 'sort-circle-up'\n    | 'sort-down'\n    | 'sort-numeric-down'\n    | 'sort-numeric-down-alt'\n    | 'sort-numeric-up'\n    | 'sort-numeric-up-alt'\n    | 'sort-shapes-down'\n    | 'sort-shapes-down-alt'\n    | 'sort-shapes-up'\n    | 'sort-shapes-up-alt'\n    | 'sort-size-down'\n    | 'sort-size-down-alt'\n    | 'sort-size-up'\n    | 'sort-size-up-alt'\n    | 'sort-up'\n    | 'soup'\n    | 'spa'\n    | 'space-shuttle'\n    | 'space-station-moon'\n    | 'space-station-moon-alt'\n    | 'spade'\n    | 'sparkles'\n    | 'speaker'\n    | 'speakers'\n    | 'spell-check'\n    | 'spider'\n    | 'spider-black-widow'\n    | 'spider-web'\n    | 'spinner'\n    | 'spinner-third'\n    | 'splotch'\n    | 'spray-can'\n    | 'sprinkler'\n    | 'square'\n    | 'square-full'\n    | 'square-root'\n    | 'square-root-alt'\n    | 'squirrel'\n    | 'staff'\n    | 'stamp'\n    | 'star'\n    | 'star-and-crescent'\n    | 'star-christmas'\n    | 'star-exclamation'\n    | 'star-half'\n    | 'star-half-alt'\n    | 'star-of-david'\n    | 'star-of-life'\n    | 'star-shooting'\n    | 'starfighter'\n    | 'starfighter-alt'\n    | 'stars'\n    | 'starship'\n    | 'starship-freighter'\n    | 'steak'\n    | 'steering-wheel'\n    | 'step-backward'\n    | 'step-forward'\n    | 'stethoscope'\n    | 'sticky-note'\n    | 'stocking'\n    | 'stomach'\n    | 'stop'\n    | 'stop-circle'\n    | 'stopwatch'\n    | 'stopwatch-20'\n    | 'store'\n    | 'store-alt'\n    | 'store-alt-slash'\n    | 'store-slash'\n    | 'stream'\n    | 'street-view'\n    | 'stretcher'\n    | 'strikethrough'\n    | 'stroopwafel'\n    | 'subscript'\n    | 'subway'\n    | 'suitcase'\n    | 'suitcase-rolling'\n    | 'sun'\n    | 'sun-cloud'\n    | 'sun-dust'\n    | 'sun-haze'\n    | 'sunglasses'\n    | 'sunrise'\n    | 'sunset'\n    | 'superscript'\n    | 'surprise'\n    | 'swatchbook'\n    | 'swimmer'\n    | 'swimming-pool'\n    | 'sword'\n    | 'sword-laser'\n    | 'sword-laser-alt'\n    | 'swords'\n    | 'swords-laser'\n    | 'synagogue'\n    | 'sync'\n    | 'sync-alt'\n    | 'syringe'\n    | 'table'\n    | 'table-tennis'\n    | 'tablet'\n    | 'tablet-alt'\n    | 'tablet-android'\n    | 'tablet-android-alt'\n    | 'tablet-rugged'\n    | 'tablets'\n    | 'tachometer'\n    | 'tachometer-alt'\n    | 'tachometer-alt-average'\n    | 'tachometer-alt-fast'\n    | 'tachometer-alt-fastest'\n    | 'tachometer-alt-slow'\n    | 'tachometer-alt-slowest'\n    | 'tachometer-average'\n    | 'tachometer-fast'\n    | 'tachometer-fastest'\n    | 'tachometer-slow'\n    | 'tachometer-slowest'\n    | 'taco'\n    | 'tag'\n    | 'tags'\n    | 'tally'\n    | 'tanakh'\n    | 'tape'\n    | 'tasks'\n    | 'tasks-alt'\n    | 'taxi'\n    | 'teeth'\n    | 'teeth-open'\n    | 'telescope'\n    | 'temperature-down'\n    | 'temperature-frigid'\n    | 'temperature-high'\n    | 'temperature-hot'\n    | 'temperature-low'\n    | 'temperature-up'\n    | 'tenge'\n    | 'tennis-ball'\n    | 'terminal'\n    | 'text'\n    | 'text-height'\n    | 'text-size'\n    | 'text-width'\n    | 'th'\n    | 'th-large'\n    | 'th-list'\n    | 'theater-masks'\n    | 'thermometer'\n    | 'thermometer-empty'\n    | 'thermometer-full'\n    | 'thermometer-half'\n    | 'thermometer-quarter'\n    | 'thermometer-three-quarters'\n    | 'theta'\n    | 'thumbs-down'\n    | 'thumbs-up'\n    | 'thumbtack'\n    | 'thunderstorm'\n    | 'thunderstorm-moon'\n    | 'thunderstorm-sun'\n    | 'ticket'\n    | 'ticket-alt'\n    | 'tilde'\n    | 'times'\n    | 'times-circle'\n    | 'times-hexagon'\n    | 'times-octagon'\n    | 'times-square'\n    | 'tint'\n    | 'tint-slash'\n    | 'tire'\n    | 'tire-flat'\n    | 'tire-pressure-warning'\n    | 'tire-rugged'\n    | 'tired'\n    | 'toggle-off'\n    | 'toggle-on'\n    | 'toilet'\n    | 'toilet-paper'\n    | 'toilet-paper-alt'\n    | 'toilet-paper-slash'\n    | 'tombstone'\n    | 'tombstone-alt'\n    | 'toolbox'\n    | 'tools'\n    | 'tooth'\n    | 'toothbrush'\n    | 'torah'\n    | 'torii-gate'\n    | 'tornado'\n    | 'tractor'\n    | 'trademark'\n    | 'traffic-cone'\n    | 'traffic-light'\n    | 'traffic-light-go'\n    | 'traffic-light-slow'\n    | 'traffic-light-stop'\n    | 'trailer'\n    | 'train'\n    | 'tram'\n    | 'transgender'\n    | 'transgender-alt'\n    | 'transporter'\n    | 'transporter-1'\n    | 'transporter-2'\n    | 'transporter-3'\n    | 'transporter-empty'\n    | 'trash'\n    | 'trash-alt'\n    | 'trash-restore'\n    | 'trash-restore-alt'\n    | 'trash-undo'\n    | 'trash-undo-alt'\n    | 'treasure-chest'\n    | 'tree'\n    | 'tree-alt'\n    | 'tree-christmas'\n    | 'tree-decorated'\n    | 'tree-large'\n    | 'tree-palm'\n    | 'trees'\n    | 'triangle'\n    | 'triangle-music'\n    | 'trophy'\n    | 'trophy-alt'\n    | 'truck'\n    | 'truck-container'\n    | 'truck-couch'\n    | 'truck-loading'\n    | 'truck-monster'\n    | 'truck-moving'\n    | 'truck-pickup'\n    | 'truck-plow'\n    | 'truck-ramp'\n    | 'trumpet'\n    | 'tshirt'\n    | 'tty'\n    | 'turkey'\n    | 'turntable'\n    | 'turtle'\n    | 'tv'\n    | 'tv-alt'\n    | 'tv-music'\n    | 'tv-retro'\n    | 'typewriter'\n    | 'ufo'\n    | 'ufo-beam'\n    | 'umbrella'\n    | 'umbrella-beach'\n    | 'underline'\n    | 'undo'\n    | 'undo-alt'\n    | 'unicorn'\n    | 'union'\n    | 'universal-access'\n    | 'university'\n    | 'unlink'\n    | 'unlock'\n    | 'unlock-alt'\n    | 'upload'\n    | 'usb-drive'\n    | 'usd-circle'\n    | 'usd-square'\n    | 'user'\n    | 'user-alien'\n    | 'user-alt'\n    | 'user-alt-slash'\n    | 'user-astronaut'\n    | 'user-chart'\n    | 'user-check'\n    | 'user-circle'\n    | 'user-clock'\n    | 'user-cog'\n    | 'user-cowboy'\n    | 'user-crown'\n    | 'user-edit'\n    | 'user-friends'\n    | 'user-graduate'\n    | 'user-hard-hat'\n    | 'user-headset'\n    | 'user-injured'\n    | 'user-lock'\n    | 'user-md'\n    | 'user-md-chat'\n    | 'user-minus'\n    | 'user-music'\n    | 'user-ninja'\n    | 'user-nurse'\n    | 'user-plus'\n    | 'user-robot'\n    | 'user-secret'\n    | 'user-shield'\n    | 'user-slash'\n    | 'user-tag'\n    | 'user-tie'\n    | 'user-times'\n    | 'user-unlock'\n    | 'user-visor'\n    | 'users'\n    | 'users-class'\n    | 'users-cog'\n    | 'users-crown'\n    | 'users-medical'\n    | 'users-slash'\n    | 'utensil-fork'\n    | 'utensil-knife'\n    | 'utensil-spoon'\n    | 'utensils'\n    | 'utensils-alt'\n    | 'vacuum'\n    | 'vacuum-robot'\n    | 'value-absolute'\n    | 'vector-square'\n    | 'venus'\n    | 'venus-double'\n    | 'venus-mars'\n    | 'vest'\n    | 'vest-patches'\n    | 'vhs'\n    | 'vial'\n    | 'vials'\n    | 'video'\n    | 'video-plus'\n    | 'video-slash'\n    | 'vihara'\n    | 'violin'\n    | 'virus'\n    | 'virus-slash'\n    | 'viruses'\n    | 'voicemail'\n    | 'volcano'\n    | 'volleyball-ball'\n    | 'volume'\n    | 'volume-down'\n    | 'volume-mute'\n    | 'volume-off'\n    | 'volume-slash'\n    | 'volume-up'\n    | 'vote-nay'\n    | 'vote-yea'\n    | 'vr-cardboard'\n    | 'wagon-covered'\n    | 'walker'\n    | 'walkie-talkie'\n    | 'walking'\n    | 'wallet'\n    | 'wand'\n    | 'wand-magic'\n    | 'warehouse'\n    | 'warehouse-alt'\n    | 'washer'\n    | 'watch'\n    | 'watch-calculator'\n    | 'watch-fitness'\n    | 'water'\n    | 'water-lower'\n    | 'water-rise'\n    | 'wave-sine'\n    | 'wave-square'\n    | 'wave-triangle'\n    | 'waveform'\n    | 'waveform-path'\n    | 'webcam'\n    | 'webcam-slash'\n    | 'weight'\n    | 'weight-hanging'\n    | 'whale'\n    | 'wheat'\n    | 'wheelchair'\n    | 'whistle'\n    | 'wifi'\n    | 'wifi-1'\n    | 'wifi-2'\n    | 'wifi-slash'\n    | 'wind'\n    | 'wind-turbine'\n    | 'wind-warning'\n    | 'window'\n    | 'window-alt'\n    | 'window-close'\n    | 'window-frame'\n    | 'window-frame-open'\n    | 'window-maximize'\n    | 'window-minimize'\n    | 'window-restore'\n    | 'windsock'\n    | 'wine-bottle'\n    | 'wine-glass'\n    | 'wine-glass-alt'\n    | 'won-sign'\n    | 'wreath'\n    | 'wrench'\n    | 'x-ray'\n    | 'yen-sign'\n    | 'yin-yang';\n",
            "properties": [
                {
                    "name": "animation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconAnimation",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "rotation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconRotation",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconSize",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "styling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconStyle",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "InitializeGameData",
            "id": "interface-InitializeGameData-769c99860db54f42ad776cd446b40e1d7795083a647cdbd675b9298f6dd3d5f4d5b95382c17b63c4eed7f4f9bb03d3a816b08d03bdde9ea3d0d7c63773028b51",
            "file": "src/app/classes/communication/game-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DictionarySummary } from './dictionary-summary';\nimport PlayerData from './player-data';\nimport { RoundData } from './round-data';\n\nexport interface GameConfigData {\n    playerName: string;\n    playerId: string;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n    virtualPlayerName?: string;\n    virtualPlayerLevel?: VirtualPlayerLevel;\n}\n\nexport interface GameConfig {\n    player1: PlayerData;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n}\n\nexport interface ReadyGameConfig extends GameConfig {\n    player2: PlayerData;\n}\n\nexport interface StartGameData extends ReadyGameConfig {\n    gameId: string;\n    board: Square[][];\n    tileReserve: TileReserveData[];\n    round: RoundData;\n}\n\nexport interface InitializeGameData {\n    localPlayerId: string;\n    startGameData: StartGameData;\n}\n",
            "properties": [
                {
                    "name": "localPlayerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "startGameData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StartGameData",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IResetServiceData",
            "id": "interface-IResetServiceData-6dd55fd68cf4555394c741295d8ee68c80c4fe06964e5b225d5a53e22bbb40912bcdd10a8dbbfed77e9cb67253f1d5550c5fc83bc89bfb905f4d219b6ae688a2",
            "file": "src/app/utils/i-reset-service-data/i-reset-service-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IResetServiceData {\n    resetServiceData(): void;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "resetServiceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "LobbyData",
            "id": "interface-LobbyData-3dd47e7f9f7778985efb1bb6cdce43519cb12a94113edbe2829ed70b5641e85e82438164c9f2454052b2896679eba9fa5b2441273afbe5081165ed4c9ec19191",
            "file": "src/app/classes/communication/lobby-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DictionarySummary } from './dictionary-summary';\n\nexport default interface LobbyData {\n    lobbyId: string;\n    hostName: string;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n}\n",
            "properties": [
                {
                    "name": "dictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionarySummary",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "gameMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameMode",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "gameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameType",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hostName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lobbyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "maxRoundTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LobbyInfo",
            "id": "interface-LobbyInfo-fdaf734748da40d3e7852d562f861c2bed25567955d375f02c2cb4e5b8fc208adccc4c360fb57fdf595bb36af8a5eebf80d9106d44c4a3906837dd39a42c64d8",
            "file": "src/app/classes/communication/lobby-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LobbyData } from './';\n\nexport default interface LobbyInfo extends LobbyData {\n    canJoin?: boolean;\n    meetFilters?: boolean;\n}\n",
            "properties": [
                {
                    "name": "canJoin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "meetFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "LobbyData"
        },
        {
            "name": "Location",
            "id": "interface-Location-2798c67cdc54baede54bc9a44c117b112da24457964f380259a23d06729ff85ab2d0bd372b4a7bc6fb4b83f98ce932bbfaad46a7df22e1c2013895fd6cbe8369",
            "file": "src/app/classes/actions/location.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Orientation } from './orientation';\n\nexport interface Location {\n    row: number;\n    col: number;\n    orientation: Orientation;\n}\n",
            "properties": [
                {
                    "name": "col",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Orientation",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Message",
            "id": "interface-Message-0b7858c657bff4dfef512320f010e8f27cf539db47dbcee99187279eab92a8ae510acbe7d2d756a26c605a7536b7ef312775fb8d2cc141a716929f1b77f51273",
            "file": "src/app/components/chatbox-message/chatbox-message.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { onlyHasEmoji } from '@app/utils/emoji/emoji';\nimport { emojify } from 'node-emoji';\nimport { ChatBoxComponent } from '@app/components/chatbox/chatbox.component';\n\nexport interface Message {\n    message: string;\n    isCurrentUser: boolean;\n    username: string;\n}\n\nexport interface DisplayMessage {\n    username: string;\n    isCurrentUser: boolean;\n    messages: string[];\n}\n\n@Component({\n    selector: 'app-chatbox-message',\n    templateUrl: './chatbox-message.component.html',\n    styleUrls: ['./chatbox-message.component.scss'],\n})\nexport class ChatboxMessageComponent extends ChatBoxComponent {\n    @Input() messages: Message[];\n    messageForm: FormGroup;\n    onlyHasEmoji = onlyHasEmoji;\n\n    constructor(private readonly formBuilder: FormBuilder) {\n        super();\n        this.messageForm = this.formBuilder.group({\n            message: new FormControl('', [Validators.required]),\n        });\n    }\n\n    getMessages(): DisplayMessage[] {\n        return this.messages.reduce<DisplayMessage[]>((messages, current) => {\n            const last = messages[messages.length - 1];\n\n            if (last) {\n                if (last.username === current.username) {\n                    last.messages.push(emojify(current.message.trim()));\n                } else {\n                    messages.push({\n                        username: current.username,\n                        isCurrentUser: current.isCurrentUser,\n                        messages: [emojify(current.message.trim())],\n                    });\n                }\n                return messages;\n            } else {\n                return [\n                    {\n                        username: current.username,\n                        isCurrentUser: current.isCurrentUser,\n                        messages: [emojify(current.message.trim())],\n                    },\n                ];\n            }\n        }, []);\n        // return [];\n    }\n\n    addMessage(message: Message): void {\n        this.messages.push(message);\n    }\n\n    onMessageSubmit() {\n        if (!this.messageForm.valid) return;\n\n        const message = this.messageForm.value.message.trim();\n\n        if (message.length === 0) return;\n\n        this.addMessage({\n            message,\n            isCurrentUser: true,\n            username: 'Me',\n        });\n        this.messageForm.setValue({ message: '' });\n    }\n\n    onEmojiClick(emoji: string) {\n        this.addMessage({\n            message: emoji,\n            isCurrentUser: true,\n            username: 'Me',\n        });\n    }\n}\n",
            "properties": [
                {
                    "name": "isCurrentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Message",
            "id": "interface-Message-517d7f8da744200c6eaafb0c1d1c49207ccb3d6aba3c42d131859f21020ab149c86f9ac8a6017b17115ac750d3b3a9499573a9ed580ea8c0a03e5004615fc37c-1",
            "file": "src/app/classes/communication/message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Message {\n    content: string;\n    senderId: string;\n    gameId: string;\n    isClickable?: boolean;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "gameId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isClickable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "senderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Message-1"
        },
        {
            "name": "ObjectiveData",
            "id": "interface-ObjectiveData-79c8a0792808ae55af659544fe78f53a70322b9098fbdcbb96d70baa68ac51d212191e8c2a75e6be4a42259f2be2844142aec8df92b727fd6cf1a2bb5c7ff9f1",
            "file": "src/app/classes/communication/objective-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ObjectiveState } from '@app/classes/objectives/objective-state';\n\nexport interface ObjectiveData {\n    name: string;\n    description: string;\n    bonusPoints: number;\n    state: ObjectiveState;\n    isPublic: boolean;\n    progress: number;\n    maxProgress: number;\n}\n",
            "properties": [
                {
                    "name": "bonusPoints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "maxProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectiveState",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PlaceActionPayload",
            "id": "interface-PlaceActionPayload-249c1ad1deb41bf89379b424f9828c66ce2bb0f2cc65b1709936a9a84d3db6a00280def9582468540cf8dca1e74d259c16af336b7affb0250c114b506b096ca5",
            "file": "src/app/classes/actions/action-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Tile } from '@app/classes/tile';\n\nexport const ACTION_COMMAND_INDICATOR = '!';\n\nexport enum ActionType {\n    PLACE = 'placer',\n    EXCHANGE = 'échanger',\n    PASS = 'passer',\n    RESERVE = 'réserve',\n    HELP = 'aide',\n    HINT = 'indice',\n}\nexport interface ActionPayload {\n    playerId?: string;\n}\n\nexport interface ExchangeActionPayload extends ActionPayload {\n    tiles: Tile[];\n}\nexport interface PlaceActionPayload extends ActionPayload {\n    tiles: Tile[];\n    startPosition: Position;\n    orientation: Orientation;\n}\nexport interface ActionData<T extends ActionPayload = ActionPayload> {\n    type: ActionType;\n    input: string;\n    payload: T;\n}\n",
            "properties": [
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Orientation",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "startPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ActionPayload"
        },
        {
            "name": "PlayerData",
            "id": "interface-PlayerData-8222a3633558da24f67887b524a7d0166a19989cd5550b756b67ec9dccb565396b78b4e7ac93819addb8751574a2f009f21013a52fa88c3873860736fedde2d7",
            "file": "src/app/classes/communication/player-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Tile } from '@app/classes/tile';\nimport { ObjectiveData } from './objective-data';\n\nexport default interface PlayerData {\n    id: string;\n    newId?: string;\n    name?: string;\n    score?: number;\n    tiles?: Tile[];\n    objectives?: ObjectiveData[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "newId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "objectives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectiveData[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PlayerName",
            "id": "interface-PlayerName-e1e86f67ed1eca3354af9123456baad6d1960bfa03e4bab5e36e62914ee792b441f219624c837aa37768402d6741baaebc908063b0a4f1024de6a0cda01147f1",
            "file": "src/app/classes/communication/player-name.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export default interface PlayerName {\n    name?: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Position",
            "id": "interface-Position-5a67a384ce366483fd9f5a863fc74e9049118daacbb26d9d933959072dfd6321bd40bd07ffe6ca6e3446a7d43b430a44736ac4812abd2bf4a934d583760dccf3",
            "file": "src/app/classes/board-navigator/position.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Position {\n    row: number;\n    column: number;\n}\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PositiveFeedbackResponse",
            "id": "interface-PositiveFeedbackResponse-7c4b87e2f3792fd72ae3ac6eddc272975811ffa275efeac60f5d3ff07d2274f8c234c8dfdbaf0a2874ed0ee3c0a33ca3dd22965cdcde1301618de6d056ee72b7",
            "file": "src/app/constants/dialogs-constants.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PositiveFeedbackResponse {\n    duration: number;\n    panelClass: string[];\n}\n\nexport const UPDATE_VIRTUAL_PLAYER_DIALOG_HEIGHT = '300px';\nexport const UPDATE_VIRTUAL_PLAYER_DIALOG_WIDTH = '450px';\n\nexport const CREATE_VIRTUAL_PLAYER_DIALOG_HEIGHT = '315px';\nexport const CREATE_VIRTUAL_PLAYER_DIALOG_WIDTH = '450px';\n",
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "panelClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ReadyGameConfig",
            "id": "interface-ReadyGameConfig-769c99860db54f42ad776cd446b40e1d7795083a647cdbd675b9298f6dd3d5f4d5b95382c17b63c4eed7f4f9bb03d3a816b08d03bdde9ea3d0d7c63773028b51",
            "file": "src/app/classes/communication/game-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DictionarySummary } from './dictionary-summary';\nimport PlayerData from './player-data';\nimport { RoundData } from './round-data';\n\nexport interface GameConfigData {\n    playerName: string;\n    playerId: string;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n    virtualPlayerName?: string;\n    virtualPlayerLevel?: VirtualPlayerLevel;\n}\n\nexport interface GameConfig {\n    player1: PlayerData;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n}\n\nexport interface ReadyGameConfig extends GameConfig {\n    player2: PlayerData;\n}\n\nexport interface StartGameData extends ReadyGameConfig {\n    gameId: string;\n    board: Square[][];\n    tileReserve: TileReserveData[];\n    round: RoundData;\n}\n\nexport interface InitializeGameData {\n    localPlayerId: string;\n    startGameData: StartGameData;\n}\n",
            "properties": [
                {
                    "name": "player2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "GameConfig"
        },
        {
            "name": "Round",
            "id": "interface-Round-473badc747f1eae14acc2d304c0034dba76889877a8e4384a00f8d6c27485ea99bbb2197727d3047bcacc174ce438ac6a21fa18ac292d54d1ea34cf07eb7dc12",
            "file": "src/app/classes/round/round.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Player } from '@app/classes/player';\n\nexport interface Round {\n    player: Player;\n    startTime: Date;\n    limitTime: Date;\n    completedTime: Date | null;\n}\n",
            "properties": [
                {
                    "name": "completedTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "limitTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoundData",
            "id": "interface-RoundData-184214629dfbb8b2c645d33a1cbbf619e14187e80952e55d4e41489fbd3b99f405821a0a3e01ed981bcb4b0cc420ce1801a8e86d890e125849dadd4c3d8a603f",
            "file": "src/app/classes/communication/round-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PlayerData } from '.';\n\nexport interface RoundData {\n    playerData: PlayerData;\n    startTime: Date;\n    limitTime: Date;\n    completedTime: Date | null;\n}\n",
            "properties": [
                {
                    "name": "completedTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "limitTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "playerData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerData",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScoreMultiplier",
            "id": "interface-ScoreMultiplier-0c73b17e3dfdfbef03aa8df2d09c09e79383874c5886aaf09e6ca360700aa46ffff5859003f4255e77037cbfc8c900995633dc6d3afe3aba4bd78b5b7f7e5267",
            "file": "src/app/classes/square/score-multiplier.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type MultiplierValue = 2 | 3;\nexport enum MultiplierEffect {\n    LETTER = 'Lettre',\n    WORD = 'Mot',\n}\n\nexport default interface ScoreMultiplier {\n    multiplierEffect: MultiplierEffect;\n    multiplier: MultiplierValue;\n}\n",
            "properties": [
                {
                    "name": "multiplier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MultiplierValue",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "multiplierEffect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MultiplierEffect",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Square",
            "id": "interface-Square-71641aa9fa3f02548f91ac1094c004480a424f4549b73d9385d87da6654618459f39fc920716c09a7eb995917d51c5202608f335e64e97a1d481197dfd296c9b",
            "file": "src/app/classes/square/square.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Position } from '@app/classes/board-navigator/position';\nimport { Tile } from '@app/classes/tile';\nimport ScoreMultiplier from './score-multiplier';\n\nexport type Multiplier = ScoreMultiplier | null;\nexport default interface Square {\n    tile: Tile | null;\n    position: Position;\n    scoreMultiplier: Multiplier;\n    wasMultiplierUsed: boolean;\n    isCenter: boolean;\n}\n",
            "properties": [
                {
                    "name": "isCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "scoreMultiplier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Multiplier",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "wasMultiplierUsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StartGameData",
            "id": "interface-StartGameData-769c99860db54f42ad776cd446b40e1d7795083a647cdbd675b9298f6dd3d5f4d5b95382c17b63c4eed7f4f9bb03d3a816b08d03bdde9ea3d0d7c63773028b51",
            "file": "src/app/classes/communication/game-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DictionarySummary } from './dictionary-summary';\nimport PlayerData from './player-data';\nimport { RoundData } from './round-data';\n\nexport interface GameConfigData {\n    playerName: string;\n    playerId: string;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n    virtualPlayerName?: string;\n    virtualPlayerLevel?: VirtualPlayerLevel;\n}\n\nexport interface GameConfig {\n    player1: PlayerData;\n    gameType: GameType;\n    gameMode: GameMode;\n    maxRoundTime: number;\n    dictionary: DictionarySummary;\n}\n\nexport interface ReadyGameConfig extends GameConfig {\n    player2: PlayerData;\n}\n\nexport interface StartGameData extends ReadyGameConfig {\n    gameId: string;\n    board: Square[][];\n    tileReserve: TileReserveData[];\n    round: RoundData;\n}\n\nexport interface InitializeGameData {\n    localPlayerId: string;\n    startGameData: StartGameData;\n}\n",
            "properties": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Square[][]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "gameId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "round",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoundData",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tileReserve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TileReserveData[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ReadyGameConfig"
        },
        {
            "name": "TileData",
            "id": "interface-TileData-d48de8c88768092b7bfed28c12effe1967a6719720870bf50215bb0b86e0feb52bc49b7cd68ee55f5be477ff5903e2a678079d8e9b4bcc0da819a6f1eab37c03",
            "file": "src/app/classes/tile/tile.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type LetterValue =\n    | 'A'\n    | 'B'\n    | 'C'\n    | 'D'\n    | 'E'\n    | 'F'\n    | 'G'\n    | 'H'\n    | 'I'\n    | 'J'\n    | 'K'\n    | 'L'\n    | 'M'\n    | 'N'\n    | 'O'\n    | 'P'\n    | 'Q'\n    | 'R'\n    | 'S'\n    | 'T'\n    | 'U'\n    | 'V'\n    | 'W'\n    | 'X'\n    | 'Y'\n    | 'Z'\n    | '*';\n\nexport interface TileData {\n    letter: LetterValue;\n    amount: number;\n    score: number;\n}\n\nexport interface TileReserveData {\n    letter: LetterValue;\n    amount: number;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "letter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TileReserveData",
            "id": "interface-TileReserveData-d48de8c88768092b7bfed28c12effe1967a6719720870bf50215bb0b86e0feb52bc49b7cd68ee55f5be477ff5903e2a678079d8e9b4bcc0da819a6f1eab37c03",
            "file": "src/app/classes/tile/tile.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type LetterValue =\n    | 'A'\n    | 'B'\n    | 'C'\n    | 'D'\n    | 'E'\n    | 'F'\n    | 'G'\n    | 'H'\n    | 'I'\n    | 'J'\n    | 'K'\n    | 'L'\n    | 'M'\n    | 'N'\n    | 'O'\n    | 'P'\n    | 'Q'\n    | 'R'\n    | 'S'\n    | 'T'\n    | 'U'\n    | 'V'\n    | 'W'\n    | 'X'\n    | 'Y'\n    | 'Z'\n    | '*';\n\nexport interface TileData {\n    letter: LetterValue;\n    amount: number;\n    score: number;\n}\n\nexport interface TileReserveData {\n    letter: LetterValue;\n    amount: number;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "letter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UploadEvent",
            "id": "interface-UploadEvent-d7eb43375458586f82028478c7b4aab261c14a8697cdd71c24eb0300f901205a28256da270a31f1337da4be02feb066f6c7a09cb20cf7165b97337d9071e123f",
            "file": "src/app/components/upload-dictionary/upload-dictionary.component.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum UploadState {\n    Ready = 'ready',\n    Init = 'init',\n    Error = 'error',\n}\n\nexport interface UploadEvent extends EventTarget {\n    files: File[];\n}\n",
            "properties": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "EventTarget"
        },
        {
            "name": "Vec2",
            "id": "interface-Vec2-cf5f9336e0d0d12650dc8d003d97b7c2ae480c4ab4cfe71c3057bb1dd24b75469c3e618bd8a280c6f9cec96cfe2b2f5ed49a57334e997db748f30acfa5ba17c8",
            "file": "src/app/classes/board-navigator/vec2.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Vec2 {\n    x: number;\n    y: number;\n}\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ActionService",
            "id": "injectable-ActionService-a9f19c18b5939a910e0de9ff0bd5960fed42d73fbe139b83be19a334e032fbed966b4fcf08901156f51c4ce2bf866d9464a4486a31f3c3937d9fece4c16b1393",
            "file": "src/app/services/action-service/action.service.ts",
            "properties": [
                {
                    "name": "hasActionBeenPlayed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "serviceDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "actionNeedsInput",
                    "args": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "needsInput",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "needsInput",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createActionData",
                    "args": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionPayload",
                            "type": "ActionPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "needsInput",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionData",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionPayload",
                            "type": "ActionPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "needsInput",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createExchangeActionPayload",
                    "args": [
                        {
                            "name": "tiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExchangeActionPayload",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createInputFromPayload",
                    "args": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "ActionPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "ActionPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPlaceActionPayload",
                    "args": [
                        {
                            "name": "tiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startPosition",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "orientation",
                            "type": "Orientation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PlaceActionPayload",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startPosition",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "orientation",
                            "type": "Orientation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleResetUsedTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetHasActionBeenSent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resetServiceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendAction",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionData",
                            "type": "ActionData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionData",
                            "type": "ActionData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendWaitForConfirmationMessage",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { ActionData, ActionPayload, ActionType, ExchangeActionPayload, PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Tile } from '@app/classes/tile';\nimport { WAIT_FOR_COMMAND_CONFIRMATION_MESSAGE } from '@app/constants/services-errors';\nimport { GamePlayController } from '@app/controllers/game-play-controller/game-play.controller';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { ActionPayloadToString } from '@app/utils/action-payload-to-string/action-payload-to-string';\nimport { IResetServiceData } from '@app/utils/i-reset-service-data/i-reset-service-data';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ActionService implements IResetServiceData, OnDestroy {\n    hasActionBeenPlayed: boolean;\n    private serviceDestroyed$: Subject<boolean>;\n\n    constructor(private gamePlayController: GamePlayController, private readonly gameViewEventManagerService: GameViewEventManagerService) {\n        this.hasActionBeenPlayed = false;\n        this.serviceDestroyed$ = new Subject();\n        this.gamePlayController\n            .observeActionDone()\n            .pipe(takeUntil(this.serviceDestroyed$))\n            .subscribe(() => this.resetHasActionBeenSent());\n        this.gameViewEventManagerService.subscribeToGameViewEvent('resetUsedTiles', this.serviceDestroyed$, () => this.handleResetUsedTiles());\n        this.gameViewEventManagerService.subscribeToGameViewEvent('resetServices', this.serviceDestroyed$, () => this.resetServiceData());\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    createPlaceActionPayload(tiles: Tile[], startPosition: Position, orientation: Orientation): PlaceActionPayload {\n        return {\n            tiles,\n            startPosition,\n            orientation,\n        };\n    }\n\n    createExchangeActionPayload(tiles: Tile[]): ExchangeActionPayload {\n        return { tiles };\n    }\n\n    createActionData(actionType: ActionType, actionPayload: ActionPayload, input?: string, needsInput: boolean = false): ActionData {\n        if (!input) input = this.actionNeedsInput(actionType, needsInput) ? this.createInputFromPayload(actionType, actionPayload) : '';\n\n        return {\n            type: actionType,\n            input,\n            payload: actionPayload,\n        };\n    }\n\n    sendAction(gameId: string, playerId: string | undefined, actionData: ActionData): void {\n        if (!playerId) return;\n        if (this.hasActionBeenPlayed) {\n            this.sendWaitForConfirmationMessage(gameId, playerId);\n            return;\n        }\n        this.gamePlayController.sendAction(gameId, playerId, actionData);\n        this.hasActionBeenPlayed = true;\n    }\n\n    resetServiceData(): void {\n        this.hasActionBeenPlayed = false;\n    }\n\n    private actionNeedsInput(actionType: ActionType, needsInput: boolean): boolean {\n        return actionType === ActionType.PLACE || actionType === ActionType.EXCHANGE || needsInput;\n    }\n\n    private createInputFromPayload(actionType: ActionType, payload: ActionPayload): string {\n        switch (actionType) {\n            case ActionType.PLACE:\n                return ActionPayloadToString.placeActionPayloadToString(payload as PlaceActionPayload);\n            case ActionType.EXCHANGE:\n                return ActionPayloadToString.exchangeActionPayloadToString(payload as ExchangeActionPayload);\n            default:\n                return ActionPayloadToString.simpleActionToString(actionType);\n        }\n    }\n\n    private sendWaitForConfirmationMessage(gameId: string, playerId: string): void {\n        this.gamePlayController.sendError(gameId, playerId, WAIT_FOR_COMMAND_CONFIRMATION_MESSAGE(gameId));\n    }\n\n    private resetHasActionBeenSent(): void {\n        this.hasActionBeenPlayed = false;\n    }\n\n    private handleResetUsedTiles(): void {\n        const usedTiles: PlaceActionPayload | undefined = this.gameViewEventManagerService.getGameViewEventValue('usedTiles');\n        if (usedTiles) {\n            usedTiles.tiles.forEach((tile: Tile) => {\n                if (tile.isBlank) tile.playedLetter = undefined;\n            });\n        }\n        this.gameViewEventManagerService.emitGameViewEvent('usedTiles', undefined);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gamePlayController",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "gamePlayController",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BoardService",
            "id": "injectable-BoardService-d490e7e480aec5bc584526414ceda6281214d904baa600e500da3ac903eaeb66128590471fd3302d69dc8e537360de042c71345ffda16bc4b43d866b0aadea34",
            "file": "src/app/services/board-service/board.service.ts",
            "properties": [
                {
                    "name": "boardInitialization$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<[][]>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "boardUpdateEvent$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<Square[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initialBoard",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Square[][]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initializeBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Square[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Square[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readInitialBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToBoardUpdate",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "squaresToUpdate",
                                    "type": "Square[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "squaresToUpdate",
                                    "type": "Square[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToInitializeBoard",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "board",
                                    "type": "Square[][]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "board",
                                    "type": "Square[][]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "squaresUpdated",
                            "type": "Square[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "squaresUpdated",
                            "type": "Square[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Square } from '@app/classes/square';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport default class BoardService {\n    private initialBoard: Square[][] = [];\n    private boardInitialization$: Subject<Square[][]> = new Subject();\n    private boardUpdateEvent$: Subject<Square[]> = new Subject();\n\n    initializeBoard(board: Square[][]): void {\n        this.initialBoard = [...board];\n        this.boardInitialization$.next(this.initialBoard);\n    }\n\n    subscribeToInitializeBoard(destroy$: Observable<boolean>, next: (board: Square[][]) => void): Subscription {\n        return this.boardInitialization$.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    updateBoard(squaresUpdated: Square[]): void {\n        this.boardUpdateEvent$.next(squaresUpdated);\n    }\n\n    subscribeToBoardUpdate(destroy$: Observable<boolean>, next: (squaresToUpdate: Square[]) => void): Subscription {\n        return this.boardUpdateEvent$.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    readInitialBoard(): Square[][] {\n        return [...this.initialBoard];\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CookieService",
            "id": "injectable-CookieService-f679a5ebb98a92a7a772555e2bcdf83993d75ebdedb815503ed0cc36696920e6b439cd5f9858af699c5931e0dfcc1bce216729e08f4d4eac4e4e68771cf02c25",
            "file": "src/app/services/cookie-service/cookie.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "eraseCookie",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCookie",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCookie",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiry",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiry",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SECONDS_TO_MILLISECONDS } from '@app/constants/game-constants';\nimport { EXPIRED_COOKIE_AGE } from '@app/constants/services-errors';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CookieService {\n    setCookie(username: string, value: string, expiry: number): void {\n        const date = new Date();\n        date.setTime(date.getTime() + expiry * SECONDS_TO_MILLISECONDS);\n        const expires = 'expires=' + date.toUTCString();\n        document.cookie = username + '=' + value + '; ' + expires + ';path=/ ;SameSite=strict';\n    }\n\n    getCookie(name: string): string {\n        const nameEQ = name + '=';\n        const keyValPairs = document.cookie.split(';');\n        for (const keyPair of keyValPairs) {\n            const trimmedKeyPair = keyPair.trim();\n            if (trimmedKeyPair.includes(nameEQ)) return trimmedKeyPair.substring(nameEQ.length);\n        }\n        return '';\n    }\n\n    eraseCookie(name: string): void {\n        document.cookie = `${name}=; Max-Age=${EXPIRED_COOKIE_AGE}; SameSite=strict`;\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "DatabaseService",
            "id": "injectable-DatabaseService-c9d19e4d90575fdf8cc0317d2bf50014f864611e5cb908cd0c129ec0d6225f9792e71d104c65ce666bf5d7ededa9b104407c6133576efbab57e6f766152c7e43",
            "file": "src/app/services/database-service/database.service.ts",
            "properties": [
                {
                    "name": "state$",
                    "defaultValue": "new BehaviorSubject<ConnectionState>(ConnectionState.Loading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ConnectionState>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "ConnectionStateService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "checkDatabase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextState",
                    "args": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ConnectionStateService"
                    }
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "ConnectionState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "ConnectionState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ConnectionStateService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ConnectionState } from '@app/classes/connection-state-service/connection-state';\nimport ConnectionStateService from '@app/classes/connection-state-service/connection-state-service';\nimport { DB_CONNECTED_ENDPOINT } from '@app/constants/services-errors';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DatabaseService extends ConnectionStateService {\n    constructor(private readonly http: HttpClient) {\n        super();\n    }\n\n    checkDatabase(): void {\n        this.http.get(DB_CONNECTED_ENDPOINT).subscribe(\n            () => this.nextState(ConnectionState.Connected),\n            () => this.nextState(ConnectionState.Error),\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ConnectionStateService",
            "type": "injectable"
        },
        {
            "name": "DictionaryController",
            "id": "injectable-DictionaryController-8d154e5728d5f88324b7f2e6b197b1ae4cdc384026ada838870809e7ca23d31e662a210a1332f7c76a601e2f7c5e3654f62b1d8fcbe8e742618de677740aa185",
            "file": "src/app/controllers/dictionary-controller/dictionary.controller.ts",
            "properties": [
                {
                    "name": "dictionaryDownloadEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<BasicDictionaryData>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dictionaryErrorEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dictionaryUpdateMessageEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "endpoint",
                    "defaultValue": "`${environment.serverUrl}/dictionaries`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getAllDictionariesEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<DictionarySummary[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleDeleteDictionary",
                    "args": [
                        {
                            "name": "dictionaryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dictionaryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDownloadDictionary",
                    "args": [
                        {
                            "name": "dictionaryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dictionaryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGetAllDictionariesEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleResetDictionaries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleUpdateDictionary",
                    "args": [
                        {
                            "name": "dictionaryUpdateInfo",
                            "type": "DictionaryUpdateInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dictionaryUpdateInfo",
                            "type": "DictionaryUpdateInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleUploadDictionary",
                    "args": [
                        {
                            "name": "dictionaryData",
                            "type": "DictionaryData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dictionaryData",
                            "type": "DictionaryData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToDictionariesUpdateMessageEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToDictionaryDownloadEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dictionaryData",
                                    "type": "BasicDictionaryData",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dictionaryData",
                                    "type": "BasicDictionaryData",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToDictionaryErrorEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToGetAllDictionariesEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dictionaries",
                                    "type": "DictionarySummary[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dictionaries",
                                    "type": "DictionarySummary[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { DictionarySummary } from '@app/classes/communication/dictionary-summary';\nimport { BasicDictionaryData, DictionaryData, DictionaryUpdateInfo } from '@app/classes/dictionary/dictionary-data';\nimport { PositiveFeedback } from '@app/constants/dictionaries-components';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DictionaryController implements OnDestroy {\n    private endpoint = `${environment.serverUrl}/dictionaries`;\n    private dictionaryUpdateMessageEvent: Subject<string> = new Subject();\n    private dictionaryErrorEvent: Subject<string> = new Subject();\n    private dictionaryDownloadEvent: Subject<BasicDictionaryData> = new Subject();\n    private getAllDictionariesEvent: Subject<DictionarySummary[]> = new Subject();\n\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(private http: HttpClient) {}\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    handleUpdateDictionary(dictionaryUpdateInfo: DictionaryUpdateInfo): void {\n        this.http.patch(this.endpoint, { dictionaryUpdateInfo }).subscribe(\n            () => {\n                this.dictionaryUpdateMessageEvent.next(PositiveFeedback.DictionaryUpdated);\n            },\n            (error) => {\n                this.dictionaryErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleDownloadDictionary(dictionaryId: string): void {\n        this.http.get<BasicDictionaryData>(`${this.endpoint}/${dictionaryId}`, { observe: 'body' }).subscribe(\n            (dictionary) => {\n                this.dictionaryDownloadEvent.next(dictionary);\n            },\n            (error) => {\n                this.dictionaryErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleDeleteDictionary(dictionaryId: string): void {\n        let params = new HttpParams();\n        params = params.append('dictionaryId', dictionaryId);\n        this.http.delete(this.endpoint, { params }).subscribe(\n            () => {\n                this.dictionaryUpdateMessageEvent.next(PositiveFeedback.DictionaryDeleted);\n            },\n            (error) => {\n                this.dictionaryErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleUploadDictionary(dictionaryData: DictionaryData): void {\n        this.http.post<string>(this.endpoint, { dictionaryData }).subscribe(\n            () => {\n                this.dictionaryUpdateMessageEvent.next(PositiveFeedback.DictionaryAdded);\n            },\n            (error) => {\n                this.dictionaryErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleGetAllDictionariesEvent(): void {\n        this.http.get<DictionarySummary[]>(`${this.endpoint}/summary`, { observe: 'body' }).subscribe(\n            (body) => {\n                this.getAllDictionariesEvent.next(body);\n            },\n            (error) => {\n                this.dictionaryErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleResetDictionaries(): void {\n        this.http.delete<string>(`${this.endpoint}/reset`, {}).subscribe(\n            () => {\n                this.dictionaryUpdateMessageEvent.next(PositiveFeedback.DictionariesDeleted);\n            },\n            (error) => {\n                this.dictionaryErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    subscribeToDictionariesUpdateMessageEvent(serviceDestroyed$: Subject<boolean>, callback: (response: string) => void): void {\n        this.dictionaryUpdateMessageEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToDictionaryDownloadEvent(serviceDestroyed$: Subject<boolean>, callback: (dictionaryData: BasicDictionaryData) => void): void {\n        this.dictionaryDownloadEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToDictionaryErrorEvent(serviceDestroyed$: Subject<boolean>, callback: (response: string) => void): void {\n        this.dictionaryErrorEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToGetAllDictionariesEvent(serviceDestroyed$: Subject<boolean>, callback: (dictionaries: DictionarySummary[]) => void): void {\n        this.getAllDictionariesEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DictionaryService",
            "id": "injectable-DictionaryService-9beca1ab24934e2654588ac4642f577a28714fe609a7b7d23f6164252b8909378f3ef212252feea3dbf1aed3466ade41fe6edf4dc02ebb6792820cef8908d8ab",
            "file": "src/app/services/dictionary-service/dictionary.service.ts",
            "properties": [
                {
                    "name": "componentUpdateEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dictionaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionarySummary[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dictionariesUpdatedEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<DictionarySummary[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dictionariesUpdateMessageEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isWaitingForServerResponseEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updatingDictionariesEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<DictionariesState>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteDictionary",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadDictionary",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDictionaries",
                    "args": [],
                    "optional": false,
                    "returnType": "DictionarySummary[]",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetDictionaries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startDownload",
                    "args": [
                        {
                            "name": "dictionaryData",
                            "type": "DictionaryData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dictionaryData",
                            "type": "DictionaryData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToComponentUpdateEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToDictionariesUpdateDataEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dictionaries",
                                    "type": "DictionarySummary[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dictionaries",
                                    "type": "DictionarySummary[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToDictionariesUpdateMessageEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToIsWaitingForServerResponseEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToUpdatingDictionariesEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "DictionariesState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "DictionariesState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllDictionaries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDictionary",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadDictionary",
                    "args": [
                        {
                            "name": "dictionaryData",
                            "type": "DictionaryData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dictionaryData",
                            "type": "DictionaryData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DictionariesState } from '@app/classes/admin/dictionaries';\nimport { DictionarySummary } from '@app/classes/communication/dictionary-summary';\nimport { DictionaryData } from '@app/classes/dictionary/dictionary-data';\nimport { DOWNLOAD_ELEMENT } from '@app/constants/dictionary-service-constants';\nimport { DictionaryController } from '@app/controllers/dictionary-controller/dictionary.controller';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DictionaryService {\n    private dictionaries: DictionarySummary[];\n    private dictionariesUpdateMessageEvent: Subject<string> = new Subject();\n    private componentUpdateEvent: Subject<string> = new Subject();\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n    private dictionariesUpdatedEvent: Subject<DictionarySummary[]> = new Subject();\n    private isWaitingForServerResponseEvent: Subject<null> = new Subject();\n    private updatingDictionariesEvent: Subject<DictionariesState> = new Subject();\n\n    constructor(private dictionariesController: DictionaryController) {\n        this.dictionariesController.subscribeToDictionariesUpdateMessageEvent(this.serviceDestroyed$, (message) => {\n            this.isWaitingForServerResponseEvent.next();\n            this.dictionariesUpdateMessageEvent.next(message);\n            this.componentUpdateEvent.next(message);\n            this.updateAllDictionaries();\n        });\n\n        this.dictionariesController.subscribeToDictionaryDownloadEvent(this.serviceDestroyed$, (dictionaryData) => {\n            this.isWaitingForServerResponseEvent.next();\n            this.startDownload(dictionaryData);\n        });\n\n        this.dictionariesController.subscribeToDictionaryErrorEvent(this.serviceDestroyed$, (response) => {\n            this.isWaitingForServerResponseEvent.next();\n            this.componentUpdateEvent.next(response);\n        });\n\n        this.dictionariesController.subscribeToGetAllDictionariesEvent(this.serviceDestroyed$, (dictionaries: DictionarySummary[]) => {\n            this.isWaitingForServerResponseEvent.next();\n            this.dictionaries = dictionaries;\n            this.dictionariesUpdatedEvent.next(dictionaries);\n            this.updatingDictionariesEvent.next(DictionariesState.Ready);\n        });\n    }\n\n    subscribeToUpdatingDictionariesEvent(serviceDestroyed$: Subject<boolean>, callback: (state: DictionariesState) => void): void {\n        this.updatingDictionariesEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToIsWaitingForServerResponseEvent(serviceDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.isWaitingForServerResponseEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToDictionariesUpdateDataEvent(serviceDestroyed$: Subject<boolean>, callback: (dictionaries: DictionarySummary[]) => void): void {\n        this.dictionariesUpdatedEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToComponentUpdateEvent(serviceDestroyed$: Subject<boolean>, callback: (response: string) => void): void {\n        this.componentUpdateEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToDictionariesUpdateMessageEvent(serviceDestroyed$: Subject<boolean>, callback: (response: string) => void): void {\n        this.dictionariesUpdateMessageEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    updateDictionary(id: string, title: string, description: string): void {\n        this.isWaitingForServerResponseEvent.next();\n        this.dictionariesController.handleUpdateDictionary({ title, description, id });\n    }\n\n    downloadDictionary(id: string): void {\n        this.isWaitingForServerResponseEvent.next();\n        this.dictionariesController.handleDownloadDictionary(id);\n    }\n\n    deleteDictionary(id: string): void {\n        this.isWaitingForServerResponseEvent.next();\n        this.dictionariesController.handleDeleteDictionary(id);\n    }\n\n    resetDictionaries(): void {\n        this.isWaitingForServerResponseEvent.next();\n        this.dictionariesController.handleResetDictionaries();\n    }\n\n    uploadDictionary(dictionaryData: DictionaryData): void {\n        this.isWaitingForServerResponseEvent.next();\n        this.dictionariesController.handleUploadDictionary(dictionaryData);\n    }\n\n    updateAllDictionaries(): void {\n        this.dictionariesController.handleGetAllDictionariesEvent();\n    }\n\n    getDictionaries(): DictionarySummary[] {\n        this.updatingDictionariesEvent.next(DictionariesState.Loading);\n        return this.dictionaries;\n    }\n\n    private startDownload(dictionaryData: DictionaryData): void {\n        const title = dictionaryData.title + '.json';\n        const downloadProcess = window.document.createElement(DOWNLOAD_ELEMENT);\n\n        downloadProcess.href = window.URL.createObjectURL(new Blob([JSON.stringify(dictionaryData)], { type: 'application/json' }));\n        downloadProcess.download = title;\n\n        document.body.appendChild(downloadProcess);\n        downloadProcess.click();\n        document.body.removeChild(downloadProcess);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dictionariesController",
                        "type": "DictionaryController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dictionariesController",
                        "type": "DictionaryController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FocusableComponentsService",
            "id": "injectable-FocusableComponentsService-2cbfed5b9903dd019b823b3f9bc5f20d6f4c0a63e0721223ad5e7b689848d678ae145055dfa1fa82fb08c0b7874be9e7d53b9db3008ab4ee33b2a15fdabd86ce",
            "file": "src/app/services/focusable-components-service/focusable-components.service.ts",
            "properties": [
                {
                    "name": "activeKeyboardComponent",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusableComponent<KeyboardEvent>",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emitKeyboard",
                    "args": [
                        {
                            "name": "value",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActiveKeyboardComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "FocusableComponent<KeyboardEvent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "FocusableComponent<KeyboardEvent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FocusableComponent } from '@app/classes/focusable-component/focusable-component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FocusableComponentsService {\n    private activeKeyboardComponent?: FocusableComponent<KeyboardEvent> = undefined;\n\n    setActiveKeyboardComponent(component: FocusableComponent<KeyboardEvent>): boolean {\n        if (component === this.activeKeyboardComponent) return false;\n        this.activeKeyboardComponent?.emitLoseFocusEvent();\n        this.activeKeyboardComponent = component;\n        return true;\n    }\n\n    emitKeyboard(value: KeyboardEvent): boolean {\n        if (!this.activeKeyboardComponent) return false;\n        this.activeKeyboardComponent.emitFocusableEvent(value);\n        return true;\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "GameDispatcherController",
            "id": "injectable-GameDispatcherController-2c9814c53460a47a42eab69e407e02f6667f1ac8909992fa4bf00fd509f5e395316cba17474f7631131c58cd08c07bbe2e07df7c1da4d3d8af4677b91c542d9e",
            "file": "src/app/controllers/game-dispatcher-controller/game-dispatcher.controller.ts",
            "properties": [
                {
                    "name": "canceledGameEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initializeGame$",
                    "defaultValue": "new BehaviorSubject<InitializeGameData | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<InitializeGameData | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "joinerRejectedEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "joinRequestEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lobbiesUpdateEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<LobbyInfo[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lobbyFullEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lobbyRequestValidEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "socketService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocketService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "configureSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleCancelGame",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleConfirmationGameCreation",
                    "args": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGameCreation",
                    "args": [
                        {
                            "name": "gameConfig",
                            "type": "GameConfigData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameConfig",
                            "type": "GameConfigData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleJoinError",
                    "args": [
                        {
                            "name": "errorStatus",
                            "type": "HttpStatusCode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorStatus",
                            "type": "HttpStatusCode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLobbiesListRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleLobbyJoinRequest",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRejectionGameCreation",
                    "args": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToCanceledGameEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToInitializeGame",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "InitializeGameData | undefined",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "InitializeGameData | undefined",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToJoinerRejectedEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToJoinRequestEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "opponentName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "opponentName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToLobbiesUpdateEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "lobbies",
                                    "type": "LobbyInfo[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "lobbies",
                                    "type": "LobbyInfo[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToLobbyFullEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToLobbyRequestValidEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpStatusCode } from '@angular/common/http';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { LobbyData, LobbyInfo, PlayerName } from '@app/classes/communication/';\nimport { GameConfig, GameConfigData, InitializeGameData, StartGameData } from '@app/classes/communication/game-config';\nimport SocketService from '@app/services/socket-service/socket.service';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GameDispatcherController implements OnDestroy {\n    private joinRequestEvent: Subject<string> = new Subject();\n    private canceledGameEvent: Subject<string> = new Subject();\n    private lobbyFullEvent: Subject<void> = new Subject();\n    private lobbyRequestValidEvent: Subject<void> = new Subject();\n    private lobbiesUpdateEvent: Subject<LobbyInfo[]> = new Subject();\n    private joinerRejectedEvent: Subject<string> = new Subject();\n    private initializeGame$: BehaviorSubject<InitializeGameData | undefined> = new BehaviorSubject<InitializeGameData | undefined>(undefined);\n\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(private http: HttpClient, public socketService: SocketService) {\n        this.configureSocket();\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    handleGameCreation(gameConfig: GameConfigData): Observable<{ lobbyData: LobbyData }> {\n        const endpoint = `${environment.serverUrl}/games/${this.socketService.getId()}`;\n        return this.http.post<{ lobbyData: LobbyData }>(endpoint, gameConfig);\n    }\n\n    handleConfirmationGameCreation(opponentName: string, gameId: string): Observable<void> {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${this.socketService.getId()}/accept`;\n        return this.http.post<void>(endpoint, { opponentName });\n    }\n\n    handleRejectionGameCreation(opponentName: string, gameId: string): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${this.socketService.getId()}/reject`;\n        this.http.post(endpoint, { opponentName }).subscribe();\n    }\n\n    handleCancelGame(gameId: string): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${this.socketService.getId()}/cancel`;\n        this.http.delete(endpoint).subscribe();\n    }\n\n    handleLobbiesListRequest(): void {\n        const endpoint = `${environment.serverUrl}/games/${this.socketService.getId()}`;\n        this.http.get(endpoint).subscribe();\n    }\n\n    handleLobbyJoinRequest(gameId: string, playerName: string): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${this.socketService.getId()}/join`;\n        this.http.post<GameConfig>(endpoint, { playerName }, { observe: 'response' }).subscribe(\n            () => {\n                this.lobbyRequestValidEvent.next();\n            },\n            (error) => {\n                this.handleJoinError(error.status as HttpStatusCode);\n            },\n        );\n    }\n\n    subscribeToJoinRequestEvent(serviceDestroyed$: Subject<boolean>, callback: (opponentName: string) => void): void {\n        this.joinRequestEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToCanceledGameEvent(serviceDestroyed$: Subject<boolean>, callback: (hostName: string) => void): void {\n        this.canceledGameEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToLobbyFullEvent(serviceDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.lobbyFullEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToLobbyRequestValidEvent(serviceDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.lobbyRequestValidEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToLobbiesUpdateEvent(serviceDestroyed$: Subject<boolean>, callback: (lobbies: LobbyInfo[]) => void): void {\n        this.lobbiesUpdateEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToJoinerRejectedEvent(serviceDestroyed$: Subject<boolean>, callback: (hostName: string) => void): void {\n        this.joinerRejectedEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToInitializeGame(serviceDestroyed$: Subject<boolean>, callback: (value: InitializeGameData | undefined) => void): void {\n        this.initializeGame$.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    private handleJoinError(errorStatus: HttpStatusCode): void {\n        if (errorStatus === HttpStatusCode.Unauthorized) {\n            this.lobbyFullEvent.next();\n        } else if (errorStatus === HttpStatusCode.Gone) {\n            this.canceledGameEvent.next('Le créateur');\n        }\n    }\n\n    private configureSocket(): void {\n        this.socketService.on('joinRequest', (opponent: PlayerName) => {\n            this.joinRequestEvent.next(opponent.name);\n        });\n        this.socketService.on('startGame', (startGameData: StartGameData) => {\n            this.initializeGame$.next({ localPlayerId: this.socketService.getId(), startGameData });\n        });\n        this.socketService.on('lobbiesUpdate', (lobbies: LobbyInfo[]) => {\n            this.lobbiesUpdateEvent.next(lobbies);\n        });\n        this.socketService.on('rejected', (hostName: PlayerName) => {\n            this.joinerRejectedEvent.next(hostName.name);\n        });\n        this.socketService.on('canceledGame', (opponent: PlayerName) => this.canceledGameEvent.next(opponent.name));\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GameDispatcherService",
            "id": "injectable-GameDispatcherService-ef38862a43b06437332c719b2b073e2a9377428db263c615de5aa86c93cf0993f5a9aec44ddfc9a1b2669174c675c991371346dba25800e84ca923d24268aad5",
            "file": "src/app/services/game-dispatcher-service/game-dispatcher.service.ts",
            "properties": [
                {
                    "name": "canceledGameEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentLobby",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LobbyInfo | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currentName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "gameCreationFailed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<HttpErrorResponse>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "joinerRejectedEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "joinRequestEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lobbiesUpdateEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<LobbyInfo[]>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lobbyFullEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentLobbyId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleCanceledGame",
                    "args": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCancelGame",
                    "args": [
                        {
                            "name": "mustResetData",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mustResetData",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleConfirmation",
                    "args": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCreateGame",
                    "args": [
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gameParameters",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gameParameters",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGameCreation",
                    "args": [
                        {
                            "name": "gameConfig",
                            "type": "GameConfigData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameConfig",
                            "type": "GameConfigData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleJoinerRejected",
                    "args": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleJoinLobby",
                    "args": [
                        {
                            "name": "lobby",
                            "type": "LobbyInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lobby",
                            "type": "LobbyInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleJoinRequest",
                    "args": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLobbiesUpdate",
                    "args": [
                        {
                            "name": "lobbies",
                            "type": "LobbyInfo[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "lobbies",
                            "type": "LobbyInfo[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLobbyFull",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleLobbyListRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleRecreateGame",
                    "args": [
                        {
                            "name": "gameParameters",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameParameters",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRejection",
                    "args": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isGameModeSolo",
                    "args": [
                        {
                            "name": "gameParameters",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameParameters",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeGameCreationFailed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<HttpErrorResponse>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetServiceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToCanceledGameEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToJoinerRejectedEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "hostName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToJoinRequestEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "opponentName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "opponentName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToLobbiesUpdateEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "lobbies",
                                    "type": "LobbyInfo[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "lobbies",
                                    "type": "LobbyInfo[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToLobbyFullEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LobbyInfo } from '@app/classes/communication/';\nimport { DictionarySummary } from '@app/classes/communication/dictionary-summary';\nimport { GameConfigData, InitializeGameData } from '@app/classes/communication/game-config';\nimport { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { GameDispatcherController } from '@app/controllers/game-dispatcher-controller/game-dispatcher.controller';\nimport GameService from '@app/services/game-service/game.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport default class GameDispatcherService implements OnDestroy {\n    currentName: string = '';\n    currentLobby: LobbyInfo | undefined = undefined;\n\n    private gameCreationFailed$: Subject<HttpErrorResponse> = new Subject();\n    private joinRequestEvent: Subject<string> = new Subject();\n    private canceledGameEvent: Subject<string> = new Subject();\n    private lobbyFullEvent: Subject<void> = new Subject();\n    private lobbiesUpdateEvent: Subject<LobbyInfo[]> = new Subject();\n    private joinerRejectedEvent: Subject<string> = new Subject();\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(\n        private gameDispatcherController: GameDispatcherController,\n        public router: Router,\n        private readonly gameService: GameService,\n        private readonly gameViewEventManagerService: GameViewEventManagerService,\n    ) {\n        this.gameDispatcherController.subscribeToJoinRequestEvent(this.serviceDestroyed$, (opponentName: string) =>\n            this.handleJoinRequest(opponentName),\n        );\n        this.gameDispatcherController.subscribeToLobbyFullEvent(this.serviceDestroyed$, () => this.handleLobbyFull());\n        this.gameDispatcherController.subscribeToLobbyRequestValidEvent(this.serviceDestroyed$, async () =>\n            this.router.navigateByUrl('join-waiting-room'),\n        );\n        this.gameDispatcherController.subscribeToCanceledGameEvent(this.serviceDestroyed$, (hostName: string) => this.handleCanceledGame(hostName));\n        this.gameDispatcherController.subscribeToJoinerRejectedEvent(this.serviceDestroyed$, (hostName: string) =>\n            this.handleJoinerRejected(hostName),\n        );\n        this.gameDispatcherController.subscribeToLobbiesUpdateEvent(this.serviceDestroyed$, (lobbies: LobbyInfo[]) =>\n            this.handleLobbiesUpdate(lobbies),\n        );\n        this.gameDispatcherController.subscribeToInitializeGame(this.serviceDestroyed$, async (initializeValue: InitializeGameData | undefined) =>\n            this.gameService.handleInitializeGame(initializeValue),\n        );\n\n        this.gameViewEventManagerService.subscribeToGameViewEvent('resetServices', this.serviceDestroyed$, () => this.resetServiceData());\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    getCurrentLobbyId(): string {\n        return !this.currentLobby ? '' : this.currentLobby.lobbyId;\n    }\n\n    resetServiceData(): void {\n        this.currentLobby = undefined;\n        this.currentName = '';\n    }\n\n    handleJoinLobby(lobby: LobbyInfo, playerName: string): void {\n        this.currentLobby = lobby;\n        this.currentName = playerName;\n        this.gameDispatcherController.handleLobbyJoinRequest(this.getCurrentLobbyId(), playerName);\n    }\n\n    handleLobbyListRequest(): void {\n        this.gameDispatcherController.handleLobbiesListRequest();\n    }\n\n    handleCreateGame(playerName: string, gameParameters: FormGroup): void {\n        const gameMode: GameMode = gameParameters.get('gameMode')?.value as GameMode;\n        const gameConfig: GameConfigData = {\n            playerName,\n            playerId: this.gameDispatcherController.socketService.getId(),\n            gameType: gameParameters.get('gameType')?.value as GameType,\n            gameMode,\n            maxRoundTime: gameParameters.get('timer')?.value as number,\n            dictionary: gameParameters.get('dictionary')?.value as DictionarySummary,\n        };\n        if (gameMode === GameMode.Solo) {\n            gameConfig.virtualPlayerName = gameParameters.get('virtualPlayerName')?.value as string;\n            gameConfig.virtualPlayerLevel = gameParameters.get('level')?.value as VirtualPlayerLevel;\n        }\n        this.handleGameCreation(gameConfig);\n    }\n\n    handleRecreateGame(gameParameters?: FormGroup): void {\n        if (!this.currentLobby) return;\n\n        const gameConfig: GameConfigData = {\n            playerName: this.currentLobby?.hostName,\n            playerId: this.gameDispatcherController.socketService.getId(),\n            gameType: this.currentLobby?.gameType,\n            gameMode: this.isGameModeSolo(gameParameters) ? GameMode.Solo : GameMode.Multiplayer,\n            maxRoundTime: this.currentLobby?.maxRoundTime,\n            dictionary: this.currentLobby?.dictionary,\n        };\n\n        if (gameParameters && this.isGameModeSolo(gameParameters)) {\n            gameConfig.virtualPlayerName = gameParameters.get('virtualPlayerName')?.value as string;\n            gameConfig.virtualPlayerLevel = gameParameters.get('level')?.value as VirtualPlayerLevel;\n        }\n        this.handleGameCreation(gameConfig);\n    }\n\n    handleCancelGame(mustResetData: boolean = true): void {\n        if (this.getCurrentLobbyId()) this.gameDispatcherController.handleCancelGame(this.getCurrentLobbyId());\n        if (mustResetData) this.resetServiceData();\n    }\n\n    handleConfirmation(opponentName: string): void {\n        if (this.getCurrentLobbyId())\n            this.gameDispatcherController\n                .handleConfirmationGameCreation(opponentName, this.getCurrentLobbyId())\n                .subscribe({ next: undefined, error: (error: HttpErrorResponse) => this.gameCreationFailed$.next(error) });\n    }\n\n    handleRejection(opponentName: string): void {\n        if (this.getCurrentLobbyId()) this.gameDispatcherController.handleRejectionGameCreation(opponentName, this.getCurrentLobbyId());\n    }\n\n    subscribeToJoinRequestEvent(componentDestroyed$: Subject<boolean>, callback: (opponentName: string) => void): void {\n        this.joinRequestEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToCanceledGameEvent(componentDestroyed$: Subject<boolean>, callback: (hostName: string) => void): void {\n        this.canceledGameEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToLobbyFullEvent(componentDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.lobbyFullEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToLobbiesUpdateEvent(componentDestroyed$: Subject<boolean>, callback: (lobbies: LobbyInfo[]) => void): void {\n        this.lobbiesUpdateEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToJoinerRejectedEvent(componentDestroyed$: Subject<boolean>, callback: (hostName: string) => void): void {\n        this.joinerRejectedEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    observeGameCreationFailed(): Observable<HttpErrorResponse> {\n        return this.gameCreationFailed$.asObservable();\n    }\n\n    private handleGameCreation(gameConfig: GameConfigData): void {\n        this.gameDispatcherController.handleGameCreation(gameConfig).subscribe(\n            (response) => {\n                this.currentLobby = response.lobbyData;\n                if (this.currentLobby && this.currentLobby.gameMode === GameMode.Multiplayer) {\n                    this.router.navigateByUrl('waiting-room');\n                }\n            },\n            (error: HttpErrorResponse) => {\n                this.gameCreationFailed$.next(error);\n            },\n        );\n    }\n\n    private isGameModeSolo(gameParameters?: FormGroup): boolean {\n        return (gameParameters && gameParameters.get('gameMode')?.value === GameMode.Solo) ?? false;\n    }\n\n    private handleJoinRequest(opponentName: string): void {\n        this.joinRequestEvent.next(opponentName);\n    }\n\n    private handleJoinerRejected(hostName: string): void {\n        this.joinerRejectedEvent.next(hostName);\n        this.resetServiceData();\n    }\n\n    private handleLobbiesUpdate(lobbies: LobbyInfo[]): void {\n        this.lobbiesUpdateEvent.next(lobbies);\n    }\n\n    private handleLobbyFull(): void {\n        this.lobbyFullEvent.next();\n        this.resetServiceData();\n    }\n\n    private handleCanceledGame(hostName: string): void {\n        this.canceledGameEvent.next(hostName);\n        this.resetServiceData();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameDispatcherController",
                        "type": "GameDispatcherController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "gameDispatcherController",
                        "type": "GameDispatcherController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GameHistoryController",
            "id": "injectable-GameHistoryController-13b7c290167e2f56059c00482cd8ac0dea45875ad8292bb766d3670b66724860b1fd3273d0ac634221d1b37f3380dc1fe9ff3810b14b9139cbacb810d79819e3",
            "file": "src/app/controllers/game-history-controller/game-history.controller.ts",
            "properties": [
                {
                    "name": "endpoint",
                    "defaultValue": "`${environment.serverUrl}/gameHistories`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getGameHistories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GameHistoriesData>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetGameHistories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { GameHistoriesData } from '@app/classes/communication/game-histories';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GameHistoryController {\n    private endpoint = `${environment.serverUrl}/gameHistories`;\n\n    constructor(private readonly http: HttpClient) {}\n\n    getGameHistories(): Observable<GameHistoriesData> {\n        return this.http.get<GameHistoriesData>(this.endpoint);\n    }\n\n    resetGameHistories(): Observable<void> {\n        return this.http.delete<void>(this.endpoint);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GameHistoryService",
            "id": "injectable-GameHistoryService-7277b96755b979bf78523d97a1fc52df782252278f335fe1115e297f5036f666a58c06189e8634d02edb68989791acc9b68199f158231c7dba70e86033a80fa3",
            "file": "src/app/services/game-history-service/game-history.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getGameHistories",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<NoId[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "resetGameHistories",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { GameHistoriesConverter } from '@app/classes/game-history/game-histories-converter';\nimport { GameHistoryController } from '@app/controllers/game-history-controller/game-history.controller';\nimport { catchError, retry } from 'rxjs/operators';\nimport { GameHistoryWithPlayers } from '@common/models/game-history';\nimport { NoId } from '@common/types/no-id';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GameHistoryService {\n    constructor(private readonly gameHistoryController: GameHistoryController) {}\n\n    async getGameHistories(): Promise<NoId<GameHistoryWithPlayers>[]> {\n        return new Promise((resolve, reject) => {\n            this.gameHistoryController\n                .getGameHistories()\n                .pipe(\n                    retry(1),\n                    catchError((error, caught) => {\n                        reject(error);\n                        return caught;\n                    }),\n                )\n                .subscribe((gameHistories) => {\n                    resolve(GameHistoriesConverter.convert(gameHistories));\n                });\n        });\n    }\n\n    async resetGameHistories(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.gameHistoryController\n                .resetGameHistories()\n                .pipe(\n                    retry(1),\n                    catchError((error, caught) => {\n                        reject(error);\n                        return caught;\n                    }),\n                )\n                .subscribe(() => {\n                    resolve();\n                });\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameHistoryController",
                        "type": "GameHistoryController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "gameHistoryController",
                        "type": "GameHistoryController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GamePlayController",
            "id": "injectable-GamePlayController-533bbc3e240ff851951ad576555736412963860016b3aabf48cffacd3f3d38f88dd902873df7c0812a137a00046b1351c9d8d6a51ffa489a99eeea9c4910c650",
            "file": "src/app/controllers/game-play-controller/game-play.controller.ts",
            "properties": [
                {
                    "name": "actionDone$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameUpdate$",
                    "defaultValue": "new BehaviorSubject<GameUpdateData>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "newMessage$",
                    "defaultValue": "new BehaviorSubject<Message | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "configureSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleDisconnectError",
                    "args": [
                        {
                            "name": "error",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDisconnection",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDisconnectResponse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleReconnection",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPlayerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPlayerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeActionDone",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeGameUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GameUpdateData>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeNewMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Message | null>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendAction",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ActionData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ActionData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendError",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActionData } from '@app/classes/actions/action-data';\nimport GameUpdateData from '@app/classes/communication/game-update-data';\nimport { Message } from '@app/classes/communication/message';\nimport { HTTP_ABORT_ERROR } from '@app/constants/controllers-errors';\nimport SocketService from '@app/services/socket-service/socket.service';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GamePlayController {\n    private gameUpdate$ = new BehaviorSubject<GameUpdateData>({});\n    private newMessage$ = new BehaviorSubject<Message | null>(null);\n    private actionDone$ = new Subject<void>();\n\n    constructor(private http: HttpClient, private readonly socketService: SocketService) {\n        this.configureSocket();\n    }\n\n    sendAction(gameId: string, playerId: string, action: ActionData): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${playerId}/action`;\n        this.http.post(endpoint, action).subscribe(() => {\n            this.actionDone$.next();\n        });\n    }\n\n    sendMessage(gameId: string, playerId: string, message: Message): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${playerId}/message`;\n        this.http.post(endpoint, message).subscribe();\n    }\n\n    sendError(gameId: string, playerId: string, message: Message): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${playerId}/error`;\n        this.http.post(endpoint, message).subscribe();\n    }\n\n    handleReconnection(gameId: string, playerId: string, newPlayerId: string): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${playerId}/reconnect`;\n        this.http.post(endpoint, { newPlayerId }).subscribe();\n    }\n\n    handleDisconnection(gameId: string, playerId: string): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${playerId}/disconnect`;\n        // When reloading the page, a disconnect http request is fired on destruction of the game-page component.\n        // In the initialization of the game-page component, a reconnect request is made which does not allow the\n        // server to send a response, triggering a Abort 0  error code which is why we catch it if it this this code\n        this.http.delete(endpoint, { observe: 'response' }).subscribe(this.handleDisconnectResponse, this.handleDisconnectError);\n    }\n\n    observeGameUpdate(): Observable<GameUpdateData> {\n        return this.gameUpdate$.asObservable();\n    }\n\n    observeNewMessage(): Observable<Message | null> {\n        return this.newMessage$.asObservable();\n    }\n\n    observeActionDone(): Observable<void> {\n        return this.actionDone$.asObservable();\n    }\n\n    private configureSocket(): void {\n        this.socketService.on('gameUpdate', (newData: GameUpdateData) => {\n            this.gameUpdate$.next(newData);\n        });\n        this.socketService.on('newMessage', (newMessage: Message) => {\n            this.newMessage$.next(newMessage);\n        });\n    }\n\n    private handleDisconnectResponse(): void {\n        return;\n    }\n\n    private handleDisconnectError(error: { message: string; status: number }): void {\n        if (error.status !== HTTP_ABORT_ERROR) throw new Error(error.message);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GameService",
            "id": "injectable-GameService-fdb745d4a624c3bcf3c7c868e8d2c3cb300aa2c285976399c091120f8938f33c3b562d283eea0de8333ac9f36785612bc4a4ffdfbaa2fd20919fb4d7616979e6",
            "file": "src/app/services/game-service/game.service.ts",
            "properties": [
                {
                    "name": "gameId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameType",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isGameOver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isGameSetUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "playerContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerContainer",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tileReserve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TileReserveData[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [
                {
                    "name": "getGameId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGameType",
                    "args": [],
                    "optional": false,
                    "returnType": "GameType",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLocalPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "Player | undefined",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLocalPlayerId",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPlayerByNumber",
                    "args": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Player | undefined",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlayingPlayerId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getTotalNumberOfTilesLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleGameOver",
                    "args": [
                        {
                            "name": "winnerNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "winnerNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGameUpdate",
                    "args": [
                        {
                            "name": "gameUpdateData",
                            "type": "GameUpdateData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameUpdateData",
                            "type": "GameUpdateData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInitializeGame",
                    "args": [
                        {
                            "name": "initializeGameData",
                            "type": "InitializeGameData | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "initializeGameData",
                            "type": "InitializeGameData | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNewMessage",
                    "args": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleReRouteOrReconnect",
                    "args": [
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTileReserveUpdate",
                    "args": [
                        {
                            "name": "tileReserve",
                            "type": "TileReserveData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tileReserve",
                            "type": "TileReserveData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleUpdatePlayerData",
                    "args": [
                        {
                            "name": "playerData",
                            "type": "PlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "playerData",
                            "type": "PlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeGame",
                    "args": [
                        {
                            "name": "localPlayerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "localPlayerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLocalPlayerPlayer1",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLocalPlayerPlaying",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reconnectReinitialize",
                    "args": [
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetGameId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetServiceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { GameUpdateData, PlayerData } from '@app/classes/communication/';\nimport { InitializeGameData, StartGameData } from '@app/classes/communication/game-config';\nimport { Message } from '@app/classes/communication/message';\nimport { Player } from '@app/classes/player';\nimport { PlayerContainer } from '@app/classes/player/player-container';\nimport { Round } from '@app/classes/round/round';\nimport { Square } from '@app/classes/square';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { SYSTEM_ERROR_ID } from '@app/constants/game-constants';\nimport { GameType } from '@app/constants/game-type';\nimport { GamePlayController } from '@app/controllers/game-play-controller/game-play.controller';\nimport BoardService from '@app/services/board-service/board.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { ObjectivesManagerService } from '@app/services/objectives-manager-service/objectives-manager.service';\nimport RoundManagerService from '@app/services/round-manager-service/round-manager.service';\nimport { IResetServiceData } from '@app/utils/i-reset-service-data/i-reset-service-data';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport default class GameService implements OnDestroy, IResetServiceData {\n    tileReserve: TileReserveData[];\n\n    isGameSetUp: boolean;\n    isGameOver: boolean;\n\n    private gameId: string;\n    private gameType: GameType;\n    private playerContainer?: PlayerContainer;\n    private serviceDestroyed$: Subject<boolean>;\n\n    constructor(\n        private router: Router,\n        private boardService: BoardService,\n        private roundManager: RoundManagerService,\n        private objectiveManager: ObjectivesManagerService,\n        private gameController: GamePlayController,\n        private gameViewEventManagerService: GameViewEventManagerService,\n    ) {\n        this.serviceDestroyed$ = new Subject();\n        this.gameController\n            .observeNewMessage()\n            .pipe(takeUntil(this.serviceDestroyed$))\n            .subscribe((newMessage) => {\n                if (newMessage) this.handleNewMessage(newMessage);\n            });\n        this.gameController\n            .observeGameUpdate()\n            .pipe(takeUntil(this.serviceDestroyed$))\n            .subscribe((newData) => this.handleGameUpdate(newData));\n\n        this.gameViewEventManagerService.subscribeToGameViewEvent('resetServices', this.serviceDestroyed$, () => this.resetServiceData());\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    async handleInitializeGame(initializeGameData: InitializeGameData | undefined): Promise<void> {\n        if (!initializeGameData) return;\n        await this.initializeGame(initializeGameData.localPlayerId, initializeGameData.startGameData);\n        this.gameViewEventManagerService.emitGameViewEvent('gameInitialized', initializeGameData);\n    }\n\n    isLocalPlayerPlaying(): boolean {\n        if (!this.playerContainer) return false;\n        return this.getPlayingPlayerId() === this.playerContainer.getLocalPlayerId();\n    }\n\n    getGameId(): string {\n        return this.gameId;\n    }\n\n    resetGameId(): void {\n        this.gameId = '';\n    }\n\n    getPlayerByNumber(playerNumber: number): Player | undefined {\n        if (!this.playerContainer) return undefined;\n        return this.playerContainer.getPlayer(playerNumber);\n    }\n\n    getLocalPlayer(): Player | undefined {\n        if (!this.playerContainer) return undefined;\n        return this.playerContainer.getLocalPlayer();\n    }\n\n    getLocalPlayerId(): string | undefined {\n        if (!this.playerContainer) return undefined;\n        return this.playerContainer.getLocalPlayerId();\n    }\n\n    getTotalNumberOfTilesLeft(): number {\n        if (!this.tileReserve) return 0;\n        return this.tileReserve.reduce((prev, { amount }) => prev + amount, 0);\n    }\n\n    getGameType(): GameType {\n        return this.gameType;\n    }\n\n    resetServiceData(): void {\n        this.tileReserve = [];\n        this.isGameOver = false;\n        this.gameId = '';\n        this.gameType = GameType.Classic;\n        this.playerContainer = undefined;\n        this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n    }\n\n    private getPlayingPlayerId(): string {\n        return this.roundManager.getActivePlayer().id;\n    }\n\n    private isLocalPlayerPlayer1(): boolean {\n        if (!this.playerContainer) return false;\n        return this.playerContainer.getLocalPlayerId() === this.playerContainer.getPlayer(1).id;\n    }\n\n    private async initializeGame(localPlayerId: string, startGameData: StartGameData): Promise<void> {\n        this.gameId = startGameData.gameId;\n        this.gameType = startGameData.gameType;\n        this.playerContainer = new PlayerContainer(localPlayerId).initializePlayers(startGameData.player1, startGameData.player2);\n        this.tileReserve = startGameData.tileReserve;\n        this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n\n        this.roundManager.initialize(localPlayerId, startGameData);\n        this.boardService.initializeBoard(startGameData.board);\n        this.objectiveManager.initialize(startGameData, this.isLocalPlayerPlayer1());\n\n        this.isGameSetUp = true;\n        this.isGameOver = false;\n\n        await this.handleReRouteOrReconnect(startGameData);\n    }\n\n    private async handleReRouteOrReconnect(startGameData: StartGameData): Promise<void> {\n        if (this.router.url !== '/game') {\n            this.roundManager.initializeEvents();\n            this.roundManager.startRound();\n            await this.router.navigateByUrl('game');\n        } else {\n            this.reconnectReinitialize(startGameData);\n        }\n    }\n\n    private handleGameUpdate(gameUpdateData: GameUpdateData): void {\n        if (gameUpdateData.isGameOver) {\n            this.handleGameOver(gameUpdateData.winners ?? []);\n        }\n        if (gameUpdateData.player1) {\n            this.handleUpdatePlayerData(gameUpdateData.player1);\n        }\n        if (gameUpdateData.player2) {\n            this.handleUpdatePlayerData(gameUpdateData.player2);\n        }\n        if (gameUpdateData.board) {\n            this.boardService.updateBoard(gameUpdateData.board);\n        }\n        if (gameUpdateData.round) {\n            const round: Round = this.roundManager.convertRoundDataToRound(gameUpdateData.round);\n            this.roundManager.updateRound(round);\n        }\n        if (gameUpdateData.tileReserve) {\n            this.handleTileReserveUpdate(gameUpdateData.tileReserve);\n        }\n        if (gameUpdateData.gameObjective) {\n            this.objectiveManager.updateObjectives(gameUpdateData.gameObjective);\n        }\n    }\n\n    private handleUpdatePlayerData(playerData: PlayerData): void {\n        if (this.playerContainer) {\n            this.playerContainer.updatePlayersData(playerData);\n        }\n        this.gameViewEventManagerService.emitGameViewEvent('tileRackUpdate', playerData.id);\n    }\n\n    private handleTileReserveUpdate(tileReserve: TileReserveData[]): void {\n        this.tileReserve = [...tileReserve];\n    }\n\n    private handleNewMessage(newMessage: Message): void {\n        this.gameViewEventManagerService.emitGameViewEvent('newMessage', newMessage);\n        if (newMessage.senderId === SYSTEM_ERROR_ID) {\n            this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n        }\n    }\n\n    private handleGameOver(winnerNames: string[]): void {\n        this.isGameOver = true;\n        this.roundManager.resetTimerData();\n        this.gameViewEventManagerService.emitGameViewEvent('endOfGame', winnerNames);\n    }\n\n    private reconnectReinitialize(startGameData: StartGameData): void {\n        if (this.playerContainer) {\n            this.playerContainer.updatePlayersData(startGameData.player1, startGameData.player2);\n        }\n        this.gameViewEventManagerService.emitGameViewEvent('reRender');\n        this.gameViewEventManagerService.emitGameViewEvent('tileRackUpdate', this.getLocalPlayerId());\n        this.boardService.updateBoard(([] as Square[]).concat(...startGameData.board));\n        this.roundManager.continueRound(this.roundManager.currentRound);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "roundManager",
                        "type": "RoundManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "objectiveManager",
                        "type": "ObjectivesManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameController",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "roundManager",
                        "type": "RoundManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "objectiveManager",
                        "type": "ObjectivesManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameController",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GameViewEventManagerService",
            "id": "injectable-GameViewEventManagerService-3f5e1a100e83a4fde309c76c6d6f194053fcd4df2969eb91b6fe05c4ca7c1bca82c9544fcbb4a5a42f774179641dc6b0eae087d663fc0fd59de3c13cd4f5b7f6",
            "file": "src/app/services/game-view-event-manager-service/game-view-event-manager.service.ts",
            "properties": [
                {
                    "name": "eventMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<EventTypes | Subject<any>>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emitGameViewEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "S",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T",
                        "S"
                    ],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "S",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGameViewEventValue",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "U",
                    "typeParameters": [
                        "T",
                        "S",
                        "U"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubjectFromMap",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Subject<S>",
                    "typeParameters": [
                        "T",
                        "S"
                    ],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToGameViewEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "payload",
                                    "type": "S",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [
                        "T",
                        "S"
                    ],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "payload",
                                    "type": "S",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { InitializeGameData } from '@app/classes/communication/game-config';\nimport { Message } from '@app/classes/communication/message';\nimport * as SERVICE_ERRORS from '@app/constants/services-errors';\nimport { BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { EventClass, EventTypes } from './event-types';\n@Injectable({\n    providedIn: 'root',\n})\nexport class GameViewEventManagerService {\n    /*\n     * We need an any here because the payload type of the different subjects\n     * could be anything. However, since we add the subjects to the map at its\n     * creation, and we assign the subject a payload type, we know that on\n     * use, the payload of the subject cannot actually be any, as it has to be the\n     * right type to fit the event name.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private eventMap: Map<keyof EventTypes, Subject<any>> = new Map();\n\n    constructor() {\n        this.eventMap.set('tileRackUpdate', new Subject<string>());\n        this.eventMap.set('noActiveGame', new Subject<void>());\n        this.eventMap.set('reRender', new Subject<void>());\n        this.eventMap.set('newMessage', new BehaviorSubject<Message | null>(null));\n        this.eventMap.set('usedTiles', new BehaviorSubject<PlaceActionPayload | undefined>(undefined));\n        this.eventMap.set('resetUsedTiles', new Subject<void>());\n        this.eventMap.set('gameInitialized', new BehaviorSubject<InitializeGameData | undefined>(undefined));\n        this.eventMap.set('resetServices', new Subject<void>());\n        this.eventMap.set('endOfGame', new Subject<string[]>());\n    }\n\n    emitGameViewEvent<T extends keyof EventTypes, S extends EventTypes[T]>(eventType: T, payload?: S): void {\n        this.getSubjectFromMap(eventType).next(payload);\n    }\n\n    subscribeToGameViewEvent<T extends keyof EventTypes, S extends EventTypes[T]>(\n        eventType: T,\n        destroy$: Observable<boolean>,\n        next: (payload: S) => void,\n    ): Subscription {\n        return this.getSubjectFromMap<T, S>(eventType).pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    getGameViewEventValue<T extends keyof EventTypes, S extends EventClass[T], U extends EventTypes[T]>(\n        eventType: S extends BehaviorSubject<U> ? T : never,\n    ): U {\n        const subject = this.eventMap.get(eventType);\n\n        if (subject instanceof BehaviorSubject) return subject.value;\n        if (!subject) throw new Error(SERVICE_ERRORS.NO_SUBJECT_FOR_EVENT);\n        throw new Error(SERVICE_ERRORS.IS_NOT_BEHAVIOR_OBJECT);\n    }\n\n    private getSubjectFromMap<T extends keyof EventTypes, S extends EventTypes[T]>(eventType: T): Subject<S> {\n        if (!this.eventMap.get(eventType)) {\n            throw new Error(SERVICE_ERRORS.NO_SUBJECT_FOR_EVENT);\n        }\n        return this.eventMap.get(eventType) as Subject<S>;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "type": "injectable"
        },
        {
            "name": "HighScoresController",
            "id": "injectable-HighScoresController-a6c08d02d482cb73d6fc4aa2664f45d4242edcf78092cb8341034e6475cb3b77e7215c81d570e6261b62f421419fb756a9cf9741fec1c6ef3ec7f3e3061b42fc",
            "file": "src/app/controllers/high-score-controller/high-score.controller.ts",
            "properties": [
                {
                    "name": "endpoint",
                    "defaultValue": "`${environment.serverUrl}/highScores`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "highScoresListEvent",
                    "defaultValue": "new Subject<HighScoreWithPlayers[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<HighScoreWithPlayers[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "socketService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocketService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "configureSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleGetHighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetHighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToHighScoresListEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "highScores",
                                    "type": "HighScoreWithPlayers[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "highScores",
                                    "type": "HighScoreWithPlayers[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport SocketService from '@app/services/socket-service/socket.service';\nimport { HighScoreWithPlayers } from '@common/models/high-score';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class HighScoresController {\n    private endpoint = `${environment.serverUrl}/highScores`;\n    private highScoresListEvent: Subject<HighScoreWithPlayers[]> = new Subject<HighScoreWithPlayers[]>();\n\n    constructor(private http: HttpClient, public socketService: SocketService) {\n        this.configureSocket();\n    }\n\n    handleGetHighScores(): void {\n        this.http.get(`${this.endpoint}/${this.socketService.getId()}`).subscribe();\n    }\n\n    resetHighScores(): void {\n        this.http.delete(this.endpoint).subscribe(() => this.handleGetHighScores());\n    }\n\n    subscribeToHighScoresListEvent(serviceDestroyed$: Subject<boolean>, callback: (highScores: HighScoreWithPlayers[]) => void): void {\n        this.highScoresListEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    private configureSocket(): void {\n        this.socketService.on('highScoresList', (highScores: HighScoreWithPlayers[]) => {\n            this.highScoresListEvent.next(highScores);\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HighScoresService",
            "id": "injectable-HighScoresService-fd757d4115093d5c03322ff33753748e0297d77d2548a3d824faeb2830fe87ed3599b6142ee87267a60319e86bd405b3192c6f3d24b04a714fdcbaccc4fe3735",
            "file": "src/app/services/high-score-service/high-score.service.ts",
            "properties": [
                {
                    "name": "highScoresListInitializedEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "highScoresMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<GameType | SingleHighScore[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getHighScores",
                    "args": [
                        {
                            "name": "gameType",
                            "type": "GameType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SingleHighScore[]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameType",
                            "type": "GameType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleHighScoresRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rankHighScores",
                    "args": [
                        {
                            "name": "highScores",
                            "type": "NoId<HighScoreWithPlayers>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SingleHighScore[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "highScores",
                            "type": "NoId<HighScoreWithPlayers>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetHighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "separateHighScoresType",
                    "args": [
                        {
                            "name": "highScores",
                            "type": "NoId<HighScoreWithPlayers>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "highScores",
                            "type": "NoId<HighScoreWithPlayers>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToInitializedHighScoresListEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateHighScores",
                    "args": [
                        {
                            "name": "highScores",
                            "type": "NoId<HighScoreWithPlayers>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "highScores",
                            "type": "NoId<HighScoreWithPlayers>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { GameType } from '@app/constants/game-type';\nimport { HighScoresController } from '@app/controllers/high-score-controller/high-score.controller';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { HighScoreWithPlayers, SingleHighScore } from '@common/models/high-score';\nimport { NoId } from '@common/types/no-id';\n@Injectable({\n    providedIn: 'root',\n})\nexport default class HighScoresService {\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n    private highScoresListInitializedEvent: Subject<void> = new Subject();\n    private highScoresMap: Map<GameType, SingleHighScore[]> = new Map();\n\n    constructor(private highScoresController: HighScoresController) {\n        this.highScoresController.subscribeToHighScoresListEvent(this.serviceDestroyed$, (highScores: HighScoreWithPlayers[]) => {\n            this.updateHighScores(highScores);\n            this.highScoresListInitializedEvent.next();\n        });\n    }\n\n    handleHighScoresRequest(): void {\n        this.highScoresController.handleGetHighScores();\n    }\n\n    subscribeToInitializedHighScoresListEvent(componentDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.highScoresListInitializedEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    getHighScores(gameType: GameType): SingleHighScore[] {\n        const highScores = this.highScoresMap.get(gameType);\n        return highScores ? highScores : [];\n    }\n\n    resetHighScores(): void {\n        this.highScoresController.resetHighScores();\n    }\n\n    private updateHighScores(highScores: NoId<HighScoreWithPlayers>[]): void {\n        const [classicHighScores, log2990HighScores] = this.separateHighScoresType(highScores);\n        this.highScoresMap.set(GameType.Classic, this.rankHighScores(classicHighScores));\n        this.highScoresMap.set(GameType.LOG2990, this.rankHighScores(log2990HighScores));\n    }\n\n    private separateHighScoresType(highScores: NoId<HighScoreWithPlayers>[]): [NoId<HighScoreWithPlayers>[], NoId<HighScoreWithPlayers>[]] {\n        const classicHighScores: NoId<HighScoreWithPlayers>[] = [];\n        const log2990HighScores: NoId<HighScoreWithPlayers>[] = [];\n\n        highScores.forEach((highScore) => {\n            if (highScore.gameType === GameType.Classic) classicHighScores.push(highScore);\n            else log2990HighScores.push(highScore);\n        });\n\n        return [classicHighScores, log2990HighScores];\n    }\n\n    private rankHighScores(highScores: NoId<HighScoreWithPlayers>[]): SingleHighScore[] {\n        const singleHighScores: SingleHighScore[] = [];\n        let rank = 1;\n        highScores = highScores.sort((previous, current) => current.score - previous.score);\n        highScores.forEach((highScore) => {\n            let isFirst = true;\n            for (const name of highScore.names) {\n                if (isFirst) {\n                    singleHighScores.push({ ...highScore, name, rank: rank++ });\n                    isFirst = false;\n                } else {\n                    singleHighScores.push({ ...highScore, name });\n                }\n            }\n        });\n        return singleHighScores;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "highScoresController",
                        "type": "HighScoresController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "highScoresController",
                        "type": "HighScoresController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "InitializerService",
            "id": "injectable-InitializerService-9ca6d0d1d194c92dd37f1aef86be639468dba77a68103c93d44749cc9e96777688a96f2033a5a99d3688348f2e40e7f87f8977cb60d635de60ad8857d07f1773",
            "file": "src/app/services/initializer-service/initializer.service.ts",
            "properties": [
                {
                    "name": "destroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<InitializeState>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canSwitchToReadyFromDatabaseUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleDatabaseUpdate",
                    "args": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSocketUpdate",
                    "args": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isStateError",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "InitializeState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "InitializeState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport SocketService from '@app/services/socket-service/socket.service';\nimport { BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DatabaseService } from '@app/services/database-service/database.service';\nimport { ConnectionState, InitializeState } from '@app/classes/connection-state-service/connection-state';\nimport { DEFAULT_STATE_VALUE } from '@app/constants/services-errors';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class InitializerService implements OnDestroy {\n    private state$: BehaviorSubject<InitializeState>;\n    private destroyed$: Subject<boolean>;\n\n    constructor(private readonly socketService: SocketService, private readonly databaseService: DatabaseService) {\n        this.state$ = new BehaviorSubject(DEFAULT_STATE_VALUE);\n        this.destroyed$ = new Subject();\n\n        this.socketService.subscribe(this.destroyed$, (state) => this.handleSocketUpdate(state));\n        this.databaseService.subscribe(this.destroyed$, (state) => this.handleDatabaseUpdate(state));\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n\n    initialize(): void {\n        this.socketService.initializeService();\n    }\n\n    subscribe(destroy$: Observable<boolean>, next: (state: InitializeState) => void): Subscription {\n        return this.state$.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    private isStateError(): boolean {\n        return [InitializeState.DatabaseNotReachable, InitializeState.ServerNotReachable].includes(this.state$.value);\n    }\n\n    private handleSocketUpdate(state: ConnectionState): void {\n        switch (state) {\n            case ConnectionState.Connected:\n                if (this.state$.value !== InitializeState.Ready) {\n                    this.state$.next(InitializeState.Loading);\n                    this.databaseService.checkDatabase();\n                }\n                break;\n            case ConnectionState.Error:\n                this.state$.next(InitializeState.ServerNotReachable);\n                break;\n        }\n    }\n\n    private handleDatabaseUpdate(state: ConnectionState): void {\n        switch (state) {\n            case ConnectionState.Connected:\n                if (this.canSwitchToReadyFromDatabaseUpdate()) this.state$.next(InitializeState.Ready);\n                break;\n            case ConnectionState.Error:\n                if (!this.isStateError()) this.state$.next(InitializeState.DatabaseNotReachable);\n                break;\n        }\n    }\n\n    private canSwitchToReadyFromDatabaseUpdate(): boolean {\n        return this.state$.value !== InitializeState.Ready && this.state$.value !== InitializeState.ServerNotReachable;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "databaseService",
                        "type": "DatabaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "InputParserService",
            "id": "injectable-InputParserService-eaaac2e2915c8b8ba6b5b6a75f553ba756556c0089c3274d2faac6ad6b0711a0e7ddb7e60d66ed9e4a7f8e6b4bae127e99db006671bd4c4856df864a143eb668",
            "file": "src/app/services/input-parser-service/input-parser.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createActionData",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionData",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createExchangeActionPayload",
                    "args": [
                        {
                            "name": "lettersToExchange",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExchangeActionPayload",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "lettersToExchange",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLocation",
                    "args": [
                        {
                            "name": "locationString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nLettersToPlace",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Location",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "locationString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nLettersToPlace",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPlaceActionPayload",
                    "args": [
                        {
                            "name": "locationString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lettersToPlace",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PlaceActionPayload",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "locationString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lettersToPlace",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillParsedTiles",
                    "args": [
                        {
                            "name": "lettersToParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerTiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionType",
                            "type": "ActionType.PLACE | ActionType.EXCHANGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Tile[]",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "lettersToParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerTiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionType",
                            "type": "ActionType.PLACE | ActionType.EXCHANGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "Player",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getRowNumberFromChar",
                    "args": [
                        {
                            "name": "char",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "char",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartPosition",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Position",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCommand",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAction",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isKnownCommand",
                    "args": [
                        {
                            "name": "actionName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPositionWithinBounds",
                    "args": [
                        {
                            "name": "position",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidBlankTileCombination",
                    "args": [
                        {
                            "name": "playerLetter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "placeLetter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "playerLetter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeLetter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseLettersToTiles",
                    "args": [
                        {
                            "name": "lettersToParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionType",
                            "type": "ActionType.PLACE | ActionType.EXCHANGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Tile[]",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "lettersToParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionType",
                            "type": "ActionType.PLACE | ActionType.EXCHANGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "separateCommandWords",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyActionValidity",
                    "args": [
                        {
                            "name": "actionName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActionData, ActionType, ACTION_COMMAND_INDICATOR, ExchangeActionPayload, PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { Location } from '@app/classes/actions/location';\nimport { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Player } from '@app/classes/player';\nimport { LetterValue, Tile } from '@app/classes/tile';\nimport { BAD_SYNTAX_MESSAGES, CommandExceptionMessages } from '@app/constants/command-exception-messages';\nimport {\n    BLANK_TILE_LETTER_VALUE,\n    BOARD_SIZE,\n    DEFAULT_ORIENTATION,\n    EXPECTED_COMMAND_WORD_COUNT,\n    LETTER_VALUES,\n    ON_YOUR_TURN_ACTIONS,\n    SYSTEM_ERROR_ID,\n} from '@app/constants/game-constants';\nimport { ACTIVE_PLAYER_NOT_FOUND } from '@app/constants/services-errors';\nimport { GamePlayController } from '@app/controllers/game-play-controller/game-play.controller';\nimport { GameService } from '@app/services';\nimport { ActionService } from '@app/services/action-service/action.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport CommandException from '@app/services/input-parser-service/command-exception';\nimport { isNumber } from '@app/utils/isNumber/is-number';\nimport { removeAccents } from '@app/utils/remove-accents/remove-accents';\n\nconst ASCII_VALUE_OF_LOWERCASE_A = 97;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport default class InputParserService {\n    constructor(\n        private controller: GamePlayController,\n        private gameService: GameService,\n        private gameViewEventManagerService: GameViewEventManagerService,\n        private actionService: ActionService,\n    ) {}\n\n    handleInput(input: string): void {\n        const playerId = this.getLocalPlayer().id;\n        const gameId = this.gameService.getGameId();\n\n        if (this.isAction(input)) {\n            this.handleCommand(input, gameId, playerId);\n        } else {\n            this.controller.sendMessage(gameId, playerId, {\n                content: input,\n                senderId: playerId,\n                gameId,\n            });\n        }\n    }\n\n    private handleCommand(input: string, gameId: string, playerId: string): void {\n        try {\n            this.actionService.sendAction(gameId, playerId, this.createActionData(input));\n        } catch (exception) {\n            if (!(exception instanceof CommandException)) return;\n            const errorMessageContent =\n                exception.message === CommandExceptionMessages.NotYourTurn\n                    ? exception.message\n                    : `La commande **${input}** est invalide :<br />${exception.message}`;\n\n            this.controller.sendError(gameId, playerId, {\n                content: errorMessageContent,\n                senderId: SYSTEM_ERROR_ID,\n                gameId,\n            });\n        }\n    }\n\n    private createActionData(input: string): ActionData {\n        const inputWords: string[] = this.separateCommandWords(input);\n        const actionType: string = inputWords[0];\n\n        this.verifyActionValidity(actionType);\n        if (inputWords.length !== EXPECTED_COMMAND_WORD_COUNT.get(actionType as ActionType)) {\n            throw new CommandException(BAD_SYNTAX_MESSAGES.get(actionType as ActionType) ?? CommandExceptionMessages.BadSyntax);\n        }\n\n        switch (actionType) {\n            case ActionType.PLACE:\n                return this.actionService.createActionData(actionType, this.createPlaceActionPayload(inputWords[1], inputWords[2]), input);\n            case ActionType.EXCHANGE:\n                return this.actionService.createActionData(actionType, this.createExchangeActionPayload(inputWords[1]), input);\n            case ActionType.PASS:\n            case ActionType.RESERVE:\n            case ActionType.HINT:\n            case ActionType.HELP:\n                return this.actionService.createActionData(actionType, {}, input);\n            default:\n                throw new CommandException(CommandExceptionMessages.InvalidEntry);\n        }\n    }\n\n    private createLocation(locationString: string, nLettersToPlace: number): Location {\n        const locationLastChar = locationString.charAt(locationString.length - 1);\n        const rowNumber: number = this.getRowNumberFromChar(locationString[0]);\n        const colNumber = parseInt(locationString.substring(1), 10) - 1;\n        let orientation: Orientation;\n\n        if (isNumber(locationLastChar)) {\n            if (nLettersToPlace !== 1) throw new CommandException(BAD_SYNTAX_MESSAGES.get(ActionType.PLACE) ?? CommandExceptionMessages.BadSyntax);\n            orientation = DEFAULT_ORIENTATION;\n        } else {\n            if (locationLastChar === 'h') orientation = Orientation.Horizontal;\n            else if (locationLastChar === 'v') orientation = Orientation.Vertical;\n            else throw new CommandException(CommandExceptionMessages.BadSyntax);\n        }\n\n        return {\n            row: rowNumber,\n            col: colNumber,\n            orientation,\n        };\n    }\n\n    private createPlaceActionPayload(locationString: string, lettersToPlace: string): PlaceActionPayload {\n        const location: Location = this.createLocation(locationString, lettersToPlace.length);\n\n        const placeActionPayload: PlaceActionPayload = this.actionService.createPlaceActionPayload(\n            this.parseLettersToTiles(removeAccents(lettersToPlace), ActionType.PLACE),\n            this.getStartPosition(location),\n            location.orientation,\n        );\n\n        this.gameViewEventManagerService.emitGameViewEvent('usedTiles', placeActionPayload);\n        return placeActionPayload;\n    }\n\n    private createExchangeActionPayload(lettersToExchange: string): ExchangeActionPayload {\n        return this.actionService.createExchangeActionPayload(this.parseLettersToTiles(removeAccents(lettersToExchange), ActionType.EXCHANGE));\n    }\n\n    private parseLettersToTiles(lettersToParse: string, actionType: ActionType.PLACE | ActionType.EXCHANGE): Tile[] {\n        if (actionType === ActionType.EXCHANGE && lettersToParse !== lettersToParse.toLowerCase()) {\n            throw new CommandException(CommandExceptionMessages.ExchangeRequireLowercaseLetters);\n        }\n\n        const player: Player = this.getLocalPlayer();\n        const playerTiles: Tile[] = [];\n        player.getTiles().forEach((tile: Tile) => {\n            playerTiles.push(new Tile(tile.letter, tile.value));\n        });\n\n        const parsedTiles: Tile[] = this.fillParsedTiles(lettersToParse, playerTiles, actionType);\n\n        if (parsedTiles.length !== lettersToParse.length) throw new CommandException(CommandExceptionMessages.DontHaveTiles);\n\n        return parsedTiles;\n    }\n\n    private fillParsedTiles(lettersToParse: string, playerTiles: Tile[], actionType: ActionType.PLACE | ActionType.EXCHANGE): Tile[] {\n        const parsedTiles: Tile[] = [];\n\n        for (const letter of lettersToParse) {\n            for (let i = Object.values(playerTiles).length - 1; i >= 0; i--) {\n                if (playerTiles[i].letter.toLowerCase() === letter) {\n                    parsedTiles.push(playerTiles.splice(i, 1)[0]);\n                    break;\n                } else if (actionType === ActionType.PLACE && this.isValidBlankTileCombination(playerTiles[i].letter, letter)) {\n                    const tile: Tile = playerTiles.splice(i, 1)[0];\n                    const newTile = new Tile(tile.letter, tile.value, true);\n                    newTile.playedLetter = letter as LetterValue;\n                    parsedTiles.push(newTile);\n                    break;\n                }\n            }\n        }\n\n        return parsedTiles;\n    }\n\n    private isValidBlankTileCombination(playerLetter: string, placeLetter: string): boolean {\n        return (\n            playerLetter === BLANK_TILE_LETTER_VALUE &&\n            LETTER_VALUES.includes(placeLetter as LetterValue) &&\n            placeLetter === placeLetter.toUpperCase()\n        );\n    }\n\n    private isPositionWithinBounds(position: Position): boolean {\n        return position.row >= 0 && position.column >= 0 && position.row < BOARD_SIZE && position.column < BOARD_SIZE;\n    }\n\n    private isAction(input: string): boolean {\n        return input[0] === ACTION_COMMAND_INDICATOR;\n    }\n\n    private separateCommandWords(input: string): string[] {\n        return input.substring(1).split(' ');\n    }\n\n    private verifyActionValidity(actionName: string): void {\n        if (!this.isKnownCommand(actionName)) throw new CommandException(CommandExceptionMessages.InvalidEntry);\n        if (this.gameService.isGameOver) throw new CommandException(CommandExceptionMessages.GameOver);\n        if (!this.gameService.isLocalPlayerPlaying() && ON_YOUR_TURN_ACTIONS.includes(actionName as ActionType))\n            throw new CommandException(CommandExceptionMessages.NotYourTurn);\n    }\n\n    private isKnownCommand(actionName: string): boolean {\n        return Object.values(ActionType).includes(actionName as ActionType);\n    }\n\n    private getStartPosition(location: Location): Position {\n        const inputStartPosition: Position = {\n            row: location.row,\n            column: location.col,\n        };\n\n        if (!this.isPositionWithinBounds(inputStartPosition)) throw new CommandException(CommandExceptionMessages.PositionFormat);\n        return inputStartPosition;\n    }\n\n    private getLocalPlayer(): Player {\n        const localPlayer: Player | undefined = this.gameService.getLocalPlayer();\n        if (localPlayer) {\n            return localPlayer;\n        }\n        throw new Error(ACTIVE_PLAYER_NOT_FOUND);\n    }\n\n    private getRowNumberFromChar(char: string): number {\n        return char.charCodeAt(0) - ASCII_VALUE_OF_LOWERCASE_A;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controller",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "controller",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MessageStorageService",
            "id": "injectable-MessageStorageService-1058f02629862cacd2b5ed7f7ae8335acae391e7263b22bb15d8df86fa5187def77a467a7ef9c951ea50711a0962fc57019009a307d5db7e58e1ea5402ad2b17",
            "file": "src/app/services/message-storage-service/message-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "Message[]",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveMessage",
                    "args": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Message } from '@app/classes/communication/message';\nimport { MESSAGE_STORAGE_KEY } from '@app/constants/session-storage-constants';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class MessageStorageService {\n    constructor() {\n        this.initializeMessages();\n    }\n\n    initializeMessages(): void {\n        if (!window.sessionStorage.getItem(MESSAGE_STORAGE_KEY)) window.sessionStorage.setItem(MESSAGE_STORAGE_KEY, JSON.stringify([]));\n    }\n\n    getMessages(): Message[] {\n        const localMessages = window.sessionStorage.getItem(MESSAGE_STORAGE_KEY);\n        return localMessages ? JSON.parse(localMessages) : [];\n    }\n\n    saveMessage(newMessage: Message): void {\n        const localMessages: Message[] = this.getMessages();\n        localMessages.push(newMessage);\n        window.sessionStorage.setItem(MESSAGE_STORAGE_KEY, JSON.stringify(localMessages));\n    }\n\n    resetMessages(): void {\n        window.sessionStorage.clear();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ObjectivesManagerService",
            "id": "injectable-ObjectivesManagerService-f54e759fb3480f0e81a1d486dfcec3a68c2a30ef35cce4a1f0bf9c040e064c93a90ad5f02cdfca93326f1d387e1910a656557cb5ae0d490ff3c2adc3e8eceb5a",
            "file": "src/app/services/objectives-manager-service/objectives-manager.service.ts",
            "properties": [
                {
                    "name": "isLocalPlayerPlayer1",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "objectives",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameObjectivesData",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getObjectives",
                    "args": [
                        {
                            "name": "requestingPlayerIsPlayer1",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectiveData[]",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "requestingPlayerIsPlayer1",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOpponentPrivateObjectiveIfCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "ObjectiveData[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPrivateObjectives",
                    "args": [],
                    "optional": false,
                    "returnType": "ObjectiveData[]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPublicObjectives",
                    "args": [],
                    "optional": false,
                    "returnType": "ObjectiveData[]",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isLocalPlayerPlayer1",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isLocalPlayerPlayer1",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPrivateObjectiveCompletedByOpponent",
                    "args": [
                        {
                            "name": "objective",
                            "type": "ObjectiveData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "objective",
                            "type": "ObjectiveData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetServiceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateObjectives",
                    "args": [
                        {
                            "name": "objectives",
                            "type": "GameObjectivesData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "objectives",
                            "type": "GameObjectivesData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { StartGameData } from '@app/classes/communication/game-config';\nimport { GameObjectivesData } from '@app/classes/communication/game-objectives-data';\nimport { ObjectiveData } from '@app/classes/communication/objective-data';\nimport { ObjectiveState } from '@app/classes/objectives/objective-state';\nimport { IResetServiceData } from '@app/utils/i-reset-service-data/i-reset-service-data';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ObjectivesManagerService implements IResetServiceData {\n    private objectives?: GameObjectivesData;\n    private isLocalPlayerPlayer1: boolean = false;\n\n    initialize(startGameData: StartGameData, isLocalPlayerPlayer1: boolean): void {\n        this.objectives = {\n            player1Objectives: startGameData.player1.objectives,\n            player2Objectives: startGameData.player2.objectives,\n        };\n        this.isLocalPlayerPlayer1 = isLocalPlayerPlayer1;\n    }\n\n    updateObjectives(objectives: GameObjectivesData): void {\n        this.objectives = objectives;\n    }\n\n    getPublicObjectives(): ObjectiveData[] {\n        return this.getObjectives(this.isLocalPlayerPlayer1).filter((objective) => objective.isPublic);\n    }\n\n    getPrivateObjectives(): ObjectiveData[] {\n        return this.getObjectives(this.isLocalPlayerPlayer1)\n            .filter((objective) => !objective.isPublic)\n            .concat(this.getOpponentPrivateObjectiveIfCompleted());\n    }\n\n    resetServiceData(): void {\n        this.objectives = undefined;\n    }\n\n    private getObjectives(requestingPlayerIsPlayer1: boolean): ObjectiveData[] {\n        return (requestingPlayerIsPlayer1 ? this.objectives?.player1Objectives : this.objectives?.player2Objectives) || [];\n    }\n\n    private getOpponentPrivateObjectiveIfCompleted(): ObjectiveData[] {\n        const opponentPrivateObjectives: ObjectiveData[] = this.getObjectives(!this.isLocalPlayerPlayer1).filter((objective: ObjectiveData) =>\n            this.isPrivateObjectiveCompletedByOpponent(objective),\n        );\n        opponentPrivateObjectives.forEach((objective: ObjectiveData) => (objective.state = ObjectiveState.CompletedByOpponent));\n        return opponentPrivateObjectives;\n    }\n\n    private isPrivateObjectiveCompletedByOpponent(objective: ObjectiveData): boolean {\n        return !objective.isPublic && objective.state !== ObjectiveState.NotCompleted;\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PlayerLeavesController",
            "id": "injectable-PlayerLeavesController-0aba7c0df93deca18c736598c69656feca23b5c34eef54a5cc5e4ff3b63fad6a15a3d4e5dfdd218599bda2fd085c77b226998b0e8ba99f47414ebe1c249a88b2",
            "file": "src/app/controllers/player-leave-controller/player-leave.controller.ts",
            "properties": [
                {
                    "name": "joinerLeavesGameEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resetGameEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<string>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "socketService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocketService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "configureSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleLeaveGame",
                    "args": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gameId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToJoinerLeavesGameEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "leaverName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "leaverName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToResetGameEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable, OnDestroy } from '@angular/core';\nimport { PlayerName } from '@app/classes/communication/';\nimport SocketService from '@app/services/socket-service/socket.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlayerLeavesController implements OnDestroy {\n    private joinerLeavesGameEvent: EventEmitter<string> = new EventEmitter();\n    private resetGameEvent: EventEmitter<string> = new EventEmitter();\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(private http: HttpClient, public socketService: SocketService) {\n        this.configureSocket();\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    handleLeaveGame(gameId: string): void {\n        const endpoint = `${environment.serverUrl}/games/${gameId}/players/${this.socketService.getId()}/leave`;\n        this.http.delete(endpoint).subscribe();\n    }\n\n    subscribeToJoinerLeavesGameEvent(serviceDestroyed$: Subject<boolean>, callback: (leaverName: string) => void): void {\n        this.joinerLeavesGameEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToResetGameEvent(serviceDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.resetGameEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    private configureSocket(): void {\n        this.socketService.on('joinerLeaveGame', (opponent: PlayerName) => {\n            this.joinerLeavesGameEvent.emit(opponent.name);\n        });\n\n        this.socketService.on('cleanup', () => {\n            this.resetGameEvent.emit();\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PlayerLeavesService",
            "id": "injectable-PlayerLeavesService-b6199c77bc0b815ab56a694eb9c2add77b4ddc177fee1f7aeab034d25a22839e7e2fe87f950a26dae793fb489153aeff924fbed1620c4bd1de281c1ee0a0cd1a",
            "file": "src/app/services/player-leave-service/player-leave.service.ts",
            "properties": [
                {
                    "name": "joinerLeavesGameEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleJoinerLeaveGame",
                    "args": [
                        {
                            "name": "leaverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "leaverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleLeaveLobby",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleLocalPlayerLeavesGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToJoinerLeavesGameEvent",
                    "args": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "leaverName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "leaverName",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { PlayerLeavesController } from '@app/controllers/player-leave-controller/player-leave.controller';\nimport { GameService } from '@app/services/';\nimport GameDispatcherService from '@app/services/game-dispatcher-service/game-dispatcher.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlayerLeavesService implements OnDestroy {\n    private joinerLeavesGameEvent: Subject<string> = new Subject();\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(\n        private readonly playerLeavesController: PlayerLeavesController,\n        private readonly gameDispatcherService: GameDispatcherService,\n        private readonly gameService: GameService,\n        private readonly gameViewEventManager: GameViewEventManagerService,\n    ) {\n        this.playerLeavesController.subscribeToJoinerLeavesGameEvent(this.serviceDestroyed$, (leaverName: string) =>\n            this.handleJoinerLeaveGame(leaverName),\n        );\n        this.playerLeavesController.subscribeToResetGameEvent(this.serviceDestroyed$, () => {\n            this.gameViewEventManager.emitGameViewEvent('resetServices');\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    handleLocalPlayerLeavesGame(): void {\n        this.playerLeavesController.handleLeaveGame(this.gameService.getGameId());\n        this.gameService.resetGameId();\n        this.gameViewEventManager.emitGameViewEvent('newMessage', null);\n    }\n\n    handleLeaveLobby(): void {\n        const gameId = this.gameDispatcherService.getCurrentLobbyId();\n        if (gameId) this.playerLeavesController.handleLeaveGame(gameId);\n        this.gameDispatcherService.resetServiceData();\n    }\n\n    subscribeToJoinerLeavesGameEvent(componentDestroyed$: Subject<boolean>, callback: (leaverName: string) => void): void {\n        this.joinerLeavesGameEvent.pipe(takeUntil(componentDestroyed$)).subscribe(callback);\n    }\n\n    private handleJoinerLeaveGame(leaverName: string): void {\n        this.joinerLeavesGameEvent.next(leaverName);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "playerLeavesController",
                        "type": "PlayerLeavesController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManager",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "playerLeavesController",
                        "type": "PlayerLeavesController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManager",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReconnectionService",
            "id": "injectable-ReconnectionService-323c1cafd53baf2e736d2da532456cab40bc4e6ee05aa0f4d671d2cb95f91fada6974b47484a7273d0e80652ea3a1ae66def0698d73291eea28875653f96e7c3",
            "file": "src/app/services/reconnection-service/reconnection.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "disconnectGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isGameIdCookieAbsent",
                    "args": [
                        {
                            "name": "gameIdCookie",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameIdCookie",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reconnectGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { GAME_ID_COOKIE, SOCKET_ID_COOKIE, TIME_TO_RECONNECT } from '@app/constants/game-constants';\nimport { NO_LOCAL_PLAYER } from '@app/constants/services-errors';\nimport { GamePlayController } from '@app/controllers/game-play-controller/game-play.controller';\nimport { CookieService } from '@app/services/cookie-service/cookie.service';\nimport GameService from '@app/services/game-service/game.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport SocketService from '@app/services/socket-service/socket.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ReconnectionService {\n    constructor(\n        private readonly gamePlayController: GamePlayController,\n        private readonly gameService: GameService,\n        private readonly cookieService: CookieService,\n        private readonly socketService: SocketService,\n        private readonly gameViewEventManagerService: GameViewEventManagerService,\n    ) {}\n\n    reconnectGame(): void {\n        const gameIdCookie: string = this.cookieService.getCookie(GAME_ID_COOKIE);\n        const socketIdCookie: string = this.cookieService.getCookie(SOCKET_ID_COOKIE);\n\n        if (this.isGameIdCookieAbsent(gameIdCookie)) {\n            this.gameViewEventManagerService.emitGameViewEvent('noActiveGame');\n            return;\n        }\n        this.cookieService.eraseCookie(GAME_ID_COOKIE);\n        this.cookieService.eraseCookie(SOCKET_ID_COOKIE);\n\n        this.gamePlayController.handleReconnection(gameIdCookie, socketIdCookie, this.socketService.getId());\n    }\n\n    disconnectGame(): void {\n        const gameId = this.gameService.getGameId();\n        const localPlayerId = this.gameService.getLocalPlayerId();\n        this.gameService.resetServiceData();\n\n        if (!localPlayerId) throw new Error(NO_LOCAL_PLAYER);\n        this.cookieService.setCookie(GAME_ID_COOKIE, gameId, TIME_TO_RECONNECT);\n        this.cookieService.setCookie(SOCKET_ID_COOKIE, localPlayerId, TIME_TO_RECONNECT);\n        this.gamePlayController.handleDisconnection(gameId, localPlayerId);\n    }\n\n    private isGameIdCookieAbsent(gameIdCookie: string): boolean {\n        return gameIdCookie === '' && gameIdCookie.length <= 0;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gamePlayController",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "gamePlayController",
                        "type": "GamePlayController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socketService",
                        "type": "SocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RoundManagerService",
            "id": "injectable-RoundManagerService-c8a1708e89858ad3da0c7be913758f5dcd7af79079f13d81ad1b231d79b2608f99eb8941cd77aa3e0026dcb671fb6a1594ce66156afae81280dbf5c8cdc0496c",
            "file": "src/app/services/round-manager-service/round-manager.service.ts",
            "properties": [
                {
                    "name": "completedRounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Round[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentRound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Round",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "endRoundEvent$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "localPlayerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "maxRoundTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "timerSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "continueRound",
                    "args": [
                        {
                            "name": "round",
                            "type": "Round",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "round",
                            "type": "Round",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertRoundDataToRound",
                    "args": [
                        {
                            "name": "roundData",
                            "type": "RoundData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Round",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roundData",
                            "type": "RoundData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActivePlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "Player",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "localPlayerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "localPlayerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startGameData",
                            "type": "StartGameData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActivePlayerLocalPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetRoundData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resetServiceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetTimerData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "roundTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "startRound",
                    "args": [
                        {
                            "name": "roundTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roundTime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startTimer",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToEndRoundEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timeLeft",
                    "args": [
                        {
                            "name": "limitTime",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "limitTime",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRound",
                    "args": [
                        {
                            "name": "round",
                            "type": "Round",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "round",
                            "type": "Round",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ActionType } from '@app/classes/actions/action-data';\nimport { StartGameData } from '@app/classes/communication/game-config';\nimport { RoundData } from '@app/classes/communication/round-data';\nimport { Player } from '@app/classes/player';\nimport { Round } from '@app/classes/round/round';\nimport { Timer } from '@app/classes/round/timer';\nimport { DEFAULT_PLAYER, MINIMUM_TIMER_TIME, SECONDS_TO_MILLISECONDS } from '@app/constants/game-constants';\nimport { INVALID_ROUND_DATA_PLAYER, NO_CURRENT_ROUND } from '@app/constants/services-errors';\nimport { ActionService } from '@app/services/action-service/action.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { IResetServiceData } from '@app/utils/i-reset-service-data/i-reset-service-data';\nimport { BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport default class RoundManagerService implements IResetServiceData, OnDestroy {\n    currentRound: Round;\n    timer: Observable<[timer: Timer, activePlayer: Player]>;\n\n    private gameId: string;\n    private localPlayerId: string;\n    private completedRounds: Round[];\n    private maxRoundTime: number;\n    private endRoundEvent$: Subject<void>;\n    private timerSource: BehaviorSubject<[timer: Timer, activePlayer: Player]>;\n    private timeout: ReturnType<typeof setTimeout>;\n    private serviceDestroyed$: Subject<boolean>;\n\n    constructor(\n        private router: Router,\n        private readonly actionService: ActionService,\n        private readonly gameViewEventManagerService: GameViewEventManagerService,\n    ) {\n        this.serviceDestroyed$ = new Subject();\n        this.initializeEvents();\n        this.gameViewEventManagerService.subscribeToGameViewEvent('resetServices', this.serviceDestroyed$, () => this.resetServiceData());\n    }\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    subscribeToEndRoundEvent(destroy$: Observable<boolean>, next: () => void): Subscription {\n        return this.endRoundEvent$.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    initialize(localPlayerId: string, startGameData: StartGameData): void {\n        this.gameId = startGameData.gameId;\n        this.localPlayerId = localPlayerId;\n        this.maxRoundTime = startGameData.maxRoundTime;\n        this.currentRound = this.convertRoundDataToRound(startGameData.round);\n    }\n\n    initializeEvents(): void {\n        this.completedRounds = [];\n        this.timerSource = new BehaviorSubject<[timer: Timer, activePlayer: Player]>([new Timer(0, 0), DEFAULT_PLAYER]);\n        this.timer = this.timerSource.asObservable();\n        this.endRoundEvent$ = new Subject();\n    }\n\n    convertRoundDataToRound(roundData: RoundData): Round {\n        if (roundData.playerData.id && roundData.playerData.name && roundData.playerData.tiles) {\n            return {\n                player: new Player(roundData.playerData.id, roundData.playerData.name, roundData.playerData.tiles),\n                startTime: roundData.startTime,\n                limitTime: roundData.limitTime,\n                completedTime: roundData.completedTime,\n            };\n        }\n        throw Error(INVALID_ROUND_DATA_PLAYER);\n    }\n\n    resetServiceData(): void {\n        this.gameId = '';\n        this.localPlayerId = '';\n        this.resetRoundData();\n        this.resetTimerData();\n        this.endRoundEvent$ = new Subject();\n    }\n\n    resetTimerData(): void {\n        clearTimeout(this.timeout);\n        this.timerSource.complete();\n        this.endRoundEvent$.next();\n    }\n\n    updateRound(round: Round): void {\n        this.currentRound.completedTime = round.startTime;\n        this.completedRounds.push(this.currentRound);\n        this.currentRound = round;\n        this.endRoundEvent$.next();\n        this.startRound();\n    }\n\n    continueRound(round: Round): void {\n        this.currentRound = round;\n        this.endRoundEvent$.next();\n        this.startRound(this.timeLeft(round.limitTime));\n    }\n\n    getActivePlayer(): Player {\n        if (!this.currentRound) {\n            throw new Error(NO_CURRENT_ROUND);\n        }\n        return this.currentRound.player;\n    }\n\n    startRound(roundTime?: number): void {\n        clearTimeout(this.timeout);\n        roundTime = roundTime ? roundTime : this.maxRoundTime;\n        this.timeout = setTimeout(() => this.roundTimeout(), roundTime * SECONDS_TO_MILLISECONDS);\n        this.startTimer(roundTime);\n    }\n\n    private resetRoundData(): void {\n        this.currentRound = null as unknown as Round;\n        this.completedRounds = [];\n        this.maxRoundTime = 0;\n    }\n\n    private timeLeft(limitTime: Date): number {\n        return Math.max((new Date(limitTime).getTime() - new Date(Date.now()).getTime()) / SECONDS_TO_MILLISECONDS, MINIMUM_TIMER_TIME);\n    }\n\n    private startTimer(time: number): void {\n        this.timerSource.next([Timer.convertTime(time), this.getActivePlayer()]);\n    }\n\n    private roundTimeout(): void {\n        if (this.router.url === '/game' && this.isActivePlayerLocalPlayer()) {\n            this.endRoundEvent$.next();\n            this.actionService.sendAction(this.gameId, this.localPlayerId, this.actionService.createActionData(ActionType.PASS, {}));\n        }\n    }\n\n    private isActivePlayerLocalPlayer(): boolean {\n        return this.getActivePlayer().id === this.localPlayerId;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketService",
            "id": "injectable-SocketService-9e8b46d5d8cf884ac953e76ed998fdde14ec39d77d290f4ccca5a040338ffc091192a4e34932ef79383a9dc3a07d62b326a83883fd234b1e959a56eb3766328a",
            "file": "src/app/services/socket-service/socket.service.ts",
            "properties": [
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Socket",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state$",
                    "defaultValue": "new BehaviorSubject<ConnectionState>(ConnectionState.Loading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ConnectionState>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "ConnectionStateService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "Socket",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initializeService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "on",
                    "args": [
                        {
                            "name": "ev",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "arg",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "arg",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextState",
                    "args": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ConnectionStateService"
                    }
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "ConnectionState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "ConnectionState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ConnectionStateService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ConnectionState } from '@app/classes/connection-state-service/connection-state';\nimport ConnectionStateService from '@app/classes/connection-state-service/connection-state-service';\nimport { SOCKET_ID_UNDEFINED } from '@app/constants/services-errors';\nimport { io, Socket } from 'socket.io-client';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n    providedIn: 'root',\n})\nexport default class SocketService extends ConnectionStateService {\n    private socket: Socket;\n\n    initializeService(): void {\n        this.socket = this.getSocket();\n        this.socket.on('connect', () => this.nextState(ConnectionState.Connected)).on('connect_error', () => this.nextState(ConnectionState.Error));\n    }\n\n    getId(): string {\n        if (!this.socket) throw new Error(SOCKET_ID_UNDEFINED);\n\n        return this.socket.id;\n    }\n\n    on<T>(ev: string, handler: (arg: T) => void): void {\n        if (!this.socket) {\n            return;\n        }\n        this.socket.on(ev, handler);\n    }\n\n    private getSocket(): Socket {\n        // This line cannot be tested since it would connect to the real socket in the tests since it is impossible to mock io()\n        return io(environment.serverUrlWebsocket, { transports: ['websocket'], upgrade: false });\n    }\n}\n",
            "extends": "ConnectionStateService",
            "type": "injectable"
        },
        {
            "name": "VirtualPlayerProfilesController",
            "id": "injectable-VirtualPlayerProfilesController-dcd1962dca13c95e345d86f38b52a387a74cf8390c0b5a5f9ee7f3e94116a8da036c6224291b09e153330c2649c20d7e5fbed6826de3543f28b2e7384f8a7cbe",
            "file": "src/app/controllers/virtual-player-profile-controller/virtual-player-profile.controller.ts",
            "properties": [
                {
                    "name": "endpoint",
                    "defaultValue": "`${environment.serverUrl}/virtualPlayerProfiles`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getAllVirtualPlayersEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<VirtualPlayer[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "virtualPlayerErrorEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "virtualPlayerServerResponseEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleCreateVirtualPlayerProfileEvent",
                    "args": [
                        {
                            "name": "newProfileData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newProfileData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDeleteVirtualPlayerProfileEvent",
                    "args": [
                        {
                            "name": "profileId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "profileId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleGetAllVirtualPlayerProfilesEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleResetVirtualPlayerProfilesEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleUpdateVirtualPlayerProfileEvent",
                    "args": [
                        {
                            "name": "profileData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "profileData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToGetAllVirtualPlayersEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "VirtualPlayer[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "VirtualPlayer[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToVirtualPlayerErrorEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToVirtualPlayerServerResponseEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "response",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { PositiveFeedback } from '@app/constants/virtual-players-components-constants';\nimport { VirtualPlayer, VirtualPlayerData, VirtualPlayerProfilesData } from '@common/models/virtual-player';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VirtualPlayerProfilesController implements OnDestroy {\n    private endpoint = `${environment.serverUrl}/virtualPlayerProfiles`;\n    private virtualPlayerServerResponseEvent: Subject<string> = new Subject();\n    private getAllVirtualPlayersEvent: Subject<VirtualPlayer[]> = new Subject();\n    private virtualPlayerErrorEvent: Subject<string> = new Subject();\n    private serviceDestroyed$: Subject<boolean> = new Subject();\n    constructor(private readonly http: HttpClient) {}\n\n    ngOnDestroy(): void {\n        this.serviceDestroyed$.next(true);\n        this.serviceDestroyed$.complete();\n    }\n\n    handleGetAllVirtualPlayerProfilesEvent(): void {\n        this.http.get<VirtualPlayerProfilesData>(this.endpoint, { observe: 'body' }).subscribe(\n            (body) => {\n                this.getAllVirtualPlayersEvent.next(body.virtualPlayerProfiles);\n            },\n            (error) => {\n                this.virtualPlayerErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleCreateVirtualPlayerProfileEvent(newProfileData: VirtualPlayerData): void {\n        this.http.post(this.endpoint, { virtualPlayerData: newProfileData }).subscribe(\n            () => {\n                this.virtualPlayerServerResponseEvent.next(PositiveFeedback.VirtualPlayerCreated);\n            },\n            (error) => {\n                this.virtualPlayerErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleUpdateVirtualPlayerProfileEvent(profileData: VirtualPlayerData): void {\n        this.http.patch<void>(`${this.endpoint}/${profileData.idVirtualPlayer}`, { profileData }).subscribe(\n            () => {\n                this.virtualPlayerServerResponseEvent.next(PositiveFeedback.VirtualPlayerUpdated);\n            },\n            (error) => {\n                this.virtualPlayerErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleDeleteVirtualPlayerProfileEvent(profileId: number): void {\n        this.http.delete<void>(`${this.endpoint}/${profileId}`).subscribe(\n            () => {\n                this.virtualPlayerServerResponseEvent.next(PositiveFeedback.VirtualPlayerDeleted);\n            },\n            (error) => {\n                this.virtualPlayerErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    handleResetVirtualPlayerProfilesEvent(): void {\n        this.http.delete<void>(this.endpoint).subscribe(\n            () => {\n                this.virtualPlayerServerResponseEvent.next(PositiveFeedback.VirtualPlayersDeleted);\n            },\n            (error) => {\n                this.virtualPlayerErrorEvent.next(error.error.message);\n            },\n        );\n    }\n\n    subscribeToGetAllVirtualPlayersEvent(serviceDestroyed$: Subject<boolean>, callback: (response: VirtualPlayer[]) => void): void {\n        this.getAllVirtualPlayersEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToVirtualPlayerErrorEvent(serviceDestroyed$: Subject<boolean>, callback: (response: string) => void): void {\n        this.virtualPlayerErrorEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n\n    subscribeToVirtualPlayerServerResponseEvent(serviceDestroyed$: Subject<boolean>, callback: (response: string) => void): void {\n        this.virtualPlayerServerResponseEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "VirtualPlayerProfilesService",
            "id": "injectable-VirtualPlayerProfilesService-0ce00ee77bf7df75efe991d39d8e9fe9b87b34d2ea6b40fe84bc6eb72fe2169994c5ffdd85c448e1ee62a79da8954d1390a9ba3b9442a6c690371ee90651ff8a",
            "file": "src/app/services/virtual-player-profile-service/virtual-player-profile.service.ts",
            "properties": [
                {
                    "name": "componentUpdateEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "requestSentEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<undefined>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serviceDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "virtualPlayersUpdateEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<VirtualPlayer[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createVirtualPlayer",
                    "args": [
                        {
                            "name": "virtualPlayerData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteVirtualPlayer",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllVirtualPlayersProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetVirtualPlayerProfiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToComponentUpdateEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "message",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "message",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToRequestSentEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToVirtualPlayerProfilesUpdateEvent",
                    "args": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "profiles",
                                    "type": "VirtualPlayer[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceDestroyed$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "profiles",
                                    "type": "VirtualPlayer[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateVirtualPlayer",
                    "args": [
                        {
                            "name": "virtualPlayerData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerData",
                            "type": "VirtualPlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { VirtualPlayerProfilesController } from '@app/controllers/virtual-player-profile-controller/virtual-player-profile.controller';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { VirtualPlayer, VirtualPlayerData } from '@common/models/virtual-player';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VirtualPlayerProfilesService {\n    private serviceDestroyed$: Subject<boolean>;\n    private virtualPlayersUpdateEvent: Subject<VirtualPlayer[]>;\n    private componentUpdateEvent: Subject<string>;\n    private requestSentEvent: Subject<undefined>;\n    constructor(private readonly virtualPlayerProfilesController: VirtualPlayerProfilesController) {\n        this.serviceDestroyed$ = new Subject();\n        this.virtualPlayersUpdateEvent = new Subject();\n        this.componentUpdateEvent = new Subject();\n        this.requestSentEvent = new Subject();\n        this.virtualPlayerProfilesController.subscribeToGetAllVirtualPlayersEvent(this.serviceDestroyed$, (profiles) => {\n            this.virtualPlayersUpdateEvent.next(profiles);\n        });\n        this.virtualPlayerProfilesController.subscribeToVirtualPlayerServerResponseEvent(this.serviceDestroyed$, (message) => {\n            this.requestSentEvent.next();\n            this.componentUpdateEvent.next(message);\n            this.getAllVirtualPlayersProfile();\n        });\n        this.virtualPlayerProfilesController.subscribeToVirtualPlayerErrorEvent(this.serviceDestroyed$, (message) => {\n            this.componentUpdateEvent.next(message);\n            this.getAllVirtualPlayersProfile();\n        });\n    }\n\n    createVirtualPlayer(virtualPlayerData: VirtualPlayerData): void {\n        this.virtualPlayerProfilesController.handleCreateVirtualPlayerProfileEvent(virtualPlayerData);\n    }\n\n    updateVirtualPlayer(virtualPlayerData: VirtualPlayerData): void {\n        this.virtualPlayerProfilesController.handleUpdateVirtualPlayerProfileEvent(virtualPlayerData);\n    }\n\n    getAllVirtualPlayersProfile(): void {\n        this.virtualPlayerProfilesController.handleGetAllVirtualPlayerProfilesEvent();\n    }\n\n    resetVirtualPlayerProfiles(): void {\n        this.virtualPlayerProfilesController.handleResetVirtualPlayerProfilesEvent();\n    }\n\n    deleteVirtualPlayer(id: number): void {\n        this.virtualPlayerProfilesController.handleDeleteVirtualPlayerProfileEvent(id);\n    }\n\n    subscribeToVirtualPlayerProfilesUpdateEvent(serviceDestroyed$: Subject<boolean>, callback: (profiles: VirtualPlayer[]) => void): void {\n        this.virtualPlayersUpdateEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n    subscribeToComponentUpdateEvent(serviceDestroyed$: Subject<boolean>, callback: (message: string) => void): void {\n        this.componentUpdateEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n    subscribeToRequestSentEvent(serviceDestroyed$: Subject<boolean>, callback: () => void): void {\n        this.requestSentEvent.pipe(takeUntil(serviceDestroyed$)).subscribe(callback);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "virtualPlayerProfilesController",
                        "type": "VirtualPlayerProfilesController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "virtualPlayerProfilesController",
                        "type": "VirtualPlayerProfilesController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ActionPayloadToString",
            "id": "class-ActionPayloadToString-d772f8f3bfccf0717a3148e56f5378b6850b2e3dc2e7935a8fd0aef47d656e0b2b8c4a24e1ab10e783803b0151f8389d3f90101bd6835085c337faee420a6277",
            "file": "src/app/utils/action-payload-to-string/action-payload-to-string.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionType, ACTION_COMMAND_INDICATOR, ExchangeActionPayload, PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { Orientation, ORIENTATION_HORIZONTAL_LETTER, ORIENTATION_VERTICAL_LETTER } from '@app/classes/actions/orientation';\nimport { Tile } from '@app/classes/tile';\nimport { INVALID_PAYLOAD_FOR_ACTION_TYPE } from '@app/constants/services-errors';\n\nconst COLUMN_INDEX_ADJUSTMENT = 1;\n\nexport class ActionPayloadToString {\n    static placeActionPayloadToString(placePayload: PlaceActionPayload): string {\n        if (this.isInvalidPlacePayload(placePayload)) throw new Error(INVALID_PAYLOAD_FOR_ACTION_TYPE);\n\n        const tiles = this.tilesToString(placePayload.tiles);\n        const positionRow = this.positionNumberToLetter(placePayload.startPosition.row);\n        const positionColumn = `${placePayload.startPosition.column + COLUMN_INDEX_ADJUSTMENT}`;\n        const orientation = this.orientationToLetter(placePayload.orientation);\n        return `${ACTION_COMMAND_INDICATOR}${ActionType.PLACE} ${positionRow}${positionColumn}${orientation} ${tiles}`;\n    }\n\n    static exchangeActionPayloadToString(exchangePayload: ExchangeActionPayload): string {\n        if (!exchangePayload.tiles) throw new Error(INVALID_PAYLOAD_FOR_ACTION_TYPE);\n\n        return `${ACTION_COMMAND_INDICATOR}${ActionType.EXCHANGE} ${this.tilesToString(exchangePayload.tiles)}`;\n    }\n\n    static simpleActionToString(actionType: ActionType): string {\n        return `${ACTION_COMMAND_INDICATOR}${actionType}`;\n    }\n\n    private static positionNumberToLetter(position: number): string {\n        return String.fromCharCode(position + 'a'.charCodeAt(0));\n    }\n\n    private static orientationToLetter(orientation: Orientation): string {\n        return orientation === Orientation.Horizontal ? ORIENTATION_HORIZONTAL_LETTER : ORIENTATION_VERTICAL_LETTER;\n    }\n\n    private static tilesToString(tiles: Tile[]): string {\n        return tiles.reduce((str, tile) => {\n            return str + this.tileToLetterConversion(tile);\n        }, '');\n    }\n\n    private static tileToLetterConversion(tile: Tile): string {\n        return tile.isBlank ? this.getBlankTileLetter(tile).toUpperCase() : tile.letter.toLocaleLowerCase();\n    }\n\n    private static getBlankTileLetter(tile: Tile): string {\n        return tile.playedLetter ? tile.playedLetter : tile.letter;\n    }\n\n    private static isInvalidPlacePayload(placePayload: PlaceActionPayload): boolean {\n        return placePayload.orientation === undefined || !placePayload.startPosition || !placePayload.tiles;\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "exchangeActionPayloadToString",
                    "args": [
                        {
                            "name": "exchangePayload",
                            "type": "ExchangeActionPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "exchangePayload",
                            "type": "ExchangeActionPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBlankTileLetter",
                    "args": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInvalidPlacePayload",
                    "args": [
                        {
                            "name": "placePayload",
                            "type": "PlaceActionPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "placePayload",
                            "type": "PlaceActionPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orientationToLetter",
                    "args": [
                        {
                            "name": "orientation",
                            "type": "Orientation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "orientation",
                            "type": "Orientation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "placeActionPayloadToString",
                    "args": [
                        {
                            "name": "placePayload",
                            "type": "PlaceActionPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "placePayload",
                            "type": "PlaceActionPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "positionNumberToLetter",
                    "args": [
                        {
                            "name": "position",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simpleActionToString",
                    "args": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tilesToString",
                    "args": [
                        {
                            "name": "tiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tiles",
                            "type": "Tile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tileToLetterConversion",
                    "args": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BoardNavigator",
            "id": "class-BoardNavigator-248869ec0faa50b751bc2bea88cbef50bfe735271dfcd77311dcfdd8bb4f78a7cc0c7906ac78792c115597abb27b5bc87da7853d210a4137174aca711d844f48",
            "file": "src/app/classes/board-navigator/board-navigator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Orientation } from '@app/classes/actions/orientation';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { SquareView } from '@app/classes/square';\nimport Direction from './direction';\n\nexport class BoardNavigator {\n    orientation: Orientation;\n    private position: Position;\n    private squareGrid: SquareView[][];\n\n    constructor(squareGrid: SquareView[][], position: Position, orientation: Orientation) {\n        this.squareGrid = squareGrid;\n        this.position = { ...position };\n        this.orientation = orientation;\n    }\n\n    get row(): number {\n        return this.position.row;\n    }\n\n    get column(): number {\n        return this.position.column;\n    }\n\n    get currentSquareView(): SquareView {\n        return this.squareGrid[this.position.row][this.position.column];\n    }\n\n    setPosition(position: Position): void {\n        this.position = { ...position };\n    }\n\n    nextEmpty(direction: Direction, allowNotApplied: boolean): SquareView | undefined {\n        return this.moveUntil(direction, () => this.isEmpty(allowNotApplied));\n    }\n\n    switchOrientation(): BoardNavigator {\n        this.orientation = this.orientation === Orientation.Horizontal ? Orientation.Vertical : Orientation.Horizontal;\n        return this;\n    }\n\n    clone(): BoardNavigator {\n        return new BoardNavigator(this.squareGrid, this.position, this.orientation);\n    }\n\n    private move(direction: Direction, distance: number = 1): BoardNavigator {\n        if (this.orientation === Orientation.Horizontal) {\n            this.position.column += direction * distance;\n        } else {\n            this.position.row += direction * distance;\n        }\n        return this;\n    }\n\n    private moveUntil(direction: Direction, predicate: () => boolean): SquareView | undefined {\n        do {\n            this.move(direction);\n        } while (this.isWithinBounds() && !predicate());\n\n        return this.isWithinBounds() ? this.currentSquareView : undefined;\n    }\n\n    private isWithinBounds(): boolean {\n        return (\n            this.position.row >= 0 &&\n            this.position.column >= 0 &&\n            this.position.row < this.squareGrid.length &&\n            this.position.column < this.squareGrid[this.position.row].length\n        );\n    }\n\n    private isEmpty(allowNotApplied: boolean = false): boolean {\n        return this.currentSquareView.square.tile === null || (allowNotApplied && !this.currentSquareView.applied);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "squareGrid",
                        "type": "SquareView[][]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "position",
                        "type": "Position",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orientation",
                        "type": "Orientation",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "squareGrid",
                        "type": "SquareView[][]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "position",
                        "type": "Position",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orientation",
                        "type": "Orientation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "orientation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Orientation",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "squareGrid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SquareView[][]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "BoardNavigator",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "allowNotApplied",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "allowNotApplied",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isWithinBounds",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "move",
                    "args": [
                        {
                            "name": "direction",
                            "type": "Direction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "BoardNavigator",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "Direction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveUntil",
                    "args": [
                        {
                            "name": "direction",
                            "type": "Direction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "predicate",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "SquareView | undefined",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "Direction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "predicate",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextEmpty",
                    "args": [
                        {
                            "name": "direction",
                            "type": "Direction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allowNotApplied",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SquareView | undefined",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "Direction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allowNotApplied",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchOrientation",
                    "args": [],
                    "optional": false,
                    "returnType": "BoardNavigator",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "row": {
                    "name": "row",
                    "getSignature": {
                        "name": "row",
                        "type": "number",
                        "returnType": "number",
                        "line": 17
                    }
                },
                "column": {
                    "name": "column",
                    "getSignature": {
                        "name": "column",
                        "type": "number",
                        "returnType": "number",
                        "line": 21
                    }
                },
                "currentSquareView": {
                    "name": "currentSquareView",
                    "getSignature": {
                        "name": "currentSquareView",
                        "type": "",
                        "returnType": "SquareView",
                        "line": 25
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CommandException",
            "id": "class-CommandException-6b82a9e69a516a4e5d0ba0192168a79af22972cbd9804f54f2883fd5d10229c4fd1575fa24cf58ba6db0625fcb362ac90f3fb5803d53404622aa65acf940cec7",
            "file": "src/app/services/input-parser-service/command-exception.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CommandExceptionMessages } from '@app/constants/command-exception-messages';\n\nexport default class CommandException extends Error {\n    constructor(message: CommandExceptionMessages | string) {\n        super(message);\n        Object.setPrototypeOf(this, CommandException.prototype);\n        this.name = 'CommandException';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "message",
                        "type": "CommandExceptionMessages | string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "message",
                        "type": "CommandExceptionMessages | string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "Error",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConnectionStateService",
            "id": "class-ConnectionStateService-fec4551c458965c70d2546d5a6dd9783c89a9b7771ac7301a5e33c73a5acb328d68bb7cf44e71a527f930b829282033dbcbe0e0ad98a641acede5068d234437b",
            "file": "src/app/classes/connection-state-service/connection-state-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ConnectionState } from './connection-state';\n\nexport default abstract class ConnectionStateService {\n    private state$: BehaviorSubject<ConnectionState> = new BehaviorSubject<ConnectionState>(ConnectionState.Loading);\n\n    subscribe(destroy$: Observable<boolean>, next: (state: ConnectionState) => void): Subscription {\n        return this.state$.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    protected nextState(state: ConnectionState): void {\n        this.state$.next(state);\n    }\n}\n",
            "properties": [
                {
                    "name": "state$",
                    "defaultValue": "new BehaviorSubject<ConnectionState>(ConnectionState.Loading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ConnectionState>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "nextState",
                    "args": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ConnectionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "ConnectionState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Observable<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "ConnectionState",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Delay",
            "id": "class-Delay-4eb7cf22a05ac867ca1c60db1cc7a4c33716c0747e8e849be0dcb74ca694f1123db6001b56dbba6cad23bb79cdae97013c18e16d47aeafaa9688729c7919b082",
            "file": "src/app/utils/delay/delay.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export default class Delay {\n    static async for(delay: number): Promise<void> {\n        return new Promise((resolve) => {\n            setTimeout(resolve, delay);\n        });\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "for",
                    "args": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FocusableComponent",
            "id": "class-FocusableComponent-ccfd1cf2af6232a3834ad752a5f9567f2246f7d352981e65cfa01de6e62f201420cda85bb15790a4529004f386af50efe663ea30c60934562afdd18833f9c9cd",
            "file": "src/app/classes/focusable-component/focusable-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class FocusableComponent<T> {\n    private focusableEvent: Subject<T> = new Subject();\n    private loseFocusEvent: Subject<void> = new Subject();\n    private focusableComponentDestroyed$: Subject<boolean> = new Subject();\n\n    emitFocusableEvent(value: T): void {\n        this.focusableEvent.next(value);\n    }\n\n    emitLoseFocusEvent(): void {\n        this.loseFocusEvent.next();\n    }\n\n    protected onLoseFocusEvent?(): void;\n    protected onFocusableEvent?(value: T): void;\n\n    protected subscribeToFocusableEvent(destroy$: Subject<boolean>, next: (value: T) => void): void {\n        this.focusableEvent.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    protected subscribeToLoseFocusEvent(destroy$: Subject<boolean>, next: () => void): void {\n        this.loseFocusEvent.pipe(takeUntil(destroy$)).subscribe(next);\n    }\n\n    protected subscribeToFocusableEvents(): void {\n        this.focusableEvent.pipe(takeUntil(this.focusableComponentDestroyed$)).subscribe(this.onFocusableEvent?.bind(this));\n        this.loseFocusEvent.pipe(takeUntil(this.focusableComponentDestroyed$)).subscribe(this.onLoseFocusEvent?.bind(this));\n    }\n\n    protected unsubscribeToFocusableEvents(): void {\n        this.focusableComponentDestroyed$.next(true);\n        this.focusableComponentDestroyed$.complete();\n    }\n}\n",
            "properties": [
                {
                    "name": "focusableComponentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusableEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loseFocusEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "emitFocusableEvent",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitLoseFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusableEvent",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoseFocusEvent",
                    "args": [],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "subscribeToFocusableEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "subscribeToLoseFocusEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GameHistoriesConverter",
            "id": "class-GameHistoriesConverter-5ba100a9a373b043a71df2e87abb26e75ba92a3174a44f81536ec6806db8c4c054e28dc9206bc11fc0d5e42ba895725bca91e6c23c6432505800be2d413b3adb",
            "file": "src/app/classes/game-history/game-histories-converter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GameHistoriesData, GameHistoryData } from '@app/classes/communication/game-histories';\nimport { GameHistoryWithPlayers } from '@common/models/game-history';\nimport { NoId } from '@common/types/no-id';\n\nconst INVERSE = -1;\n\nexport class GameHistoriesConverter {\n    static convert(gameHistories: NoId<GameHistoriesData>): NoId<GameHistoryWithPlayers>[] {\n        return gameHistories.gameHistories.map<NoId<GameHistoryWithPlayers>>(this.convertGameHistory).sort(this.compareGameHistory);\n    }\n\n    private static convertGameHistory(gameHistoryData: NoId<GameHistoryData>): NoId<GameHistoryWithPlayers> {\n        return {\n            ...gameHistoryData,\n            startTime: new Date(gameHistoryData.startTime),\n            endTime: new Date(gameHistoryData.endTime),\n        };\n    }\n\n    private static compareGameHistory(gameHistoryA: NoId<GameHistoryWithPlayers>, gameHistoryB: NoId<GameHistoryWithPlayers>): number {\n        return gameHistoryA.startTime < gameHistoryB.startTime ? 1 : INVERSE;\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "compareGameHistory",
                    "args": [
                        {
                            "name": "gameHistoryA",
                            "type": "NoId<GameHistoryWithPlayers>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gameHistoryB",
                            "type": "NoId<GameHistoryWithPlayers>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameHistoryA",
                            "type": "NoId<GameHistoryWithPlayers>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gameHistoryB",
                            "type": "NoId<GameHistoryWithPlayers>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convert",
                    "args": [
                        {
                            "name": "gameHistories",
                            "type": "NoId<GameHistoriesData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NoId[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameHistories",
                            "type": "NoId<GameHistoriesData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertGameHistory",
                    "args": [
                        {
                            "name": "gameHistoryData",
                            "type": "NoId<GameHistoryData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NoId<GameHistoryWithPlayers>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameHistoryData",
                            "type": "NoId<GameHistoryData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Player",
            "id": "class-Player-2a9275375c1c0d800f8a571f43417e71c6b28c3a136f52be8c9a4fcce00ff5e19b5b81b3858678c22c416ead5b8045fd74e3c42852ae31ba2a312525c6a7ff6a",
            "file": "src/app/classes/player/player.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PlayerData } from '@app/classes/communication/';\nimport { Tile } from '@app/classes/tile';\nexport default class Player {\n    id: string;\n    name: string;\n    score: number;\n    private tiles: Tile[];\n\n    constructor(id: string, name: string, tiles: Tile[]) {\n        this.id = id;\n        this.name = name;\n        this.score = 0;\n        this.tiles = [...tiles];\n    }\n\n    getTiles(): Tile[] {\n        return [...this.tiles];\n    }\n\n    updatePlayerData(playerData: PlayerData): void {\n        this.id = playerData.newId ? playerData.newId : this.id;\n        this.name = playerData.name ? playerData.name : this.name;\n        this.score = playerData.score ? playerData.score : this.score;\n        this.tiles = playerData.tiles ? [...playerData.tiles] : this.tiles;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tiles",
                        "type": "Tile[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tiles",
                        "type": "Tile[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tile[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Tile[]",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePlayerData",
                    "args": [
                        {
                            "name": "playerData",
                            "type": "PlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerData",
                            "type": "PlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PlayerContainer",
            "id": "class-PlayerContainer-d73a86b2d192f1e65345c5a4b319af90c99faa5925beb1c122e0dbb75a89caca7461d7ab627db66eea33e048248db2d98392f18ab75b6c93753b9786def1e0bf",
            "file": "src/app/classes/player/player-container.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PlayerData } from '@app/classes/communication';\nimport { PLAYER_1_INDEX } from '@app/constants/game-constants';\nimport { MISSING_PLAYER_DATA_TO_INITIALIZE, PLAYER_NUMBER_INVALID } from '@app/constants/services-errors';\nimport Player from './player';\n\nexport class PlayerContainer {\n    private players: Map<number, Player>;\n    private readonly localPlayerId: string;\n\n    constructor(localPlayerId: string) {\n        this.players = new Map();\n        this.localPlayerId = localPlayerId;\n    }\n\n    getLocalPlayerId(): string {\n        return this.localPlayerId;\n    }\n\n    getLocalPlayer(): Player | undefined {\n        if (!this.getLocalPlayerId()) return undefined;\n        const filteredPlayers = [...this.players.values()].filter((p) => p.id === this.getLocalPlayerId());\n\n        return filteredPlayers[0] ? filteredPlayers[0] : undefined;\n    }\n\n    initializePlayers(...playersData: PlayerData[]): this {\n        this.resetPlayers();\n        playersData.forEach((playerData: PlayerData, index: number) => this.initializePlayer(PLAYER_1_INDEX + index, playerData));\n        return this;\n    }\n\n    initializePlayer(playerNumber: number, playerData: PlayerData): this {\n        if (!playerData.name || !playerData.tiles) throw new Error(MISSING_PLAYER_DATA_TO_INITIALIZE);\n        this.setPlayer(playerNumber, new Player(playerData.id, playerData.name, playerData.tiles));\n        return this;\n    }\n\n    getPlayer(playerNumber: number): Player {\n        const player: Player | undefined = this.players.get(playerNumber);\n        if (!player) throw new Error(PLAYER_NUMBER_INVALID(playerNumber));\n        return player;\n    }\n\n    updatePlayersData(...playersData: PlayerData[]): this {\n        playersData.forEach((playerData: PlayerData) => {\n            [...this.players.values()]\n                .filter((player: Player) => player.id === playerData.id)\n                .forEach((player: Player) => player.updatePlayerData(playerData));\n        });\n        return this;\n    }\n\n    private setPlayer(playerNumber: number, player: Player): this {\n        this.players.set(playerNumber, player);\n        return this;\n    }\n\n    private resetPlayers(): this {\n        this.players.clear();\n        return this;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localPlayerId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "localPlayerId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "localPlayerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "players",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Player>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLocalPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "Player | undefined",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLocalPlayerId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPlayer",
                    "args": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Player",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializePlayer",
                    "args": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerData",
                            "type": "PlayerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerData",
                            "type": "PlayerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializePlayers",
                    "args": [
                        {
                            "name": "playersData",
                            "type": "PlayerData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playersData",
                            "type": "PlayerData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPlayers",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setPlayer",
                    "args": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "player",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "playerNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "player",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePlayersData",
                    "args": [
                        {
                            "name": "playersData",
                            "type": "PlayerData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "playersData",
                            "type": "PlayerData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Random",
            "id": "class-Random-2e919cd063a19a1ca1f7c2f60667ffebfc3be39559f39f8056a46c45bf3ad18b92dfb87346ecff89c3797925ecc07bdafc8771f14756bd6d9b4f86f7ee825f2b",
            "file": "src/app/utils/random/random.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Random {\n    static getRandomElementsFromArray<T>(array: T[], elementsToChoose: number = 1): T[] {\n        if (elementsToChoose > array.length) return array;\n\n        let length = array.length;\n        const result = new Array(elementsToChoose);\n        const taken = new Array(length);\n\n        while (elementsToChoose--) {\n            const randomIndex = Math.floor(Math.random() * length);\n\n            result[elementsToChoose] = array[randomIndex in taken ? taken[randomIndex] : randomIndex];\n            taken[randomIndex] = --length in taken ? taken[length] : length;\n        }\n        return result;\n    }\n\n    static randomize<T>(array: T[]): T[] {\n        array = [...array];\n        const output: T[] = [];\n\n        let current: T | undefined;\n        while ((current = this.popRandom(array))) {\n            output.push(current);\n        }\n\n        return output;\n    }\n\n    private static popRandom<T>(array: T[]): T | undefined {\n        return array.splice(Math.floor(Math.random() * array.length), 1).pop();\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getRandomElementsFromArray",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementsToChoose",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementsToChoose",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "popRandom",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "randomize",
                    "args": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SquareView",
            "id": "class-SquareView-2e1134080756398904290c8966bbdb1d9ff8d65461d9771ada55b43d24062c23371ea47873f547f85a2ace9b1e8b38ed7304d24135f5ddc22c07417742dc2d35",
            "file": "src/app/classes/square/square-view.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Vec2 } from '@app/classes/board-navigator/vec2';\nimport { Square } from '@app/classes/square';\nimport { NO_COLOR_FOR_MULTIPLIER, NO_SQUARE_FOR_SQUARE_VIEW } from '@app/constants/classes-errors';\nimport { COLORS } from '@app/constants/colors-constants';\nimport { MultiplierEffect, MultiplierValue } from './score-multiplier';\nimport { MULTIPLIER_COLOR_MAP } from './square-multiplier-to-color-map';\n\nexport default class SquareView {\n    square: Square;\n    squareSize: Vec2;\n    applied: boolean;\n    newlyPlaced: boolean;\n\n    constructor(square: Square, squareSize: Vec2) {\n        this.square = square;\n        this.squareSize = squareSize;\n        this.applied = true;\n        this.newlyPlaced = false;\n    }\n\n    getColor(): COLORS {\n        if (!this.square) {\n            throw new Error(NO_SQUARE_FOR_SQUARE_VIEW);\n        }\n        if (!this.square.scoreMultiplier) {\n            return COLORS.Gray;\n        }\n\n        const squareMultiplier: MultiplierValue = this.square.scoreMultiplier.multiplier;\n        const squareMultiplierEffect: MultiplierEffect = this.square.scoreMultiplier.multiplierEffect;\n        const multiplierToColorMap = MULTIPLIER_COLOR_MAP.get(squareMultiplierEffect);\n\n        if (multiplierToColorMap) {\n            const color = multiplierToColorMap.get(squareMultiplier);\n            if (color) {\n                return color;\n            }\n        }\n        throw new Error(NO_COLOR_FOR_MULTIPLIER);\n    }\n\n    getText(): [type: string | undefined, multiplier: string | undefined] {\n        if (!this.square) {\n            throw new Error(NO_SQUARE_FOR_SQUARE_VIEW);\n        }\n\n        if (!this.square.scoreMultiplier || this.square.isCenter) {\n            return [undefined, undefined];\n        }\n        const multiplierType: string = this.square.scoreMultiplier.multiplierEffect;\n        const multiplier: number = this.square.scoreMultiplier.multiplier;\n\n        return [multiplierType, `${multiplier}`];\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "square",
                        "type": "Square",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "squareSize",
                        "type": "Vec2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "square",
                        "type": "Square",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "squareSize",
                        "type": "Vec2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "applied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "newlyPlaced",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "square",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Square",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "squareSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vec2",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "COLORS",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getText",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Tile",
            "id": "class-Tile-0ba6e9b73811b0ff5dfb566079dfb51943f6a132171c6c0b79ac810ad52fff2006863bef9d37c5e984f7bd9758e039eac5fb2d814666bc69150abb5c017688d3",
            "file": "src/app/classes/tile/tile.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LetterValue } from './tile.types';\n\nexport default class Tile {\n    letter: LetterValue;\n    value: number;\n    isBlank?: boolean;\n    playedLetter?: LetterValue; // Used when letter is *\n\n    constructor(letter: LetterValue, value: number, isBlank?: boolean) {\n        this.letter = letter;\n        this.value = value;\n        this.isBlank = isBlank ?? false;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "letter",
                        "type": "LetterValue",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isBlank",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "letter",
                        "type": "LetterValue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isBlank",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isBlank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "letter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "playedLetter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Timer",
            "id": "class-Timer-6ffaa455cf7fbacc3efca3ce40d47f2fb35c4bfe45bc94a624e2a08b232cb43cec5a86e377e36a9f9c2e5aee1a71d80370a992b35573bfb21f8d36f16e84accc",
            "file": "src/app/classes/round/timer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Timer {\n    minutes: number;\n    seconds: number;\n\n    constructor(minutes: number, seconds: number) {\n        if (minutes < 0 || seconds < 0 || seconds >= SECONDS_IN_MINUTE) throw new Error(ILLEGAL_TIMER_PARAMETERS);\n        this.minutes = minutes;\n        this.seconds = seconds;\n    }\n\n    static convertTime(time: number): Timer {\n        const minutes = Math.floor(time / SECONDS_IN_MINUTE);\n        const seconds = Math.floor(time % SECONDS_IN_MINUTE);\n        return new Timer(minutes, seconds);\n    }\n\n    decrement(): void {\n        if (this.seconds > 0) {\n            this.seconds--;\n        } else if (this.minutes > 0) {\n            this.minutes--;\n            this.seconds = 59;\n        }\n    }\n\n    getTimerSecondsPadded(): string {\n        return this.seconds.toString().padStart(2, '0');\n    }\n}\n\nexport const ILLEGAL_TIMER_PARAMETERS = 'The arguments passed to create the timer are not valid (minute < 0 or seconds < 0)';\nconst SECONDS_IN_MINUTE = 60;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "minutes",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seconds",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "minutes",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "seconds",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [
                {
                    "name": "convertTime",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Timer",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTimerSecondsPadded",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AdminDictionariesComponent",
            "id": "component-AdminDictionariesComponent-2259abf53e795adef468752ad72b914d020440b13f1b1b5a7c23cf036c8d5ff236a37ae40364f0d4e1bb4be7ffa4abbd19a2f89b3ea5f245c10341830f191606",
            "file": "src/app/components/admin-dictionaries-component/admin-dictionaries.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-dictionaries",
            "styleUrls": [
                "./admin-dictionaries.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-dictionaries.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayDictionaryColumns",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "columnsItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayDictionaryColumnsIteratorItem[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<DictionarySummary>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isWaitingForServerResponse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionariesState",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "askResetDictionaries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "convertDictionariesToMatDataSource",
                    "args": [
                        {
                            "name": "dictionaries",
                            "type": "DictionarySummary[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dictionaries",
                            "type": "DictionarySummary[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDictionary",
                    "args": [
                        {
                            "name": "dictionary",
                            "type": "DictionarySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dictionary",
                            "type": "DictionarySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadDictionary",
                    "args": [
                        {
                            "name": "dictionaryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dictionaryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnIterator",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayDictionaryColumnsIteratorItem[]",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getDisplayedColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayDictionaryKeys[]",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isFeedbackPositive",
                    "args": [
                        {
                            "name": "response",
                            "type": "PositiveFeedback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PositiveFeedbackResponse",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "PositiveFeedback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modifyDictionary",
                    "args": [
                        {
                            "name": "newDictionary",
                            "type": "DictionarySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newDictionary",
                            "type": "DictionarySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetDictionaries",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "uploadDictionary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport {\n    DictionariesState,\n    DisplayDictionaryColumns,\n    DisplayDictionaryColumnsIteratorItem,\n    DisplayDictionaryKeys,\n} from '@app/classes/admin/dictionaries';\nimport { DictionarySummary } from '@app/classes/communication/dictionary-summary';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { DeleteDictionaryDialogComponent } from '@app/components/delete-dictionary-dialog/delete-dictionary-dialog.component';\nimport { DeleteDictionaryDialogParameters } from '@app/components/delete-dictionary-dialog/delete-dictionary-dialog.component.types';\nimport { ModifyDictionaryComponent } from '@app/components/modify-dictionary-dialog/modify-dictionary-dialog.component';\nimport { DictionaryDialogParameters } from '@app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types';\nimport { UploadDictionaryComponent } from '@app/components/upload-dictionary/upload-dictionary.component';\nimport {\n    ADMIN_RESET_DICTIONARY_TITLE,\n    ADMIN_RESET_MESSAGE,\n    CANCEL,\n    CANCEL_ICON,\n    DICTIONARIES_COLUMNS,\n    ERROR_SNACK_BAR_CONFIG,\n    REINITIALIZE,\n    REINITIALIZE_ICON,\n    SUCCESS_SNACK_BAR_CONFIG,\n} from '@app/constants/components-constants';\nimport { PositiveFeedbackResponse } from '@app/constants/dialogs-constants';\nimport { PositiveFeedback } from '@app/constants/dictionaries-components';\nimport { DictionaryService } from '@app/services/dictionary-service/dictionary.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-admin-dictionaries',\n    templateUrl: './admin-dictionaries.component.html',\n    styleUrls: ['./admin-dictionaries.component.scss'],\n})\nexport class AdminDictionariesComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChild(MatSort) sort: MatSort;\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    columns: DisplayDictionaryColumns;\n    dataSource: MatTableDataSource<DictionarySummary>;\n    state: DictionariesState;\n    isWaitingForServerResponse: boolean;\n\n    private columnsItems: DisplayDictionaryColumnsIteratorItem[];\n    private componentDestroyed$: Subject<boolean>;\n    constructor(public dialog: MatDialog, private dictionariesService: DictionaryService, private snackBar: MatSnackBar) {\n        this.componentDestroyed$ = new Subject();\n        this.columns = DICTIONARIES_COLUMNS;\n        this.columnsItems = this.getColumnIterator();\n        this.dataSource = new MatTableDataSource(new Array());\n        this.state = DictionariesState.Loading;\n        this.initializeSubscriptions();\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    ngOnInit(): void {\n        this.dictionariesService.updateAllDictionaries();\n    }\n\n    ngAfterViewInit(): void {\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n    }\n\n    modifyDictionary(newDictionary: DictionarySummary): void {\n        const newDictionaryData: DictionaryDialogParameters = {\n            dictionaryToModifyDescription: newDictionary.description,\n            dictionaryToModifyTitle: newDictionary.title,\n            dictionaryId: newDictionary.id,\n        };\n        this.dialog.open(ModifyDictionaryComponent, {\n            data: newDictionaryData,\n            height: '350px',\n            width: '450px',\n        });\n    }\n\n    uploadDictionary(): void {\n        this.dialog.open(UploadDictionaryComponent, {\n            height: '300px',\n            width: '500px',\n        });\n    }\n\n    deleteDictionary(dictionary: DictionarySummary): void {\n        const dictionaryId: DeleteDictionaryDialogParameters = {\n            pageTitle: dictionary.title,\n            dictionaryId: dictionary.id,\n            // We haven't been able to test that the right function is called because this\n            // arrow function creates a new instance of the function. We cannot spy on it.\n            // It totally works tho, try it!\n            onClose: () => {\n                this.isWaitingForServerResponse = true;\n            },\n        };\n        this.dialog.open(DeleteDictionaryDialogComponent, { data: dictionaryId });\n    }\n\n    async downloadDictionary(dictionaryId: string): Promise<void> {\n        this.isWaitingForServerResponse = true;\n        await this.dictionariesService.downloadDictionary(dictionaryId);\n    }\n\n    askResetDictionaries(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: ADMIN_RESET_DICTIONARY_TITLE,\n                content: ADMIN_RESET_MESSAGE,\n                buttons: [\n                    {\n                        content: CANCEL,\n                        closeDialog: true,\n                        icon: CANCEL_ICON,\n                    },\n                    {\n                        content: REINITIALIZE,\n                        action: this.resetDictionaries.bind(this),\n                        closeDialog: true,\n                        icon: REINITIALIZE_ICON,\n                        style: {\n                            background: 'tomato',\n                        },\n                    },\n                ],\n            },\n        });\n    }\n\n    async resetDictionaries(): Promise<void> {\n        await this.dictionariesService.resetDictionaries();\n    }\n\n    getDisplayedColumns(): DisplayDictionaryKeys[] {\n        return this.columnsItems.map(({ key }) => key);\n    }\n\n    private getColumnIterator(): DisplayDictionaryColumnsIteratorItem[] {\n        return Object.keys(this.columns).map<DisplayDictionaryColumnsIteratorItem>((key) => ({\n            key: key as DisplayDictionaryKeys,\n            label: this.columns[key as DisplayDictionaryKeys],\n        }));\n    }\n\n    private convertDictionariesToMatDataSource(dictionaries: DictionarySummary[]): void {\n        this.dataSource.data = dictionaries;\n    }\n\n    private initializeSubscriptions(): void {\n        this.dictionariesService.subscribeToDictionariesUpdateMessageEvent(this.componentDestroyed$, () => {\n            this.convertDictionariesToMatDataSource(this.dictionariesService.getDictionaries());\n        });\n        this.dictionariesService.subscribeToDictionariesUpdateDataEvent(this.componentDestroyed$, () => {\n            this.convertDictionariesToMatDataSource(this.dictionariesService.getDictionaries());\n        });\n        this.dictionariesService.subscribeToIsWaitingForServerResponseEvent(this.componentDestroyed$, () => {\n            this.isWaitingForServerResponse = !this.isWaitingForServerResponse;\n        });\n        this.dictionariesService.subscribeToComponentUpdateEvent(this.componentDestroyed$, (response) => {\n            this.snackBar.open(response, 'Fermer', this.isFeedbackPositive(response as PositiveFeedback));\n        });\n        this.dictionariesService.subscribeToUpdatingDictionariesEvent(this.componentDestroyed$, (state) => {\n            this.state = state;\n            this.isWaitingForServerResponse = !this.isWaitingForServerResponse;\n        });\n    }\n\n    private isFeedbackPositive(response: PositiveFeedback): PositiveFeedbackResponse {\n        return Object.values(PositiveFeedback).includes(response) ? SUCCESS_SNACK_BAR_CONFIG : ERROR_SNACK_BAR_CONFIG;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\ntable {\n    width: 100%;\n    margin: 12px 0;\n}\n\n.primary {\n    color: $primary;\n}\n.secondary {\n    opacity: 0.45;\n}\n\n.filter-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    margin: 12px 0;\n\n    mat-form-field {\n        margin-bottom: -22px;\n        width: 33%;\n        min-width: 300px;\n        max-width: 100%;\n    }\n}\n\n.spaced-button {\n    margin: 2px;\n}\n\n.loading-container {\n    padding: 24px 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 1.2em;\n\n    mat-spinner {\n        margin-bottom: 24px;\n    }\n\n    p {\n        margin: 0;\n\n        &.error {\n            color: tomato;\n        }\n        &:not(.error) {\n            opacity: 0.75;\n        }\n    }\n}\n\nmat-paginator:not(.visible) {\n    display: none;\n    visibility: hidden;\n    opacity: 0;\n}\n\n.left-cell {\n    text-align: left !important;\n}\n\n.right-cell {\n    text-align: right !important;\n}\n\nth.mat-header-container {\n    text-align: center !important;\n}\n\n.icon {\n    margin-left: 12px;\n}\n\n::ng-deep snack-bar-container.success {\n    background: lighten($primary, 70%);\n    color: $primary;\n    \n    button {\n        color: $primary;\n    }\n}\n::ng-deep snack-bar-container.error {\n    background: lighten(tomato, 30%);\n    color: tomato;\n    \n    button {\n        color: tomato;\n    }\n}\n",
                    "styleUrl": "./admin-dictionaries.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div matSort>\n    <div class=\"filter-container\">\n        <button mat-flat-button color=\"primary\" (click)=\"askResetDictionaries()\" [disabled]=\"state !== 'ready'\">\n            Réinitialiser\n            <app-icon class=\"icon\" icon=\"history\"></app-icon>\n        </button>\n        <button mat-flat-button color=\"primary\" (click)=\"uploadDictionary()\">\n            Ajouter un dictionnaire\n            <app-icon class=\"icon\" icon=\"plus-circle\" styling=\"solid\" size=\"lg\"></app-icon>\n        </button>\n     </div>\n\n    <mat-divider></mat-divider>\n\n    <ng-container [ngSwitch]=\"state\">\n        <ng-container *ngSwitchCase=\"'ready'\">\n            <table mat-table [dataSource]=\"dataSource\">\n        \n                <ng-container matColumnDef=\"title\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.title}} </th>\n                    <td mat-cell class=\"left-cell\" *matCellDef=\"let element\"> {{element.title}} </td>\n                </ng-container>\n       \n                <ng-container matColumnDef=\"description\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.description}} </th>\n                    <td mat-cell class=\"left-cell\" *matCellDef=\"let element\"> {{element.description}} </td>\n                </ng-container> \n\n                <ng-container matColumnDef=\"actions\">\n                    <th mat-header-cell *matHeaderCellDef> {{columns.actions}} </th>\n                    <td mat-cell class=\"right-cell\" *matCellDef=\"let element\"> \n                        <button mat-mini-fab class=\"mat-elevation-z0 spaced-button\" color = \"primary\" (click)=\"modifyDictionary(element)\"[disabled] = \"element.isDefault\">\n                            <app-icon matTooltip=\"Vous ne pouvez pas modifier le dictionnaire par défaut.\" [matTooltipDisabled]=\"!element.isDefault\" icon=\"pencil\">\n                            </app-icon>\n                        </button>\n                        <button mat-mini-fab class=\"mat-elevation-z0 spaced-button\" color = \"primary\" (click)=\"downloadDictionary(element.id)\">\n                            <app-icon icon=\"download\"></app-icon>\n                        </button>\n                        <button mat-mini-fab class=\"mat-elevation-z0 spaced-button\" color = \"primary\" (click)=\"deleteDictionary(element)\" [disabled] = \"element.isDefault\">\n                            <app-icon matTooltip=\"Vous ne pouvez pas supprimer le dictionnaire par défaut.\" [matTooltipDisabled]=\"!element.isDefault\" icon=\"trash-alt\">\n                            </app-icon>\n                        </button> \n                    </td>\n                </ng-container> \n        \n                <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns()\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: getDisplayedColumns();\"></tr>\n            </table>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'loading'\">\n            <div class=\"loading-container\">\n                <mat-spinner></mat-spinner>\n                <p>Chargement des dictionnaires...</p>\n            </div>\n        </ng-container>\n    </ng-container>\n    <mat-progress-bar *ngIf=\"!isWaitingForServerResponse\" mode=\"indeterminate\"></mat-progress-bar>\n    <mat-paginator [pageSizeOptions] = \"[15, 25, 50]\" [ngClass]=\"{ visible: state === 'ready' }\" showFirstLastButtons></mat-paginator>\n</div>"
        },
        {
            "name": "AdminGameHistoryComponent",
            "id": "component-AdminGameHistoryComponent-43adb2da4014351ccccb40932a7601e5a81fc00f3e2574d2bc179c577c3ab885a0a88f856fbc78f9b6036a119bc80de1aabf996042f7824df13e013c78ff9cfd",
            "file": "src/app/components/admin-game-history/admin-game-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-game-history",
            "styleUrls": [
                "./admin-game-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-game-history.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayGameHistoryColumns",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "columnsControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "columnsItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayGameHistoryColumnsIteratorItem[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<NoId<GameHistoryWithPlayers>>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "selectedColumnsItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayGameHistoryColumnsIteratorItem[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameHistoryState",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "askResetHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColumnIterator",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayGameHistoryColumnsIteratorItem[]",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getDisplayedColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayGameHistoryKeys[]",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDuration",
                    "args": [
                        {
                            "name": "item",
                            "type": "GameHistoryWithPlayers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "GameHistoryWithPlayers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayGameHistoryColumnsIteratorItem[]",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortGameHistory",
                    "args": [
                        {
                            "name": "item",
                            "type": "NoId<GameHistoryWithPlayers>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | number",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NoId<GameHistoryWithPlayers>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateHistoryData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport {\n    DisplayGameHistoryColumns,\n    DisplayGameHistoryColumnsIteratorItem,\n    DisplayGameHistoryKeys,\n    GameHistoryState,\n} from '@app/classes/admin/admin-game-history';\nimport {\n    ADMIN_RESET_HISTORY_TITLE,\n    ADMIN_RESET_MESSAGE,\n    CANCEL,\n    CANCEL_ICON,\n    DEFAULT_GAME_HISTORY_COLUMNS,\n    GAME_HISTORY_COLUMNS,\n    REINITIALIZE,\n    REINITIALIZE_ICON,\n} from '@app/constants/components-constants';\nimport { GameHistoryService } from '@app/services/game-history-service/game-history.service';\nimport { isKey } from '@app/utils/isKey/is-key';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { GameHistoryWithPlayers } from '@common/models/game-history';\nimport { NoId } from '@common/types/no-id';\n\n@Component({\n    selector: 'app-admin-game-history',\n    templateUrl: './admin-game-history.component.html',\n    styleUrls: ['./admin-game-history.component.scss'],\n})\nexport class AdminGameHistoryComponent implements OnInit, AfterViewInit {\n    @ViewChild(MatSort) sort: MatSort;\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n\n    columns: DisplayGameHistoryColumns;\n    columnsItems: DisplayGameHistoryColumnsIteratorItem[];\n    selectedColumnsItems: DisplayGameHistoryColumnsIteratorItem[];\n    columnsControl: FormControl;\n    dataSource: MatTableDataSource<NoId<GameHistoryWithPlayers>>;\n    state: GameHistoryState;\n    error: string | undefined;\n\n    constructor(private readonly dialog: MatDialog, private readonly gameHistoryService: GameHistoryService, private readonly snackBar: MatSnackBar) {\n        this.columns = GAME_HISTORY_COLUMNS;\n        this.columnsItems = this.getColumnIterator();\n        this.selectedColumnsItems = this.getSelectedColumns();\n        this.columnsControl = new FormControl();\n        this.dataSource = new MatTableDataSource(new Array());\n        this.state = GameHistoryState.Loading;\n        this.error = undefined;\n        this.dataSource.sortingDataAccessor = this.sortGameHistory;\n        this.columnsControl.setValue(this.selectedColumnsItems);\n    }\n\n    ngOnInit(): void {\n        this.updateHistoryData();\n    }\n\n    ngAfterViewInit(): void {\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n    }\n\n    askResetHistory(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: ADMIN_RESET_HISTORY_TITLE,\n                content: ADMIN_RESET_MESSAGE,\n                buttons: [\n                    {\n                        content: CANCEL,\n                        closeDialog: true,\n                        icon: CANCEL_ICON,\n                    },\n                    {\n                        content: REINITIALIZE,\n                        action: this.resetHistory.bind(this),\n                        closeDialog: true,\n                        icon: REINITIALIZE_ICON,\n                        style: {\n                            background: 'tomato',\n                        },\n                    },\n                ],\n            },\n        });\n    }\n\n    resetHistory(): void {\n        this.state = GameHistoryState.Loading;\n\n        this.gameHistoryService\n            .resetGameHistories()\n            .then(() => (this.dataSource.data = []))\n            .catch(this.snackBar.open)\n            .finally(() => (this.state = GameHistoryState.Ready));\n    }\n\n    updateHistoryData(): void {\n        this.state = GameHistoryState.Loading;\n\n        this.gameHistoryService\n            .getGameHistories()\n            .then((gameHistories) => {\n                this.dataSource.data = gameHistories;\n                this.state = GameHistoryState.Ready;\n            })\n            .catch((error) => {\n                this.error = error.toString();\n                this.state = GameHistoryState.Error;\n            });\n    }\n\n    getDisplayedColumns(): DisplayGameHistoryKeys[] {\n        return this.selectedColumnsItems.map(({ key }) => key);\n    }\n\n    getDuration(item: GameHistoryWithPlayers): number {\n        return item.endTime.getTime() - item.startTime.getTime();\n    }\n\n    private getColumnIterator(): DisplayGameHistoryColumnsIteratorItem[] {\n        return Object.keys(this.columns).map<DisplayGameHistoryColumnsIteratorItem>((key) => ({\n            key: key as DisplayGameHistoryKeys,\n            label: this.columns[key as DisplayGameHistoryKeys],\n        }));\n    }\n\n    private getSelectedColumns(): DisplayGameHistoryColumnsIteratorItem[] {\n        return DEFAULT_GAME_HISTORY_COLUMNS.map<DisplayGameHistoryColumnsIteratorItem>(\n            (key) => this.columnsItems.find((item) => item.key === key) || { key, label: this.columns[key] },\n        );\n    }\n\n    private sortGameHistory(item: NoId<GameHistoryWithPlayers>, property: string): string | number {\n        switch (property) {\n            case 'player1Name':\n                return item.playersData[0]?.name;\n            case 'player1Score':\n                return item.playersData[0]?.score;\n            case 'player1Data':\n                return item.playersData[0]?.name;\n            case 'player2Name':\n                return item.playersData[1]?.name;\n            case 'player2Score':\n                return item.playersData[1]?.score;\n            case 'player2Data':\n                return item.playersData[1]?.name;\n            case 'startDate':\n                return item.startTime.valueOf();\n            case 'endDate':\n                return item.endTime.valueOf();\n            case 'duration':\n                return item.endTime.valueOf() - item.startTime.valueOf();\n            default:\n                return isKey(property, item) ? (item[property] as string) : '';\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\ntable {\n    width: 100%;\n    margin: 12px 0;\n}\n\n.primary {\n    color: $primary;\n}\n.secondary {\n    opacity: 0.45;\n}\n\n.winner-icon {\n    color: #f6d43c;\n    font-size: 0.75em;\n    vertical-align: middle;\n}\n\n.filter-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    margin: 12px 0;\n\n    mat-form-field {\n        margin-bottom: -22px;\n        width: 33%;\n        min-width: 300px;\n        max-width: 100%;\n    }\n}\n\n.loading-container {\n    padding: 24px 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 1.2em;\n\n    mat-spinner {\n        margin-bottom: 24px;\n    }\n\n    p {\n        margin: 0;\n\n        &.error {\n            color: tomato;\n        }\n        &:not(.error) {\n            opacity: 0.75;\n        }\n    }\n}\n\nmat-paginator:not(.visible) {\n    display: none;\n    visibility: hidden;\n    opacity: 0;\n}\n\n.buttons {\n    button {\n        app-icon {\n            margin-left: 12px;\n        }\n\n        &:not(:last-child) {\n            margin-right: 12px;\n        }\n    }\n}\n\n.no-data-message {\n    text-align: center;\n    opacity: 0.55;\n    margin: 12px 0;\n}\n\n.mat-column-hasBeenAbandoned {\n    text-align: center;\n}",
                    "styleUrl": "./admin-game-history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameHistoryService",
                        "type": "GameHistoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameHistoryService",
                        "type": "GameHistoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div matSort>\n    <div class=\"filter-container\">\n        <div class=\"buttons\">\n            <button mat-flat-button color=\"primary\" (click)=\"askResetHistory()\" [disabled]=\"state !== 'ready'\">Réinitialiser <app-icon icon=\"history\"></app-icon></button>\n            <button mat-flat-button color=\"primary\" (click)=\"updateHistoryData()\" [disabled]=\"state !== 'ready'\">Actualiser <app-icon icon=\"sync\"></app-icon></button>\n        </div>\n\n        <mat-form-field appearance=\"outline\" id=\"column-select\">\n            <mat-label>Colonnes du tableau</mat-label>\n            <mat-select #select [formControl]=\"columnsControl\" [(value)]=\"selectedColumnsItems\" multiple>\n                <mat-option *ngFor=\"let column of columnsItems\" [value]=\"column\">{{column.label}}</mat-option>\n            </mat-select>\n        </mat-form-field>\n     </div>\n\n    <mat-divider></mat-divider>\n\n    <ng-container [ngSwitch]=\"state\">\n        <ng-container *ngSwitchCase=\"'ready'\">\n            <table mat-table [dataSource]=\"dataSource\">\n                <ng-container matColumnDef=\"startDate\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.startDate}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.startTime | date: 'd MMMM yyyy'}} </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"startTime\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.startTime}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.startTime | date: 'h:mm a'}} </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"endDate\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.endDate}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.endTime | date: 'd MMMM yyyy'}} </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"endTime\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.endTime}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.endTime | date: 'h:mm a'}} </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"duration\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.duration}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{getDuration(element) | duration}} </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"player1Name\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.player1Name}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.playersData[0].name}} <app-icon *ngIf=\"element.playersData[0].isWinner\" class=\"winner-icon\" icon=\"trophy\" styling=\"solid\"></app-icon> </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"player1Score\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.player1Score}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.playersData[0]?.score}} <app-icon *ngIf=\"element.playersData[0].isWinner\" class=\"winner-icon\" icon=\"trophy\" styling=\"solid\"></app-icon> </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"playersData[0]\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.player1Data}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.playersData[0]?.name}} ({{element.playersData[0]?.score}} points) <app-icon *ngIf=\"element.playersData[0].isWinner\" class=\"winner-icon\" icon=\"trophy\" styling=\"solid\"></app-icon> \n                    </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"player2Name\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.player2Name}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.playersData[1]?.name}} <app-icon *ngIf=\"element.playersData[1]?.isWinner\" class=\"winner-icon\" icon=\"trophy\" styling=\"solid\"></app-icon></td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"player2Score\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.player2Score}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.playersData[1]?.score}} <app-icon *ngIf=\"element.playersData[1]?.isWinner\" class=\"winner-icon\" icon=\"trophy\" styling=\"solid\"></app-icon> </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"playersData[1]\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.player2Data}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.playersData[1]?.name}} ({{element.playersData[1].score}} points) <app-icon *ngIf=\"element.playersData[1].isWinner\" class=\"winner-icon\" icon=\"trophy\" styling=\"solid\"></app-icon> \n                    </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"gameType\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.gameType}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.gameType}} </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"gameMode\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.gameMode}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.gameMode}} </td>\n                </ng-container>\n        \n                <ng-container matColumnDef=\"hasBeenAbandoned\">\n                    <th mat-header-cell mat-sort-header *matHeaderCellDef> {{columns.hasBeenAbandoned}} </th>\n                    <td mat-cell *matCellDef=\"let element\">\n                        <span *ngIf=\"element.hasBeenAbandoned\" class=\"primary\">\n                            <app-icon icon=\"check\"></app-icon>\n                        </span>\n                        <span *ngIf=\"!element.hasBeenAbandoned\" class=\"secondary\">\n                            <app-icon icon=\"times\"></app-icon>\n                        </span>\n                </ng-container>\n        \n                <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns()\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: getDisplayedColumns();\"></tr>\n            </table>\n\n            <p *ngIf=\"dataSource.data.length === 0\" class=\"no-data-message\">Aucun historique de partie à afficher.<br>Jouez une partie pour la voir affichée ici.</p>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'loading'\">\n            <div class=\"loading-container\">\n                <mat-spinner></mat-spinner>\n                <p>Chargement de l'historique des parties...</p>\n            </div>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'error'\">\n            <div class=\"loading-container\">\n                <p class=\"error\">{{ error }}</p>\n            </div>\n        </ng-container>\n    </ng-container>\n\n    <mat-paginator [pageSizeOptions]=\"[15, 25, 50]\" [ngClass]=\"{ visible: state === 'ready' }\" showFirstLastButtons></mat-paginator>\n</div>\n"
        },
        {
            "name": "AdminHighScoresComponent",
            "id": "component-AdminHighScoresComponent-55fc0104c05138f2a89313ea2a1dcc5caba5648ecbf2ec4c5bd4fd5125796e330d2debae51dd46571cbadc62c4dbaac701bf8a71f5f633fb4ffdfecab5068232",
            "file": "src/app/components/admin-high-scores/admin-high-scores.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-high-scores",
            "styleUrls": [
                "./admin-high-scores.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-high-scores.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "askResetVirtualPlayers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getClassicHighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "SingleHighScore[]",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLog2990HighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "SingleHighScore[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetHighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    ADMIN_RESET_HIGH_SCORE_TITLE,\n    ADMIN_RESET_MESSAGE,\n    CANCEL,\n    CANCEL_ICON,\n    REINITIALIZE,\n    REINITIALIZE_ICON,\n} from '@app/constants/components-constants';\nimport { GameType } from '@app/constants/game-type';\nimport HighScoresService from '@app/services/high-score-service/high-score.service';\nimport { Subject } from 'rxjs';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { SingleHighScore } from '@common/models/high-score';\n\n@Component({\n    selector: 'app-admin-high-scores',\n    templateUrl: './admin-high-scores.component.html',\n    styleUrls: ['./admin-high-scores.component.scss'],\n})\nexport class AdminHighScoresComponent implements OnInit, OnDestroy {\n    isInitialized: boolean = false;\n\n    private componentDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(private readonly dialog: MatDialog, private readonly highScoresService: HighScoresService) {}\n\n    ngOnInit(): void {\n        this.highScoresService.handleHighScoresRequest();\n        this.highScoresService.subscribeToInitializedHighScoresListEvent(this.componentDestroyed$, () => {\n            this.isInitialized = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    getClassicHighScores(): SingleHighScore[] {\n        return this.highScoresService.getHighScores(GameType.Classic);\n    }\n\n    getLog2990HighScores(): SingleHighScore[] {\n        return this.highScoresService.getHighScores(GameType.LOG2990);\n    }\n\n    askResetVirtualPlayers(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: ADMIN_RESET_HIGH_SCORE_TITLE,\n                content: ADMIN_RESET_MESSAGE,\n                buttons: [\n                    {\n                        content: CANCEL,\n                        closeDialog: true,\n                        icon: CANCEL_ICON,\n                    },\n                    {\n                        content: REINITIALIZE,\n                        action: this.resetHighScores.bind(this),\n                        closeDialog: true,\n                        icon: REINITIALIZE_ICON,\n                        style: {\n                            background: 'tomato',\n                        },\n                    },\n                ],\n            },\n        });\n    }\n\n    resetHighScores(): void {\n        this.highScoresService.resetHighScores();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n$border-radius: 6px;\n\n::ng-deep body {\n    background: $page-background;\n}\n\n.center {\n    display: grid;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.page {\n    margin: 25px;\n    text-align: left;\n\n    .container {\n        display: flex;\n        flex-direction: row;\n        padding-top: 30px;\n        gap: 15px;\n        justify-content: space-between;\n        text-align: center;\n\n        .title {\n            font-size: x-large;\n            font-weight: bold;\n            color: $primary;\n        }\n\n        .high-scores-box {\n            width: 500px;\n            border: solid 1px rgb(133, 133, 133);\n            border-radius: 4px;\n\n            #high-scores-header {\n                display: grid;\n                grid-template-columns: 1fr 2fr 1fr;\n                justify-self: center;\n                width: 100%;\n                vertical-align: middle;\n                height: 50px;\n                font-weight: bold;\n\n                box-sizing: border-box;\n                border-bottom: solid 1px rgb(133, 133, 133);\n\n                .rank,\n                .score,\n                .name {\n                    display: flex;\n                    align-items: center;\n                    font-size: larger;\n                    text-align: right;\n                    justify-content: center;\n                    box-sizing: border-box;\n                }\n            }\n\n            .high-score {\n                display: grid;\n                grid-template-columns: 1fr 2fr 1fr;\n                align-self: center;\n                justify-content: center;\n                align-items: center;\n                height: 50px;\n                font-family: Roboto, 'Helvetica Neue', sans-serif;\n\n                .rank,\n                .score,\n                .name {\n                    display: flex;\n                    align-items: center;\n                    font-size: larger;\n                    text-align: right;\n                    justify-content: center;\n                    box-sizing: border-box;\n                }\n            }\n\n            .high-score:nth-child(2n) {\n                background-color: rgba($primary, 0.15);\n            }\n        }\n\n        .buttons {\n            display: flex;\n            justify-content: right;\n\n            button {\n                font-size: 1.2em;\n                padding: 6px 16px;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./admin-high-scores.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "highScoresService",
                        "type": "HighScoresService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "highScoresService",
                        "type": "HighScoresService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n    <button class=\"button\" mat-flat-button color=\"primary\" (click)=\"askResetVirtualPlayers()\">\n        Réinitialiser\n        <app-icon class=\"icon\" icon=\"history\"></app-icon>\n    </button>\n    <div class=\"container\" *ngIf=\"isInitialized\">\n        <div class=\"high-scores-container\">\n            <p class=\"title\">Classique</p>\n            <div class=\"high-scores-box\">\n                <div id=\"high-scores-header\">\n                    <div class=\"rank\">Classement</div>\n                    <div class=\"name\">Nom</div>\n                    <div class=\"score\">Score</div>\n                </div>\n                <div class=\"high-score\" *ngFor=\"let highScore of getClassicHighScores()\">\n                    <div class=\"rank\">\n                        {{ highScore.rank }}\n                    </div>\n                    <div class=\"name\">\n                        {{ highScore.name }}\n                    </div>\n                    <div class=\"score\">\n                        {{ highScore.score }}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"high-scores-container\">\n            <p class=\"title\">LOG2990</p>\n            <div class=\"high-scores-box\">\n                <div id=\"high-scores-header\">\n                    <div class=\"rank\">Classement</div>\n                    <div class=\"name\">Nom</div>\n                    <div class=\"score\">Score</div>\n                </div>\n                <div class=\"high-score\" *ngFor=\"let highScore of getLog2990HighScores()\">\n                    <div class=\"rank\">\n                        {{ highScore.rank }}\n                    </div>\n                    <div class=\"name\">\n                        {{ highScore.name }}\n                    </div>\n                    <div class=\"score\">\n                        {{ highScore.score }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "AdminPageComponent",
            "id": "component-AdminPageComponent-e2856f461c908bf4a479a0e374894962d490a7fc32eef3c6daf359e359d62ac0fdf1ca2c3262d9825ecddd859b520dd68fc96351c7fb3fe4f37dae3020e37873",
            "file": "src/app/pages/admin-page/admin-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-page",
            "styleUrls": [
                "./admin-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTab",
                    "defaultValue": "DEFAULT_ADMIN_TAB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdminTabs",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedTabChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatTabChangeEvent } from '@angular/material/tabs';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nenum AdminTabs {\n    GameHistory = 0,\n    Dictionary = 1,\n    VirtualPlayer = 2,\n    HighScores = 3,\n}\n\nexport const DEFAULT_ADMIN_TAB = AdminTabs.GameHistory;\n\n@Component({\n    selector: 'app-admin-page',\n    templateUrl: './admin-page.component.html',\n    styleUrls: ['./admin-page.component.scss'],\n})\nexport class AdminPageComponent implements OnInit {\n    selectedTab: AdminTabs = DEFAULT_ADMIN_TAB;\n\n    constructor(private route: ActivatedRoute, private router: Router) {}\n\n    ngOnInit(): void {\n        this.route.queryParams.subscribe((params) => {\n            const tab: string | undefined = params.tab;\n\n            if (!tab) return;\n\n            const tabIndex = Number.parseInt(tab, 10);\n            if (Number.isSafeInteger(tabIndex)) this.selectedTab = tabIndex as AdminTabs;\n        });\n    }\n\n    selectedTabChange(event: MatTabChangeEvent): void {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: {\n                tab: event.index,\n            },\n            queryParamsHandling: 'merge',\n            skipLocationChange: false,\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n::ng-deep body {\n    background: $page-background;\n}\n\n.page {\n    height: 100%;\n    width: 100%;\n\n    #content {\n        padding-top: $header-height + 12px;\n        max-width: $page-max-width;\n        margin: 0 auto;\n    }\n}",
                    "styleUrl": "./admin-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page\">\n    <app-page-header title=\"Admin\"></app-page-header>\n\n    <div id=\"content\">\n        <mat-card>\n            <mat-tab-group [selectedIndex]=\"selectedTab\" (selectedTabChange)=\"selectedTabChange($event)\">\n                <mat-tab label=\"Historique des parties\">\n                    <app-admin-game-history></app-admin-game-history>\n                </mat-tab>\n                <mat-tab label=\"Dictionnaire\">\n                    <app-admin-dictionaries></app-admin-dictionaries>\n                </mat-tab>\n                <mat-tab label=\"Joueurs virtuels\">\n                    <app-admin-virtual-players></app-admin-virtual-players>\n                </mat-tab>\n                <mat-tab label=\"Meilleurs scores\">\n                    <app-admin-high-scores></app-admin-high-scores>\n                </mat-tab>\n            </mat-tab-group>\n        </mat-card>\n    </div>\n</div>\n"
        },
        {
            "name": "AdminVirtualPlayersComponent",
            "id": "component-AdminVirtualPlayersComponent-8ed41343d687d47b1bc8649859e0dff5931c39856e4dc0436ee05634851e89917916b9e6dad8e5612108b99b848f025ea6e42598d06106ff14c18cfb110d0c98",
            "file": "src/app/components/admin-virtual-players/admin-virtual-players.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-virtual-players",
            "styleUrls": [
                "./admin-virtual-players.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-virtual-players.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayVirtualPlayersColumns",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "columnsItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayVirtualPlayersColumnsIteratorItem[]",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dataSourceBeginner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<VirtualPlayer>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "dataSourceExpert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<VirtualPlayer>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isWaitingForServerResponse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "sortBeginner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "sortExpert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VirtualPlayersComponentState",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "askResetVirtualPlayers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "convertVirtualPlayerProfilesToMatDataSource",
                    "args": [
                        {
                            "name": "virtualPlayerProfiles",
                            "type": "VirtualPlayer[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerProfiles",
                            "type": "VirtualPlayer[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createVirtualPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteVirtualPlayer",
                    "args": [
                        {
                            "name": "virtualPlayerProfile",
                            "type": "VirtualPlayer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerProfile",
                            "type": "VirtualPlayer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnIterator",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayVirtualPlayersColumnsIteratorItem[]",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDisplayedColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayVirtualPlayersKeys[]",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isFeedbackPositive",
                    "args": [
                        {
                            "name": "response",
                            "type": "PositiveFeedback",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PositiveFeedbackResponse",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "PositiveFeedback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetVirtualPlayers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateVirtualPlayer",
                    "args": [
                        {
                            "name": "virtualPlayerProfile",
                            "type": "VirtualPlayer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerProfile",
                            "type": "VirtualPlayer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { CreateVirtualPlayerComponent } from '@app/components/create-virtual-player-dialog/create-virtual-player-dialog.component';\nimport { DeleteVirtualPlayerDialogComponent } from '@app/components/delete-virtual-player-dialog/delete-virtual-player-dialog.component';\nimport { UpdateVirtualPlayerComponent } from '@app/components/update-virtual-player-dialog/update-virtual-player-dialog.component';\nimport {\n    ADMIN_RESET_MESSAGE,\n    ADMIN_RESET_VIRTUAL_PLAYER_TITLE,\n    CANCEL,\n    CANCEL_ICON,\n    REINITIALIZE,\n    REINITIALIZE_ICON,\n    VIRTUAL_PLAYERS_COLUMNS,\n} from '@app/constants/components-constants';\nimport {\n    CREATE_VIRTUAL_PLAYER_DIALOG_HEIGHT,\n    CREATE_VIRTUAL_PLAYER_DIALOG_WIDTH,\n    PositiveFeedbackResponse,\n    UPDATE_VIRTUAL_PLAYER_DIALOG_HEIGHT,\n    UPDATE_VIRTUAL_PLAYER_DIALOG_WIDTH,\n} from '@app/constants/dialogs-constants';\nimport { SNACK_BAR_ERROR_DURATION, SNACK_BAR_SUCCESS_DURATION } from '@app/constants/dictionaries-components';\nimport { PositiveFeedback } from '@app/constants/virtual-players-components-constants';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\nimport { Subject } from 'rxjs';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport {\n    DeleteVirtualPlayerDialogParameters,\n    DisplayVirtualPlayersColumns,\n    DisplayVirtualPlayersColumnsIteratorItem,\n    DisplayVirtualPlayersKeys,\n    UpdateVirtualPlayersDialogParameters,\n    VirtualPlayersComponentState,\n} from './admin-virtual-players.types';\nimport { VirtualPlayer } from '@common/models/virtual-player';\n\n@Component({\n    selector: 'app-admin-virtual-players',\n    templateUrl: './admin-virtual-players.component.html',\n    styleUrls: ['./admin-virtual-players.component.scss'],\n})\nexport class AdminVirtualPlayersComponent implements OnInit, OnDestroy {\n    @ViewChild(MatSort) sortBeginner: MatSort;\n    @ViewChild(MatSort) sortExpert: MatSort;\n    columns: DisplayVirtualPlayersColumns;\n    dataSourceBeginner: MatTableDataSource<VirtualPlayer>;\n    dataSourceExpert: MatTableDataSource<VirtualPlayer>;\n    state: VirtualPlayersComponentState;\n    error: string | undefined;\n    isWaitingForServerResponse: boolean;\n    private columnsItems: DisplayVirtualPlayersColumnsIteratorItem[];\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(public dialog: MatDialog, private virtualPlayerProfilesService: VirtualPlayerProfilesService, private snackBar: MatSnackBar) {\n        this.componentDestroyed$ = new Subject();\n        this.columns = VIRTUAL_PLAYERS_COLUMNS;\n        this.columnsItems = this.getColumnIterator();\n        this.dataSourceBeginner = new MatTableDataSource(new Array());\n        this.dataSourceExpert = new MatTableDataSource(new Array());\n        this.state = VirtualPlayersComponentState.Loading;\n        this.error = undefined;\n\n        this.initializeSubscriptions();\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    ngOnInit(): void {\n        this.virtualPlayerProfilesService.getAllVirtualPlayersProfile();\n    }\n\n    updateVirtualPlayer(virtualPlayerProfile: VirtualPlayer): void {\n        const virtualPlayerData: UpdateVirtualPlayersDialogParameters = {\n            name: virtualPlayerProfile.name,\n            level: virtualPlayerProfile.level as VirtualPlayerLevel,\n            idVirtualPlayer: virtualPlayerProfile.idVirtualPlayer,\n        };\n        this.dialog.open(UpdateVirtualPlayerComponent, {\n            data: virtualPlayerData,\n            height: UPDATE_VIRTUAL_PLAYER_DIALOG_HEIGHT,\n            width: UPDATE_VIRTUAL_PLAYER_DIALOG_WIDTH,\n        });\n    }\n\n    createVirtualPlayer(): void {\n        this.dialog.open(CreateVirtualPlayerComponent, {\n            height: CREATE_VIRTUAL_PLAYER_DIALOG_HEIGHT,\n            width: CREATE_VIRTUAL_PLAYER_DIALOG_WIDTH,\n        });\n    }\n\n    deleteVirtualPlayer(virtualPlayerProfile: VirtualPlayer): void {\n        this.dialog.open(DeleteVirtualPlayerDialogComponent, {\n            data: {\n                name: virtualPlayerProfile.name,\n                level: virtualPlayerProfile.level,\n                idVirtualPlayer: virtualPlayerProfile.idVirtualPlayer,\n                // We haven't been able to test that the right function is called because this\n                // arrow function creates a new instance of the function. We cannot spy on it.\n                // It totally works tho, try it!\n                onClose: () => {\n                    this.isWaitingForServerResponse = true;\n                },\n            } as DeleteVirtualPlayerDialogParameters,\n        });\n    }\n\n    askResetVirtualPlayers(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: ADMIN_RESET_VIRTUAL_PLAYER_TITLE,\n                content: ADMIN_RESET_MESSAGE,\n                buttons: [\n                    {\n                        content: CANCEL,\n                        closeDialog: true,\n                        icon: CANCEL_ICON,\n                    },\n                    {\n                        content: REINITIALIZE,\n                        action: this.resetVirtualPlayers.bind(this),\n                        closeDialog: true,\n                        icon: REINITIALIZE_ICON,\n                        style: {\n                            background: 'tomato',\n                        },\n                    },\n                ],\n            },\n        });\n    }\n\n    resetVirtualPlayers(): void {\n        this.virtualPlayerProfilesService.resetVirtualPlayerProfiles();\n    }\n\n    getColumnIterator(): DisplayVirtualPlayersColumnsIteratorItem[] {\n        return Object.keys(this.columns).map<DisplayVirtualPlayersColumnsIteratorItem>((key) => ({\n            key: key as DisplayVirtualPlayersKeys,\n            label: this.columns[key as DisplayVirtualPlayersKeys],\n        }));\n    }\n\n    getDisplayedColumns(): DisplayVirtualPlayersKeys[] {\n        return this.columnsItems.map(({ key }) => key);\n    }\n\n    private convertVirtualPlayerProfilesToMatDataSource(virtualPlayerProfiles: VirtualPlayer[]): void {\n        this.dataSourceBeginner.data = virtualPlayerProfiles.filter((profile) => {\n            return profile.level === VirtualPlayerLevel.Beginner;\n        });\n        this.dataSourceExpert.data = virtualPlayerProfiles.filter((profile) => {\n            return profile.level === VirtualPlayerLevel.Expert;\n        });\n    }\n\n    private initializeSubscriptions(): void {\n        this.virtualPlayerProfilesService.subscribeToVirtualPlayerProfilesUpdateEvent(this.componentDestroyed$, (profiles) => {\n            this.convertVirtualPlayerProfilesToMatDataSource(profiles);\n            this.state = VirtualPlayersComponentState.Ready;\n            this.isWaitingForServerResponse = false;\n        });\n\n        this.virtualPlayerProfilesService.subscribeToRequestSentEvent(this.componentDestroyed$, () => {\n            this.isWaitingForServerResponse = true;\n        });\n\n        this.virtualPlayerProfilesService.subscribeToComponentUpdateEvent(this.componentDestroyed$, (response) => {\n            this.snackBar.open(response, 'OK', this.isFeedbackPositive(response as PositiveFeedback));\n        });\n    }\n\n    private isFeedbackPositive(response: PositiveFeedback): PositiveFeedbackResponse {\n        return Object.values(PositiveFeedback).includes(response as PositiveFeedback)\n            ? { duration: SNACK_BAR_SUCCESS_DURATION, panelClass: ['success'] }\n            : { duration: SNACK_BAR_ERROR_DURATION, panelClass: ['error'] };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\ntable {\n    width: 100%;\n    margin-bottom: 12px;\n}\n\n.primary {\n    color: $primary;\n}\n.secondary {\n    opacity: 0.45;\n}\n\n.filter-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    margin: 12px 0;\n\n    mat-form-field {\n        margin-bottom: -22px;\n        width: 33%;\n        min-width: 300px;\n        max-width: 100%;\n    }\n}\n\n.spaced-button {\n    margin: 2px;\n}\n\n.loading-container {\n    padding: 24px 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 1.2em;\n\n    mat-spinner {\n        margin-bottom: 24px;\n    }\n\n    p {\n        margin: 0;\n\n        &.error {\n            color: tomato;\n        }\n        &:not(.error) {\n            opacity: 0.75;\n        }\n    }\n}\n\nmat-paginator:not(.visible) {\n    display: none;\n    visibility: hidden;\n    opacity: 0;\n}\n\n.left-cell {\n    text-align: left !important;\n}\n\n.right-cell {\n    text-align: right !important;\n}\n\nth.mat-header-container {\n    text-align: center !important;\n}\n\n.mat-column-name {\n    width: 400px;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.icon {\n    margin-left: 12px;\n}\n\n.horizontal-layout {\n    display :flex;\n    flex-direction: row;\n    justify-content: space-between;\n}\n\n.mat-header-row {\n    height: 40px;\n}\nh2 {\n    text-align: center;\n    padding-top: 0.5em;\n    margin-bottom: 0em;\n}\n\n::ng-deep snack-bar-container.success {\n    background: lighten($primary, 70%);\n    color: $primary;\n    \n    button {\n        color: $primary;\n    }\n}\n::ng-deep snack-bar-container.error {\n    background: lighten(tomato, 30%);\n    color: tomato;\n    \n    button {\n        color: tomato;\n    }\n}\n",
                    "styleUrl": "./admin-virtual-players.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\n    <div class=\"filter-container\">\n        <button mat-flat-button color=\"primary\" (click)=\"askResetVirtualPlayers()\" [disabled]=\"state !== 'ready'\">\n            Réinitialiser\n            <app-icon class=\"icon\" icon=\"history\"></app-icon>\n        </button>\n        <button mat-flat-button color=\"primary\" (click)=\"createVirtualPlayer()\">\n            Ajouter un joueur virtuel\n            <app-icon class=\"icon\" icon=\"plus-circle\" styling=\"solid\" size=\"lg\"></app-icon>\n        </button>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <ng-container [ngSwitch]=\"state\">\n        <ng-container *ngSwitchCase=\"'ready'\">\n            <div class=\"horizontal-layout\">\n                <div class=\"table-container\">\n                    <h2>Joueurs débutants</h2>\n                    <table mat-table [dataSource]=\"dataSourceBeginner\">\n                        <ng-container matColumnDef=\"name\">\n                            <th mat-header-cell *matHeaderCellDef>{{ columns.name }}</th>\n                            <td mat-cell class=\"left-cell\" *matCellDef=\"let element\">{{ element.name }}</td>\n                        </ng-container>\n\n                        <ng-container matColumnDef=\"actions\">\n                            <th mat-header-cell *matHeaderCellDef>{{ columns.actions }}</th>\n                            <td mat-cell class=\"right-cell\" *matCellDef=\"let element\">\n                                <button\n                                    mat-mini-fab\n                                    class=\"mat-elevation-z0 spaced-button\"\n                                    color=\"primary\"\n                                    (click)=\"updateVirtualPlayer(element)\"\n                                    [disabled]=\"element.isDefault\"\n                                >\n                                    <app-icon\n                                        icon=\"pencil\"\n                                        matTooltip=\"Vous ne pouvez pas modifier un joueur virtuel par défaut.\"\n                                        [matTooltipDisabled]=\"!element.isDefault\"\n                                    >\n                                    </app-icon>\n                                </button>\n                                <button\n                                    mat-mini-fab\n                                    class=\"mat-elevation-z0 spaced-button\"\n                                    color=\"primary\"\n                                    (click)=\"deleteVirtualPlayer(element)\"\n                                    [disabled]=\"element.isDefault\"\n                                >\n                                    <app-icon\n                                        icon=\"trash-alt\"\n                                        matTooltip=\"Vous ne pouvez pas supprimer un joueur virtuel par défaut.\"\n                                        [matTooltipDisabled]=\"!element.isDefault\"\n                                    >\n                                    </app-icon>\n                                </button>\n                            </td>\n                        </ng-container>\n\n                        <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns()\"></tr>\n                        <tr mat-row *matRowDef=\"let row; columns: getDisplayedColumns()\"></tr>\n                    </table>\n                </div>\n                <div>\n                    <h2>Joueurs experts</h2>\n                    <table mat-table [dataSource]=\"dataSourceExpert\">\n                        <ng-container matColumnDef=\"name\">\n                            <th mat-header-cell *matHeaderCellDef>{{ columns.name }}</th>\n                            <td mat-cell class=\"left-cell\" *matCellDef=\"let element\">{{ element.name }}</td>\n                        </ng-container>\n\n                        <ng-container matColumnDef=\"actions\">\n                            <th mat-header-cell *matHeaderCellDef>{{ columns.actions }}</th>\n                            <td mat-cell class=\"right-cell\" *matCellDef=\"let element\">\n                                <button\n                                    mat-mini-fab\n                                    class=\"mat-elevation-z0 spaced-button\"\n                                    color=\"primary\"\n                                    (click)=\"updateVirtualPlayer(element)\"\n                                    [disabled]=\"element.isDefault\"\n                                >\n                                    <app-icon\n                                        icon=\"pencil\"\n                                        matTooltip=\"Vous ne pouvez pas modifier un joueur virtuel par défaut.\"\n                                        [matTooltipDisabled]=\"!element.isDefault\"\n                                    >\n                                    </app-icon>\n                                </button>\n                                <button\n                                    mat-mini-fab\n                                    class=\"mat-elevation-z0 spaced-button\"\n                                    color=\"primary\"\n                                    (click)=\"deleteVirtualPlayer(element)\"\n                                    [disabled]=\"element.isDefault\"\n                                >\n                                    <app-icon\n                                        icon=\"trash-alt\"\n                                        matTooltip=\"Vous ne pouvez pas supprimer un joueur virtuel par défaut.\"\n                                        [matTooltipDisabled]=\"!element.isDefault\"\n                                    >\n                                    </app-icon>\n                                </button>\n                            </td>\n                        </ng-container>\n\n                        <tr mat-header-row *matHeaderRowDef=\"getDisplayedColumns()\"></tr>\n                        <tr mat-row *matRowDef=\"let row; columns: getDisplayedColumns()\"></tr>\n                    </table>\n                </div>\n            </div>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'loading'\">\n            <div class=\"loading-container\">\n                <mat-spinner></mat-spinner>\n                <p>Chargement des profils de joueurs virtuels...</p>\n            </div>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'error'\">\n            <div class=\"loading-container\">\n                <p class=\"error\">{{ error }}</p>\n            </div>\n        </ng-container>\n    </ng-container>\n    <mat-progress-bar *ngIf=\"isWaitingForServerResponse\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b4a7fd503f67ba72e8c46d462a2f5ac4bf2602f59722ea33759dc6986f8e338d1abfb19c27b7e4852228054ecec2f881e61302497d70202a3062f678c9e33f57",
            "file": "src/app/pages/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "InitializeState.Loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InitializeState",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "states",
                    "defaultValue": "InitializeState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "handleNewState",
                    "args": [
                        {
                            "name": "state",
                            "type": "InitializeState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "InitializeState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { InitializeState } from '@app/classes/connection-state-service/connection-state';\nimport { InitializerService } from '@app/services/initializer-service/initializer.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnDestroy {\n    states: typeof InitializeState = InitializeState;\n    state: InitializeState = InitializeState.Loading;\n    private componentDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(private readonly initializer: InitializerService) {\n        this.initializer.subscribe(this.componentDestroyed$, this.handleNewState.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    handleNewState(state: InitializeState): void {\n        this.state = state;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initializer",
                        "type": "InitializerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "initializer",
                        "type": "InitializerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-container [ngSwitch]=\"state\">\n    <router-outlet *ngSwitchCase=\"states.Ready\"></router-outlet>\n\n    <app-loading-page *ngSwitchCase=\"states.Loading\"></app-loading-page>\n\n    <app-loading-page *ngSwitchCase=\"states.ServerNotReachable\" [error]=\"state\" [isTrying]=\"true\"></app-loading-page>\n\n    <app-loading-page *ngSwitchDefault [error]=\"state\"></app-loading-page>\n\n    <app-chatbox-container *ngSwitchCase=\"states.Ready\"></app-chatbox-container>\n</ng-container>\n\n"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-8663c539ed2a4d233ea6baec2c5913b25dd296f27dd39cd58c7166d7aa90201758f65ff8da261972b43c49738123cd00ba4bb7decd1872e1b91a2f29bb57d4ea",
            "file": "src/app/components/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [
                "./board.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gridSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vec2",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "marginColumnSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "marginLetters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "navigator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardNavigator",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "newlyPlacedTiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SquareView[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "notAppliedSquares",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SquareView[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SquareView | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "squareGrid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SquareView[][]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tileFontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "focusableComponentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "focusableEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "loseFocusEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "areTilesUsed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "canBackspace",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "canPlace",
                    "args": [
                        {
                            "name": "squareView",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "squareView",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCursor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clearNewlyPlacedTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSquare",
                    "args": [
                        {
                            "name": "board",
                            "type": "Square[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Square",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Square[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleBackspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handlePlaceLetter",
                    "args": [
                        {
                            "name": "letter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isUppercase",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "squareView",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "letter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isUppercase",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "squareView",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePlaceTiles",
                    "args": [
                        {
                            "name": "payload",
                            "type": "PlaceActionPayload | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "PlaceActionPayload | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasBoardBeenUpdated",
                    "args": [
                        {
                            "name": "squaresToUpdate",
                            "type": "Square[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "squaresToUpdate",
                            "type": "Square[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeBoard",
                    "args": [
                        {
                            "name": "board",
                            "type": "Square[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "board",
                            "type": "Square[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInBounds",
                    "args": [
                        {
                            "name": "position",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "Position",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSamePosition",
                    "args": [
                        {
                            "name": "square1",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "square2",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "square1",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "square2",
                            "type": "SquareView | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusableEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "onLoseFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "onSquareClick",
                    "args": [
                        {
                            "name": "squareView",
                            "type": "SquareView",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "squareView",
                            "type": "SquareView",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeUsedTile",
                    "args": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "squaresToUpdate",
                            "type": "Square[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "squaresToUpdate",
                            "type": "Square[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "useTile",
                    "args": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitFocusableEvent",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "emitLoseFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToFocusableEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToLoseFocusEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "unsubscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActionType, PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { Orientation } from '@app/classes/actions/orientation';\nimport { BoardNavigator } from '@app/classes/board-navigator/board-navigator';\nimport Direction from '@app/classes/board-navigator/direction';\nimport { Position } from '@app/classes/board-navigator/position';\nimport { Vec2 } from '@app/classes/board-navigator/vec2';\nimport { FocusableComponent } from '@app/classes/focusable-component/focusable-component';\nimport { Square, SquareView } from '@app/classes/square';\nimport { LetterValue, Tile } from '@app/classes/tile';\nimport { CANNOT_REMOVE_UNUSED_TILE } from '@app/constants/component-errors';\nimport { BACKSPACE, ENTER, ESCAPE, KEYDOWN, NOT_FOUND } from '@app/constants/components-constants';\nimport { BLANK_TILE_LETTER_VALUE, LETTER_VALUES, MARGIN_COLUMN_SIZE, SQUARE_SIZE, UNDEFINED_SQUARE } from '@app/constants/game-constants';\nimport { SQUARE_TILE_DEFAULT_FONT_SIZE } from '@app/constants/tile-font-size-constants';\nimport { BoardService, GameService } from '@app/services/';\nimport { ActionService } from '@app/services/action-service/action.service';\nimport { FocusableComponentsService } from '@app/services/focusable-components-service/focusable-components.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport RoundManagerService from '@app/services/round-manager-service/round-manager.service';\nimport { removeAccents } from '@app/utils/remove-accents/remove-accents';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-board',\n    templateUrl: './board.component.html',\n    styleUrls: ['./board.component.scss'],\n})\nexport class BoardComponent extends FocusableComponent<KeyboardEvent> implements OnInit, OnDestroy {\n    readonly marginColumnSize: number;\n    gridSize: Vec2;\n    marginLetters: LetterValue[];\n    squareGrid: SquareView[][];\n    tileFontSize: number;\n    selectedSquare: SquareView | undefined;\n    navigator: BoardNavigator;\n\n    private notAppliedSquares: SquareView[];\n    private newlyPlacedTiles: SquareView[];\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(\n        private boardService: BoardService,\n        private gameService: GameService,\n        private gameViewEventManagerService: GameViewEventManagerService,\n        private roundManagerService: RoundManagerService,\n        private focusableComponentService: FocusableComponentsService,\n        private actionService: ActionService,\n    ) {\n        super();\n        this.marginColumnSize = MARGIN_COLUMN_SIZE;\n        this.gridSize = { x: 0, y: 0 };\n        this.marginLetters = LETTER_VALUES.slice(0, this.gridSize.x);\n        this.squareGrid = [];\n        this.notAppliedSquares = [];\n        this.tileFontSize = SQUARE_TILE_DEFAULT_FONT_SIZE;\n        this.selectedSquare = undefined;\n        this.newlyPlacedTiles = [];\n        this.componentDestroyed$ = new Subject<boolean>();\n    }\n\n    ngOnInit(): void {\n        this.boardService.subscribeToInitializeBoard(this.componentDestroyed$, (board: Square[][]) => this.initializeBoard(board));\n        this.boardService.subscribeToBoardUpdate(this.componentDestroyed$, (squaresToUpdate: Square[]) => this.updateBoard(squaresToUpdate));\n        this.gameViewEventManagerService.subscribeToGameViewEvent('usedTiles', this.componentDestroyed$, (payload) => this.handlePlaceTiles(payload));\n        this.roundManagerService.subscribeToEndRoundEvent(this.componentDestroyed$, () => this.clearCursor());\n\n        if (!this.boardService.readInitialBoard()) return;\n        this.initializeBoard(this.boardService.readInitialBoard());\n        this.subscribeToFocusableEvents();\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n        this.unsubscribeToFocusableEvents();\n    }\n\n    onSquareClick(squareView: SquareView): boolean {\n        this.focusableComponentService.setActiveKeyboardComponent(this);\n\n        if (squareView.square.tile !== null) return false;\n        if (!this.gameService.isLocalPlayerPlaying()) return false;\n        if (this.actionService.hasActionBeenPlayed) {\n            this.clearCursor();\n            return false;\n        }\n\n        if (this.selectedSquare === squareView && this.notAppliedSquares.length === 0) {\n            this.navigator.switchOrientation();\n        } else {\n            this.selectedSquare = squareView;\n            this.navigator.orientation = Orientation.Horizontal;\n            this.navigator.setPosition(squareView.square.position);\n        }\n\n        this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n\n        return true;\n    }\n\n    isSamePosition(square1: SquareView | undefined, square2: SquareView | undefined): boolean {\n        return (\n            square1 !== undefined &&\n            square2 !== undefined &&\n            square1.square.position.row === square2.square.position.row &&\n            square1.square.position.column === square2.square.position.column\n        );\n    }\n\n    clearNewlyPlacedTiles(): void {\n        this.newlyPlacedTiles.forEach((squareView) => (squareView.newlyPlaced = false));\n        this.newlyPlacedTiles = [];\n    }\n\n    protected onFocusableEvent(event: KeyboardEvent): void {\n        switch (event.key) {\n            case BACKSPACE:\n                if (event.type === KEYDOWN) this.handleBackspace();\n                break;\n            case ESCAPE:\n                if (event.type === KEYDOWN) this.clearCursor();\n                break;\n            case ENTER:\n                this.handleEnter();\n                break;\n            default:\n                this.handlePlaceLetter(event.key, event.shiftKey, this.selectedSquare);\n        }\n    }\n\n    protected onLoseFocusEvent(): void {\n        this.clearCursor();\n    }\n\n    private handlePlaceLetter(letter: string, isUppercase: boolean, squareView: SquareView | undefined): void {\n        if (!this.canPlace(squareView)) return;\n\n        letter = removeAccents(letter.toUpperCase());\n\n        if (!(LETTER_VALUES as string[]).includes(letter)) return;\n        if (letter === BLANK_TILE_LETTER_VALUE) return;\n\n        const availableTiles = [...(this.gameService.getLocalPlayer()?.getTiles() ?? [])];\n        const usedTiles = [...(this.gameViewEventManagerService.getGameViewEventValue('usedTiles')?.tiles ?? [])];\n\n        for (const usedTile of usedTiles) {\n            const index = availableTiles.findIndex((t) => t.letter === usedTile.letter);\n            if (index >= 0) availableTiles.splice(index, 1);\n        }\n\n        let tile: Tile | undefined;\n\n        if (isUppercase) {\n            tile = availableTiles.find((t) => t.isBlank);\n            if (tile) (tile.playedLetter as string) = letter;\n        } else {\n            tile = availableTiles.find((t) => t.letter === letter);\n        }\n\n        if (!tile) return;\n\n        this.useTile(tile);\n\n        const nextNavigator = this.navigator.clone();\n        if (nextNavigator.nextEmpty(Direction.Forward, false)) {\n            this.navigator = nextNavigator;\n            this.selectedSquare = nextNavigator.currentSquareView;\n        }\n    }\n\n    private canPlace(squareView: SquareView | undefined): boolean {\n        return squareView !== undefined && !this.actionService.hasActionBeenPlayed && !squareView.square.tile;\n    }\n\n    private handleBackspace(): void {\n        if (!this.canBackspace()) return;\n\n        let index = this.notAppliedSquares.indexOf(this.navigator.currentSquareView);\n\n        if (index === NOT_FOUND) {\n            this.selectedSquare = this.navigator.nextEmpty(Direction.Backward, true);\n            if (this.selectedSquare) index = this.notAppliedSquares.indexOf(this.selectedSquare);\n        }\n\n        if (index !== NOT_FOUND) {\n            this.notAppliedSquares.splice(index, 1);\n        }\n        if (this.selectedSquare) {\n            const selectedTile: Tile | null = this.selectedSquare.square.tile;\n            if (selectedTile) {\n                this.removeUsedTile(selectedTile);\n            }\n            this.selectedSquare.square.tile = null;\n        }\n    }\n\n    private canBackspace(): boolean {\n        return this.selectedSquare !== undefined && this.areTilesUsed() && !this.actionService.hasActionBeenPlayed;\n    }\n\n    private handleEnter(): void {\n        const placePayload: PlaceActionPayload | undefined = this.gameViewEventManagerService.getGameViewEventValue('usedTiles');\n        if (!placePayload) return;\n        this.actionService.sendAction(\n            this.gameService.getGameId(),\n            this.gameService.getLocalPlayerId(),\n            this.actionService.createActionData(ActionType.PLACE, placePayload),\n        );\n        this.clearCursor();\n    }\n\n    private clearCursor(): void {\n        this.selectedSquare = undefined;\n        if (!this.actionService.hasActionBeenPlayed) this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n    }\n\n    private initializeBoard(board: Square[][]): void {\n        if (!board || !board[0]) {\n            this.gridSize = { x: 0, y: 0 };\n            return;\n        }\n\n        this.gridSize = { x: board[0].length, y: board.length };\n        this.squareGrid = [];\n        for (let i = 0; i < this.gridSize.y; i++) {\n            this.squareGrid[i] = [];\n            for (let j = 0; j < this.gridSize.x; j++) {\n                const square: Square = this.getSquare(board, i, j);\n                const squareView: SquareView = new SquareView(square, SQUARE_SIZE);\n                this.squareGrid[i][j] = squareView;\n            }\n        }\n        this.marginLetters = LETTER_VALUES.slice(0, this.gridSize.x);\n        this.navigator = new BoardNavigator(this.squareGrid, { row: 0, column: 0 }, Orientation.Horizontal);\n    }\n\n    private getSquare(board: Square[][], row: number, column: number): Square {\n        return board[row] && board[row][column] ? board[row][column] : UNDEFINED_SQUARE;\n    }\n\n    private updateBoard(squaresToUpdate: Square[]): boolean {\n        if (this.hasBoardBeenUpdated(squaresToUpdate)) return false;\n        this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n        this.clearNewlyPlacedTiles();\n\n        /* \n            We flatten the 2D grid so it becomes a 1D array of SquareView\n            Then, we check for each SquareView if it's square property's position \n            matches one of the square in \"squareToUpdate\".\n            If so, we change the board's square to be the updated square\n        */\n        ([] as SquareView[]).concat(...this.squareGrid).forEach((squareView: SquareView) => {\n            squaresToUpdate\n                .filter(\n                    (square: Square) =>\n                        square.position.row === squareView.square.position.row && square.position.column === squareView.square.position.column,\n                )\n                .forEach((sameSquare: Square) => {\n                    squareView.square = sameSquare;\n                    squareView.applied = true;\n                    squareView.newlyPlaced = true;\n\n                    this.newlyPlacedTiles.push(squareView);\n                });\n        });\n        this.selectedSquare = undefined;\n        return true;\n    }\n\n    private hasBoardBeenUpdated(squaresToUpdate: Square[]): boolean {\n        return !squaresToUpdate || squaresToUpdate.length <= 0 || squaresToUpdate.length > this.gridSize.x * this.gridSize.y;\n    }\n\n    private isInBounds(position: Position): boolean {\n        return position.row < this.squareGrid.length && position.column < this.squareGrid[position.row].length;\n    }\n\n    private handlePlaceTiles(payload: PlaceActionPayload | undefined): void {\n        if (!payload) {\n            this.notAppliedSquares.forEach((squareView: SquareView) => (squareView.square.tile = null));\n            this.notAppliedSquares = [];\n            return;\n        }\n\n        const position = { ...payload.startPosition };\n        const next = () => (payload.orientation === Orientation.Horizontal ? position.column++ : position.row++);\n        this.notAppliedSquares = [];\n\n        for (let i = 0; i < payload.tiles.length; ) {\n            if (!this.isInBounds(position)) return;\n\n            const squareView = this.squareGrid[position.row][position.column];\n\n            if (!squareView.square.tile || !squareView.applied) {\n                squareView.square.tile = { ...payload.tiles[i] };\n                squareView.applied = false;\n                this.notAppliedSquares.push(squareView);\n                i++;\n            } else if (i === 0) {\n                return;\n            }\n\n            next();\n        }\n    }\n\n    private useTile(tile: Tile): void {\n        const previousUsedTiles = this.gameViewEventManagerService.getGameViewEventValue('usedTiles');\n\n        if (previousUsedTiles) {\n            this.gameViewEventManagerService.emitGameViewEvent('usedTiles', {\n                ...previousUsedTiles,\n                tiles: [...previousUsedTiles.tiles, tile],\n            });\n        } else {\n            this.gameViewEventManagerService.emitGameViewEvent('usedTiles', {\n                orientation: this.navigator.orientation,\n                startPosition: { row: this.navigator.row, column: this.navigator.column },\n                tiles: [tile],\n            });\n        }\n    }\n\n    private removeUsedTile(tile: Tile): void {\n        const previousUsedTiles = this.gameViewEventManagerService.getGameViewEventValue('usedTiles');\n\n        if (!previousUsedTiles) throw new Error(CANNOT_REMOVE_UNUSED_TILE);\n        if (previousUsedTiles.tiles.length <= 1) {\n            this.gameViewEventManagerService.emitGameViewEvent('resetUsedTiles');\n            return;\n        }\n\n        const index = previousUsedTiles.tiles.map((t: Tile) => t.letter).lastIndexOf(tile.letter);\n\n        if (index === NOT_FOUND) throw new Error(CANNOT_REMOVE_UNUSED_TILE);\n\n        previousUsedTiles.tiles.splice(index, 1);\n        this.gameViewEventManagerService.emitGameViewEvent('usedTiles', { ...previousUsedTiles });\n    }\n\n    private areTilesUsed(): boolean {\n        const usedTiles: PlaceActionPayload | undefined = this.gameViewEventManagerService.getGameViewEventValue('usedTiles');\n        return usedTiles !== undefined && usedTiles.tiles.length > 0;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/utils.scss';\n\n\n\n#board {\n    @include no-select;\n    width: 100%;\n    aspect-ratio: 1;\n    min-height: 300px;\n\n    #board-container {\n        height: 100%;\n        box-sizing: border-box;\n\n        #board-grid {\n            width: 100%;\n            height: 100%;\n        }\n    }\n}\n\n.full-size {\n    width: 100%;\n    height: 100%;\n}\n\n.letter-number-grid {\n    margin: 0px;\n    font-family: 'CaveStoryRegular';\n    font-weight: normal;\n    font-style: normal;\n    font-size: 24px;\n    color: black;\n    @include no-select;\n    cursor: default;\n}\n\n.square-background {\n    overflow: visible;\n}",
                    "styleUrl": "./board.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "roundManagerService",
                        "type": "RoundManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focusableComponentService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "roundManagerService",
                        "type": "RoundManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "focusableComponentService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FocusableComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"board\" #board (click)=\"clearNewlyPlacedTiles()\">\n    <mat-card id=\"board-container\">\n        <mat-grid-list cols=\"{{ gridSize.x + marginColumnSize }}\" rowHeight=\"fit\" gutterSize=\"3px\" id=\"board-grid\" class=\"full-size\">\n            <mat-grid-tile *ngFor=\"let item of [].constructor(gridSize.x + marginColumnSize); let i = index\" [colspan]=\"1\" [rowspan]=\"1\">\n                <p *ngIf=\"i > 0\" class=\"letter-number-grid\">{{ i }}</p>\n            </mat-grid-tile>\n\n            <div *ngFor=\"let squareRow of squareGrid; let i = index\">\n                <mat-grid-tile [colspan]=\"marginColumnSize\" [rowspan]=\"1\">\n                    <p class=\"letter-number-grid\">{{ marginLetters[i] }}</p>\n                </mat-grid-tile>\n                <mat-grid-tile *ngFor=\"let square of squareRow\" [colspan]=\"square.squareSize.x\" [rowspan]=\"square.squareSize.y\" class=\"square-background\">\n                    <app-square [tileFontSize]=\"tileFontSize\" [isCursor]=\"isSamePosition(square, selectedSquare)\" [cursorOrientation]=\"navigator.orientation\" class=\"full-size\" [squareView]=\"square\" (click)=\"onSquareClick(square)\"></app-square>\n                </mat-grid-tile>\n            </div>\n        </mat-grid-list>\n    </mat-card>\n</div>\n"
        },
        {
            "name": "ChatBoxComponent",
            "id": "component-ChatBoxComponent-96536d7433051c39261ff9c635bd488e677af68171552650f578c5752defd722d3d3f7c2ccdf3387c2e08773569128afca5c7d0e0544d67c39b3d3c7fafb3b96",
            "file": "src/app/components/chatbox/chatbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chatbox",
            "styleUrls": [
                "./chatbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chatbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideMinimize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onMinimize",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleMinimize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'app-chatbox',\n    templateUrl: './chatbox.component.html',\n    styleUrls: ['./chatbox.component.scss'],\n})\nexport class ChatBoxComponent {\n    @Input() title: string;\n    @Input() hideIcon: boolean = false;\n    @Input() hideMinimize: boolean = false;\n    @Input() hideClose: boolean = false;\n    @Input() icon: string;\n    @Input() icon2?: string;\n    @Output() onMinimize: EventEmitter<void> = new EventEmitter();\n    @Output() onClose: EventEmitter<void> = new EventEmitter();\n\n    handleMinimize() {\n        this.onMinimize.next();\n    }\n\n    handleClose() {\n        this.onClose.next();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.chatbox {\n    $gray: rgb(230, 230, 230);\n    $border-radius: 8px;\n    $border: solid 1px rgb(238, 238, 238);\n    $icon-size: 28px;\n\n    display: grid;\n    height: 400px;\n    width: 310px;\n    grid-template-rows: auto minmax(0, 1fr);\n    grid-template-columns: minmax(0, 1fr);\n    background-color: white;\n    border: $border;\n    border-bottom: none;\n    border-top-left-radius: $border-radius;\n    border-top-right-radius: $border-radius;\n    box-shadow: 0 0 2px rgba(0, 0, 0, 0.15), 0 0 15px rgba(0, 0, 0, 0.05);\n\n    &__header {\n        padding: 12px;\n        display: grid;\n        grid-template-columns: minmax(0, 1fr) auto;\n        gap: 12px;\n        border-bottom: $border;\n\n        &__left,\n        &__right {\n            display: flex;\n            align-items: center;\n        }\n\n        &__left {\n            gap: 6px;\n        }\n\n        &__icon {\n            height: $icon-size;\n            width: $icon-size;\n            border-radius: $icon-size;\n            background-color: $gray;\n            flex-shrink: 0;\n        }\n\n        &__icons {\n            &--two-icons {\n                position: relative;\n                height: $icon-size;\n                width: $icon-size;\n\n                .chatbox__header__icon {\n                    $space: 3px;\n                    height: $icon-size / 1.4;\n                    width: $icon-size / 1.4;\n                    position: absolute;\n                    border: solid 1.5px white;\n                    \n                    &:nth-child(1) {\n                        top: -$space;\n                        left: -$space;\n                    }\n\n                    &:nth-child(2) {\n                        bottom: -$space;\n                        right: -$space;\n                    }\n                }\n            }\n        }\n\n        &__title {\n            font-weight: 500;\n            font-size: 1.15em;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n\n        .chatbox--is-open & {\n            border-bottom: $border;\n        }\n    }\n\n    &__button {\n        border: none;\n        background-color: transparent;\n        font-size: 18px;\n        padding: 6px 8px;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: ease-in scale 0.1s;\n\n        &:hover {\n            background-color: rgba($gray, 0.2);\n        }\n\n        &:active {\n            scale: 0.925;\n            transition: ease-in scale 0.1s;\n        }\n    }\n}",
                    "styleUrl": "./chatbox.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"chatbox\">\n    <div class=\"chatbox__header\">\n        <div class=\"chatbox__header__left\">\n            <div [ngClass]=\"{'chatbox__header__icons': true, 'chatbox__header__icons--two-icons': !!icon2}\" *ngIf=\"!hideIcon\">\n                <img class=\"chatbox__header__icon\" [src]=\"icon\" />\n                <img class=\"chatbox__header__icon\" [src]=\"icon2\" *ngIf=\"icon2\" />\n            </div>\n            <div class=\"chatbox__header__title\">{{ title }}</div>\n        </div>\n        <div class=\"chatbox__header__right\">\n            <app-icon-button *ngIf=\"!hideMinimize\" (click)=\"handleMinimize()\">\n                <app-icon icon=\"minus\"></app-icon>\n            </app-icon-button>\n            <app-icon-button *ngIf=\"!hideClose\" (click)=\"handleClose()\">\n                <app-icon icon=\"times\"></app-icon>\n            </app-icon-button>\n            <!-- <button class=\"chatboxi__button chatbox__close\" (click)=\"handleClose()\">\n                <app-icon icon=\"tmes\"></app-icon>\n            </button> -->\n        </div>\n    </div>\n    <div class=\"chatbox__content\">\n        <ng-content></ng-content>\n    </div>\n</div>"
        },
        {
            "name": "ChatboxContainerComponent",
            "id": "component-ChatboxContainerComponent-acbbfdc0f587fedeb0716b45054dec36a96e3f649e7c2030b51b7a531e2a4bc33ad5d113fe5ed770b3d6bbb2ba19fda0bac62141dcaed8f651fdb92e77b77815",
            "file": "src/app/components/chatbox-container/chatbox-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chatbox-container",
            "styleUrls": [
                "./chatbox-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chatbox-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "channels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Channel[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "newMessageIsOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "openedChannels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Channel[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "closeChannel",
                    "args": [
                        {
                            "name": "channel",
                            "type": "Channel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channel",
                            "type": "Channel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeNewMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getChannelsForNewMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "minimizeChannel",
                    "args": [
                        {
                            "name": "channel",
                            "type": "Channel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channel",
                            "type": "Channel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showChannel",
                    "args": [
                        {
                            "name": "channel",
                            "type": "Channel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "channel",
                            "type": "Channel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNewMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Message } from '@app/components/chatbox-message/chatbox-message.component';\n\ninterface Channel {\n    id: string;\n    title: string;\n    messages: Message[];\n}\n\n@Component({\n    selector: 'app-chatbox-container',\n    templateUrl: './chatbox-container.component.html',\n    styleUrls: ['./chatbox-container.component.scss'],\n})\nexport class ChatboxContainerComponent {\n    @Input() channels: Channel[];\n    openedChannels: Channel[];\n    newMessageIsOpen: boolean = false;\n\n    constructor() {\n        this.channels = [\n            {\n                id: '1',\n                title: 'Général',\n                messages: [],\n            },\n            {\n                id: '2',\n                title: 'sup',\n                messages: [],\n            },\n        ];\n        this.openedChannels = [];\n    }\n\n    getChannelsForNewMessage(): (Channel & { canOpen: boolean })[] {\n        return this.channels.map<Channel & { canOpen: boolean }>((channel) => ({\n            ...channel,\n            canOpen: !this.openedChannels.find((c) => channel.id === c.id),\n        }));\n    }\n\n    showChannel(channel: Channel) {\n        this.openedChannels.push(channel);\n        this.closeNewMessage();\n    }\n\n    minimizeChannel(channel: Channel) {\n        const index = this.openedChannels.findIndex(({ id }) => channel.id === id);\n        this.openedChannels.splice(index, 1);\n    }\n\n    closeChannel(channel: Channel) {\n        if (confirm(`Do you want to quit channel \"${channel.title}\"?`)) {\n            this.minimizeChannel(channel);\n            this.channels = this.channels.filter(({ id }) => id !== channel.id);\n        }\n    }\n\n    closeNewMessage() {\n        this.newMessageIsOpen = false;\n    }\n\n    toggleNewMessage() {\n        this.newMessageIsOpen = !this.newMessageIsOpen;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chatbox-container {\n    $button-space: 16px;\n\n    position: fixed;\n    bottom: 0;\n    right: $button-space;\n    z-index: 1;\n    display: flex;\n    gap: $button-space;\n    align-items: flex-end;\n\n    &__chatboxes {\n        display: flex;\n        gap: 12px;\n        align-items: flex-end;\n    }\n\n    &__my-channels {\n        padding: 12px;\n        display: flex;\n        flex-direction: column;\n        gap: 12px;\n\n        &__title {\n            font-size: 0.9em;\n            opacity: 0.55;\n            margin: 0;\n        }\n\n        &__content {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n        }\n\n        &__button {\n            border: none;\n            background-color: transparent;\n            font: inherit;\n            text-align: inherit;\n            transition: ease-in scale 0.1s;\n            padding: 12px 12px;\n            font-size: 16px;\n            border-radius: 4px;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n            width: 100%;\n            max-width: 100%;\n\n            &:not(:disabled) {\n                cursor: pointer;\n\n                &:hover {\n                    background-color: rgba(gray, 0.05);\n                }\n    \n                &:active {\n                    scale: 0.97;\n                    transition: ease-in scale 0.1s;\n                }\n            }\n            \n            // width: 100%;\n        }\n    }\n\n    &__button {\n        margin-bottom: 12px;\n\n        app-icon {\n            font-size: 1.3em;\n            position: relative;\n            top: -2px;\n            left: 1px;\n        }\n    }\n}",
                    "styleUrl": "./chatbox-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "templateData": "<div class=\"chatbox-container\">\n    <div class=\"chatbox-container__chatboxes\">\n        <ng-container *ngFor=\"let channel of openedChannels\">\n            <app-chatbox-message \n                [title]=\"channel.title\"\n                [messages]=\"channel.messages\"\n                (onMinimize)=\"minimizeChannel(channel)\"\n                (onClose)=\"closeChannel(channel)\"\n            ></app-chatbox-message>\n        </ng-container>\n\n        <app-chatbox title=\"New message\" (onMinimize)=\"closeNewMessage()\" [hideIcon]=\"true\" [hideClose]=\"true\" *ngIf=\"newMessageIsOpen\">\n            <div class=\"chatbox-container__my-channels\">\n                <p class=\"chatbox-container__my-channels__title\">My channels</p>\n                <div class=\"chatbox-container__my-channels__content\">\n                    <button \n                        *ngFor=\"let channel of getChannelsForNewMessage()\" \n                        [disabled]=\"!channel.canOpen\"\n                        (click)=\"showChannel(channel)\"\n                        class=\"chatbox-container__my-channels__button\"\n                    >\n                        {{channel.title}}\n                    </button>\n                </div>\n            </div>\n        </app-chatbox>\n    </div>\n\n    <button mat-fab color=\"white\" class=\"chatbox-container__button\" (click)=\"toggleNewMessage()\">\n        <app-icon icon=\"edit\" styling=\"solid\"></app-icon>\n    </button>\n</div>"
        },
        {
            "name": "ChatboxMessageComponent",
            "id": "component-ChatboxMessageComponent-0b7858c657bff4dfef512320f010e8f27cf539db47dbcee99187279eab92a8ae510acbe7d2d756a26c605a7536b7ef312775fb8d2cc141a716929f1b77f51273",
            "file": "src/app/components/chatbox-message/chatbox-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chatbox-message",
            "styleUrls": [
                "./chatbox-message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chatbox-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Message[]",
                    "decorators": []
                },
                {
                    "name": "hideClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "hideMinimize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "icon2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "onMinimize",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "messageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onlyHasEmoji",
                    "defaultValue": "onlyHasEmoji",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "DisplayMessage[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEmojiClick",
                    "args": [
                        {
                            "name": "emoji",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emoji",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMessageSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                },
                {
                    "name": "handleMinimize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ChatBoxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { onlyHasEmoji } from '@app/utils/emoji/emoji';\nimport { emojify } from 'node-emoji';\nimport { ChatBoxComponent } from '@app/components/chatbox/chatbox.component';\n\nexport interface Message {\n    message: string;\n    isCurrentUser: boolean;\n    username: string;\n}\n\nexport interface DisplayMessage {\n    username: string;\n    isCurrentUser: boolean;\n    messages: string[];\n}\n\n@Component({\n    selector: 'app-chatbox-message',\n    templateUrl: './chatbox-message.component.html',\n    styleUrls: ['./chatbox-message.component.scss'],\n})\nexport class ChatboxMessageComponent extends ChatBoxComponent {\n    @Input() messages: Message[];\n    messageForm: FormGroup;\n    onlyHasEmoji = onlyHasEmoji;\n\n    constructor(private readonly formBuilder: FormBuilder) {\n        super();\n        this.messageForm = this.formBuilder.group({\n            message: new FormControl('', [Validators.required]),\n        });\n    }\n\n    getMessages(): DisplayMessage[] {\n        return this.messages.reduce<DisplayMessage[]>((messages, current) => {\n            const last = messages[messages.length - 1];\n\n            if (last) {\n                if (last.username === current.username) {\n                    last.messages.push(emojify(current.message.trim()));\n                } else {\n                    messages.push({\n                        username: current.username,\n                        isCurrentUser: current.isCurrentUser,\n                        messages: [emojify(current.message.trim())],\n                    });\n                }\n                return messages;\n            } else {\n                return [\n                    {\n                        username: current.username,\n                        isCurrentUser: current.isCurrentUser,\n                        messages: [emojify(current.message.trim())],\n                    },\n                ];\n            }\n        }, []);\n        // return [];\n    }\n\n    addMessage(message: Message): void {\n        this.messages.push(message);\n    }\n\n    onMessageSubmit() {\n        if (!this.messageForm.valid) return;\n\n        const message = this.messageForm.value.message.trim();\n\n        if (message.length === 0) return;\n\n        this.addMessage({\n            message,\n            isCurrentUser: true,\n            username: 'Me',\n        });\n        this.messageForm.setValue({ message: '' });\n    }\n\n    onEmojiClick(emoji: string) {\n        this.addMessage({\n            message: emoji,\n            isCurrentUser: true,\n            username: 'Me',\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.chatbox-message {\n    &__content {\n        display: grid;\n        grid-template-rows: 1fr auto;\n        height: 100%;\n    }\n\n    &__messages {\n        padding: 12px;\n        display: flex;\n        flex-direction: column-reverse;\n        gap: 2px;\n        overflow-y: auto;\n\n        &__container {\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n            padding-top: 12px;\n\n            &:empty {\n                height: 100%;\n                justify-content: center;\n                align-items: center;\n                \n                &::after {\n                    content: \"No messages yet!\";\n                    opacity: 0.35;\n                }\n            }\n        }\n    }\n\n    &__group {\n        $border-radius-l: 16px;\n\n        display: flex;\n        flex-direction: column;\n        gap: 4px;\n\n        &__username {\n            margin: 0;\n            font-size: 0.75em;\n            opacity: 0.55;\n        }\n\n        &__content {\n            display: flex;\n            align-items: flex-end;\n            gap: 6px;\n        }\n\n        &__avatar {\n            $size: 18px;\n\n            height: $size;\n            width: $size;\n            border-radius: $size / 2;\n            background-color: $gray;\n            flex-shrink: 0;\n        }\n\n        &__messages {\n            display: flex;\n            flex-direction: column;\n            gap: 4px;\n            flex-grow: 1;\n        }\n\n        &--is-current-user {\n            .chatbox-message__group {\n                &__username {\n                    text-align: right;\n                    margin-right: $border-radius-l - 6px;\n                }\n                &__messages {\n                    text-align: right;\n                    align-items: flex-end;\n                }\n            }\n\n            .chatbox-message__message {\n                text-align: right;\n                background-color: $primary;\n                color: white;\n                border-top-left-radius: $border-radius-l;\n                border-bottom-left-radius: $border-radius-l;\n\n                &:first-child {\n                    border-top-right-radius: $border-radius-l;\n                }\n                \n                &:last-child {\n                    border-bottom-right-radius: $border-radius-l;\n                }\n            }\n        }\n\n        &--is-other-user {\n            .chatbox-message__group {\n                &__username {\n                    margin-left: $border-radius-l + 14px;\n                }\n            }\n            \n            .chatbox-message__message {\n                border-top-right-radius: $border-radius-l;\n                border-bottom-right-radius: $border-radius-l;\n\n                &:first-child {\n                    border-top-left-radius: $border-radius-l;\n                }\n                \n                &:last-child {\n                    border-bottom-left-radius: $border-radius-l;\n                }\n            }\n        }\n    }\n\n    &__message {\n        $border-radius-l: 16px;\n        $padding-h: 14px;\n\n        background-color: $gray;\n        width: fit-content;\n        max-width: calc(100% - 36px);\n        box-sizing: border-box;\n        border-radius: 4px;\n        padding: 10px $padding-h;\n        overflow: hidden;\n        line-break: loose;\n        word-break: break-word;\n        margin: 0;\n        font-size: 0.95em;\n\n        &--only-emoji {\n            background-color: transparent !important;\n            padding: 0 !important;\n            border-radius: 0 !important;\n            font-size: 2.2em !important;\n            letter-spacing: 6px !important;\n            line-height: normal !important;\n        }\n    }\n\n    &__input {\n        padding: 12px;\n        display: grid;\n        grid-template-columns: 1fr auto;\n        gap: 6px;\n\n        &__form {\n            &__control {\n                background-color: lighten($gray, 5);\n                border: none;\n                font-size: inherit;\n                font-family: inherit;\n                padding: 8px 12px;\n                border-radius: 12px;\n                width: 100%;\n                box-sizing: border-box;\n            }\n        }\n    }\n}",
                    "styleUrl": "./chatbox-message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ChatBoxComponent",
            "templateData": "<app-chatbox [title]=\"title\" (onMinimize)=\"handleMinimize()\" (onClose)=\"handleClose()\" [icon]=\"icon\" [icon2]=\"icon2\" class=\"chatbox-message\">\n    <div class=\"chatbox-message__content\">\n        <div class=\"chatbox-message__messages\">\n            <div class=\"chatbox-message__messages__container\">\n                <div *ngFor=\"let messageGroup of getMessages()\" [ngClass]=\"{'chatbox-message__group': true, 'chatbox-message__group--is-current-user': messageGroup.isCurrentUser, 'chatbox-message__group--is-other-user': !messageGroup.isCurrentUser}\">\n                    <p class=\"chatbox-message__group__username\">{{messageGroup.username}}</p>\n                    <div class=\"chatbox-message__group__content\">\n                        <div class=\"chatbox-message__group__avatar\" *ngIf=\"!messageGroup.isCurrentUser\"></div>\n                        <div class=\"chatbox-message__group__messages\">\n                            <p *ngFor=\"let message of messageGroup.messages\" [ngClass]=\"{'chatbox-message__message': true, 'chatbox-message__message--only-emoji': onlyHasEmoji(message)}\">{{message}}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"chatbox-message__input\">\n            <form class=\"chatbox-message__input__form\" [formGroup]=\"messageForm\" (ngSubmit)=\"onMessageSubmit()\" novalidate>\n                <input type=\"text\" formControlName=\"message\" class=\"chatbox-message__input__form__control\" placeholder=\"Aa\" [maxlength]=\"512\">\n            </form>\n    \n            <app-icon-button (click)=\"onEmojiClick('👍')\">👍</app-icon-button>\n        </div>\n    </div>\n</app-chatbox>"
        },
        {
            "name": "CommunicationBoxComponent",
            "id": "component-CommunicationBoxComponent-4352adbe3029897f1b43c740742e7cead01571f0d8aae02f8200eeea09f06d44e6ec47218b9b30d0b1ef7f10b36b6b9a94899e54589fb86fd5d68fb912027cb5",
            "file": "src/app/components/communication-box/communication-box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-communication-box",
            "styleUrls": [
                "./communication-box.component.scss",
                "./communication-box-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./communication-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameType",
                    "defaultValue": "GameType.Classic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameType",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "messageForm",
                    "defaultValue": "new FormGroup({\n        content: new FormControl('', [Validators.maxLength(MAX_INPUT_LENGTH), Validators.minLength(1)]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "messageInputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'messageInput'"
                        }
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "scrollViewport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkVirtualScrollViewport",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'virtualScroll', {static: false}"
                        }
                    ]
                },
                {
                    "name": "textBoxContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textBoxContainer'"
                        }
                    ]
                },
                {
                    "name": "focusableComponentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "focusableEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "loseFocusEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createVisualMessage",
                    "args": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Message",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLettersLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "TileReserveData[]",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNumberOfTilesLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeMessages",
                    "args": [
                        {
                            "name": "gameData",
                            "type": "InitializeGameData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "gameData",
                            "type": "InitializeGameData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCtrlC",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElementClickable",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onContainerClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusableEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "onMessageClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReceiveNewMessage",
                    "args": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "newMessage",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSendMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollToBottom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "emitFocusableEvent",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "emitLoseFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "onLoseFocusEvent",
                    "args": [],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToFocusableEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToLoseFocusEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "unsubscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { InitializeGameData } from '@app/classes/communication/game-config';\nimport { Message } from '@app/classes/communication/message';\nimport { FocusableComponent } from '@app/classes/focusable-component/focusable-component';\nimport { TileReserveData } from '@app/classes/tile/tile.types';\nimport { CODE_HTML_TAG, IS_CLICKABLE_CLASS } from '@app/constants/components-constants';\nimport { INITIAL_MESSAGE } from '@app/constants/controller-constants';\nimport { LOCAL_PLAYER_ID, MAX_INPUT_LENGTH, OPPONENT_ID, SYSTEM_ERROR_ID, SYSTEM_ID } from '@app/constants/game-constants';\nimport { GameType } from '@app/constants/game-type';\nimport { GameService, InputParserService } from '@app/services';\nimport { FocusableComponentsService } from '@app/services/focusable-components-service/focusable-components.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { MessageStorageService } from '@app/services/message-storage-service/message-storage.service';\nimport { marked } from 'marked';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-communication-box',\n    templateUrl: './communication-box.component.html',\n    styleUrls: ['./communication-box.component.scss', './communication-box-text.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CommunicationBoxComponent extends FocusableComponent<KeyboardEvent> implements OnInit, OnDestroy, AfterViewInit {\n    @ViewChild('messageInput') messageInputElement: ElementRef;\n    @ViewChild('textBoxContainer') textBoxContainer: ElementRef;\n    @ViewChild('virtualScroll', { static: false }) scrollViewport: CdkVirtualScrollViewport;\n\n    gameType: GameType = GameType.Classic;\n    messages: Message[] = [];\n    messageForm = new FormGroup({\n        content: new FormControl('', [Validators.maxLength(MAX_INPUT_LENGTH), Validators.minLength(1)]),\n    });\n\n    private componentDestroyed$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(\n        private inputParser: InputParserService,\n        private gameService: GameService,\n        private focusableComponentsService: FocusableComponentsService,\n        private changeDetectorRef: ChangeDetectorRef,\n        private messageStorageService: MessageStorageService,\n        private gameViewEventManagerService: GameViewEventManagerService,\n    ) {\n        super();\n        this.focusableComponentsService.setActiveKeyboardComponent(this);\n        this.messageStorageService.initializeMessages();\n    }\n\n    ngOnInit(): void {\n        this.gameType = this.gameService.getGameType();\n\n        this.gameViewEventManagerService.subscribeToGameViewEvent('newMessage', this.componentDestroyed$, (newMessage: Message | null) => {\n            if (newMessage) this.onReceiveNewMessage(newMessage);\n        });\n        this.gameViewEventManagerService.subscribeToGameViewEvent(\n            'gameInitialized',\n            this.componentDestroyed$,\n            (gameData: InitializeGameData | undefined) => {\n                if (gameData) {\n                    this.initializeMessages(gameData);\n                    this.gameType = gameData.startGameData.gameType;\n                }\n            },\n        );\n    }\n\n    ngAfterViewInit(): void {\n        this.subscribeToFocusableEvents();\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribeToFocusableEvents();\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n        this.messageStorageService.resetMessages();\n    }\n\n    onSendMessage(): void {\n        const message = this.messageForm.get('content')?.value;\n        if (message && message.length > 0) {\n            this.inputParser.handleInput(message);\n            this.messageForm.reset({ content: '' });\n        }\n    }\n\n    getLettersLeft(): TileReserveData[] {\n        return this.gameService.tileReserve;\n    }\n\n    getNumberOfTilesLeft(): number {\n        return this.gameService.getTotalNumberOfTilesLeft();\n    }\n\n    onContainerClick(): void {\n        this.focusableComponentsService.setActiveKeyboardComponent(this);\n    }\n\n    onMessageClicked(event: MouseEvent): void {\n        const element: HTMLElement = event.target as HTMLElement;\n        if (!element.innerText) return;\n        if (!this.isElementClickable(element)) return;\n\n        this.inputParser.handleInput(element.innerText);\n    }\n\n    protected onFocusableEvent(event: KeyboardEvent): void {\n        if (!this.isCtrlC(event)) this.messageInputElement?.nativeElement?.focus();\n    }\n\n    private initializeMessages(gameData: InitializeGameData): void {\n        const storedMessages = this.messageStorageService.getMessages();\n        if (storedMessages.length > 0 && this.messages.length === 0) {\n            const localGameMessages: Message[] = storedMessages.filter((message: Message) => message.gameId === gameData.startGameData.gameId);\n            localGameMessages.forEach((message: Message) => (message.content = marked.parseInline(message.content)));\n            this.messages = this.messages.concat(localGameMessages);\n        }\n\n        if (this.messages.length === 0) this.onReceiveNewMessage({ ...INITIAL_MESSAGE, gameId: this.gameService.getGameId() });\n    }\n\n    private createVisualMessage(newMessage: Message): Message {\n        switch (newMessage.senderId) {\n            case this.gameService.getLocalPlayerId():\n                newMessage.senderId = LOCAL_PLAYER_ID;\n                break;\n            case SYSTEM_ID:\n            case SYSTEM_ERROR_ID:\n                break;\n            default:\n                newMessage.senderId = OPPONENT_ID;\n                break;\n        }\n\n        return { ...newMessage, content: marked.parseInline(newMessage.content) };\n    }\n\n    private onReceiveNewMessage(newMessage: Message): void {\n        if (newMessage.gameId !== this.gameService.getGameId()) return;\n\n        this.messages = [...this.messages, this.createVisualMessage(newMessage)];\n        this.changeDetectorRef.detectChanges();\n        this.scrollToBottom();\n        this.messageStorageService.saveMessage(newMessage);\n    }\n\n    private isCtrlC(event: KeyboardEvent): boolean {\n        return event.key === 'c' && (event.ctrlKey || event.metaKey);\n    }\n\n    private scrollToBottom(): void {\n        setTimeout(() => {\n            this.scrollViewport.scrollTo({\n                bottom: 0,\n                behavior: 'auto',\n            });\n        }, 0);\n    }\n\n    private isElementClickable(element: HTMLElement): boolean {\n        const isElementClickable: boolean = element.classList.contains(IS_CLICKABLE_CLASS);\n        const isParentClickable: boolean =\n            element.parentElement !== null && (element.parentElement as HTMLElement).classList.contains(IS_CLICKABLE_CLASS);\n        const isElementCodeTag: boolean = element.tagName === CODE_HTML_TAG;\n        return isElementCodeTag && (isElementClickable || isParentClickable);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$s: 8px;\n$b: #e4e4e4;\n\n#outer-container {\n    height: 100%;\n    display: grid;\n    grid-template-rows: auto 1fr auto;\n    box-sizing: border-box;\n\n    & > section:not(:last-child) {\n        margin-bottom: $s;\n    }\n\n    section#objectives-container {\n        #tile-map {\n            .tile-map-content {\n                display: flex;\n                width: 100%;\n                flex-wrap: wrap;\n\n                p {\n                    flex: 1 1 0;\n                    display: flex;\n                    margin: 0 8px 8px 8px;\n\n                    app-tile {\n                        height: 20px;\n                        width: 20px;\n                        font-size: 0.7em;\n                    }\n\n                    .separator {\n                        margin: 0 4px;\n                    }\n                }\n            }\n        }\n    }\n}\n\nform {\n    display: flex;\n    align-items: stretch;\n    border: solid 2px rgb(207, 207, 207);\n    padding: 4px;\n    border-radius: 4px;\n\n    .button-tooltip {\n        display: flex;\n        width: 100%;\n    }\n\n    input {\n        flex-grow: 1;\n        border: none;\n        margin-right: 6px;\n        font-size: inherit;\n        font-family: inherit;\n        outline: none;\n    }\n\n    mat-hint {\n        font-size: 75%;\n        margin-right: 0;\n        color: #f3f3f3;\n        display: flex;\n        margin-top: -1px;\n    }\n\n    app-icon {\n        margin-top: 0.3em;\n        font-size: large;\n    }\n\n    ::ng-deep .mat-flat-button {\n        line-height: 20px;\n        padding: 0;\n    }\n    .mat-hint-wrapper {\n        height: 15px;\n        background-color: rgba(255, 255, 255, 0.2);\n        text-align: center;\n        width: 100%;\n        justify-content: center;\n        display: flex;\n    }\n\n    .isInvalid {\n        color: black;\n    }\n}\n\np.message.isClickable {\n    ::ng-deep code {\n        cursor: pointer;\n\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n}\n",
                    "styleUrl": "./communication-box.component.scss"
                },
                {
                    "data": "$p: #1b5e20;\n\nsection#text-box-container {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    mat-card {\n        flex-grow: 1;\n        display: flex;\n        flex-direction: column;\n        position: relative;\n\n        cdk-virtual-scroll-viewport.scrolling-area {\n            flex-grow: 1;\n            border: solid 2px rgb(207, 207, 207);\n            border-radius: 4px;\n            padding-bottom: 6px;\n            margin-bottom: 6px;\n            text-align: left;\n            overflow-x: hidden;\n\n            &::ng-deep div.cdk-virtual-scroll-content-wrapper {\n                width: 100% !important;\n                max-width: 100% !important;\n            }\n\n            .scroll-item {\n                padding: 0 12px;\n                box-sizing: border-box;\n\n                p {\n                    margin: 0;\n                    word-wrap: break-word;\n\n                    &.date {\n                        text-align: center;\n                        font-size: 0.85em;\n                        opacity: 0.55;\n                    }\n\n                    &.message {\n                        width: fit-content;\n                        max-width: 80%;\n                        padding: 4px 12px;\n                        border-radius: 0.25em;\n                    }\n                }\n\n                &:first-child {\n                    margin-top: 12px;\n\n                    p.message {\n                        padding: 4px 0;\n                        border-top-left-radius: 1em;\n                        border-top-right-radius: 1em;\n                    }\n                }\n\n                &.system,\n                &.system-error {\n                    text-align: center;\n\n                    &.system-error {\n                        color: tomato;\n                    }\n\n                    p.message {\n                        width: 100%;\n                        max-width: 100%;\n                        margin: 8px 0;\n                        opacity: 0.8;\n                        padding: 4px 0;\n                    }\n\n                    & + .me p.message,\n                    & + .opponent p.message {\n                        border-top-left-radius: 1em;\n                        border-top-right-radius: 1em;\n                    }\n                }\n\n                &.opponent {\n                    p.message {\n                        background: $p;\n                        color: white;\n                        border-top-right-radius: 1em;\n                        border-bottom-right-radius: 1em;\n                    }\n\n                    & + .opponent {\n                        margin-top: 3px;\n                    }\n\n                    & + .me p.message {\n                        margin-top: 8px;\n                        border-top-left-radius: 1em;\n                        border-top-right-radius: 1em;\n                    }\n                }\n\n                &.me {\n                    p.message {\n                        margin-left: auto;\n                        background: rgb(216, 216, 216);\n                        border-top-left-radius: 1em;\n                        border-bottom-left-radius: 1em;\n                    }\n\n                    & + .me {\n                        margin-top: 3px;\n                    }\n\n                    & + .opponent p.message {\n                        margin-top: 8px;\n                        border-top-left-radius: 1em;\n                        border-top-right-radius: 1em;\n                    }\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./communication-box-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "inputParser",
                        "type": "InputParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focusableComponentsService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageStorageService",
                        "type": "MessageStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "inputParser",
                        "type": "InputParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "focusableComponentsService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageStorageService",
                        "type": "MessageStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FocusableComponent",
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div id=\"outer-container\" (click)=\"onContainerClick()\">\n    <section id=\"objectives-container\">\n        <mat-accordion>\n            <mat-expansion-panel *ngIf=\"gameType === 'LOG2990'\" expanded=\"true\">\n                <mat-expansion-panel-header>Objectifs</mat-expansion-panel-header>\n                <app-objective-box></app-objective-box>\n            </mat-expansion-panel>\n            <mat-expansion-panel id=\"tile-map\" [expanded]=\"false\" [disabled]=\"getNumberOfTilesLeft() === 0\">\n                <mat-expansion-panel-header>Tuiles restantes : {{ getNumberOfTilesLeft() }}</mat-expansion-panel-header>\n                <div class=\"tile-map-content\">\n                    <p *ngFor=\"let letter of getLettersLeft()\">\n                        <app-tile [tile]=\"{ letter: letter.letter, value: 0 }\" [hideValue]=\"true\"></app-tile>\n                        <span class=\"separator\">:</span>\n                        <span class=\"amount\">{{ letter.amount }}</span>\n                    </p>\n                </div>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </section>\n    <section id=\"text-box-container\" #textBoxContainer>\n        <mat-card>\n            <cdk-virtual-scroll-viewport itemSize=\"30*7\" class=\"scrolling-area\" #virtualScroll>\n                <div [class]=\"'scroll-item ' + msg.senderId\" *cdkVirtualFor=\"let msg of messages\">\n                    <div class=\"message-container\">\n                        <p\n                            [ngClass]=\"{ isClickable: msg.isClickable }\"\n                            class=\"message\"\n                            [innerHTML]=\"msg.content\"\n                            (click)=\"onMessageClicked($event)\"\n                        ></p>\n                    </div>\n                </div>\n            </cdk-virtual-scroll-viewport>\n            <form class=\"input-zone\" [formGroup]=\"messageForm\" (ngSubmit)=\"onSendMessage()\">\n                <div class=\"button-tooltip\" matTooltip=\"Votre message est trop long\" [matTooltipDisabled]=\"messageForm.valid\">\n                    <input matInput type=\"text\" formControlName=\"content\" autocomplete=\"off\" placeholder=\"Écrivez votre message ici\" #messageInput />\n                    <button id=\"send-button\" stype=\"submit\" mat-flat-button color=\"primary\" [disabled]=\"messageForm.invalid\">\n                        <app-icon [icon]=\"'long-arrow-right'\"></app-icon>\n                        <div class=\"mat-hint-wrapper\">\n                            <mat-hint align=\"end\" [ngClass]=\"{ isInvalid: (messageInput.value?.length || 0) > 512 }\">{{messageInput.value?.length || 0}}/512</mat-hint>\n                        </div>\n                    </button>\n                </div>\n            </form>            \n        </mat-card>\n    </section>\n</div>\n"
        },
        {
            "name": "ConvertDialogComponent",
            "id": "component-ConvertDialogComponent-28993406797c4075071afbf6ce90a938df142959dca29aef6477fd0be1cb04b0a08c3d47de00c282de0f34701b71a4d6fa3f9bd80c4eec97784db1e83ec3f6e7",
            "file": "src/app/components/convert-dialog/convert-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-convert-dialog",
            "styleUrls": [
                "./convert-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./convert-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gameParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pageDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "playerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "virtualPlayerLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "virtualPlayerNameMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<VirtualPlayerLevel | string[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "generateVirtualPlayerProfileMap",
                    "args": [
                        {
                            "name": "virtualPlayerProfiles",
                            "type": "VirtualPlayer[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerProfiles",
                            "type": "VirtualPlayer[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVirtualPlayerNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleConvertToSolo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "returnToWaiting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameDispatcherService } from '@app/services';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\nimport { VirtualPlayer } from '@common/models/virtual-player';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport interface ConvertResult {\n    isConverting: boolean;\n}\n\n@Component({\n    selector: 'app-convert-dialog',\n    templateUrl: './convert-dialog.component.html',\n    styleUrls: ['./convert-dialog.component.scss'],\n})\nexport class ConvertDialogComponent implements OnInit, OnDestroy {\n    virtualPlayerLevels: typeof VirtualPlayerLevel;\n    gameParameters: FormGroup;\n\n    private playerName: string;\n    private virtualPlayerNameMap: Map<VirtualPlayerLevel, string[]>;\n    private pageDestroyed$: Subject<boolean>;\n\n    constructor(\n        private dialogRef: MatDialogRef<ConvertDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: string,\n        private gameDispatcherService: GameDispatcherService,\n        private readonly virtualPlayerProfilesService: VirtualPlayerProfilesService,\n    ) {\n        this.playerName = data;\n        this.virtualPlayerLevels = VirtualPlayerLevel;\n        this.virtualPlayerNameMap = new Map();\n        this.pageDestroyed$ = new Subject();\n        this.gameParameters = new FormGroup({\n            gameMode: new FormControl(GameMode.Solo, Validators.required),\n            level: new FormControl(VirtualPlayerLevel.Beginner, Validators.required),\n            virtualPlayerName: new FormControl('', Validators.required),\n        });\n\n        this.setupDialog();\n    }\n\n    ngOnInit(): void {\n        this.gameParameters\n            .get('level')\n            ?.valueChanges.pipe(takeUntil(this.pageDestroyed$))\n            .subscribe(() => this.gameParameters?.get('virtualPlayerName')?.reset());\n\n        this.virtualPlayerProfilesService.subscribeToVirtualPlayerProfilesUpdateEvent(this.pageDestroyed$, (profiles) => {\n            this.generateVirtualPlayerProfileMap(profiles);\n        });\n        this.virtualPlayerProfilesService.getAllVirtualPlayersProfile();\n    }\n\n    ngOnDestroy(): void {\n        this.pageDestroyed$.next(true);\n        this.pageDestroyed$.complete();\n    }\n\n    onSubmit(): void {\n        this.handleConvertToSolo();\n    }\n\n    getVirtualPlayerNames(): string[] {\n        if (!this.virtualPlayerNameMap) return [];\n        const namesForLevel: string[] | undefined = this.virtualPlayerNameMap.get(this.gameParameters.get('level')?.value);\n        return namesForLevel ?? [];\n    }\n\n    returnToWaiting(): void {\n        this.gameDispatcherService.handleRecreateGame();\n        this.dialogRef.close({ isConverting: false });\n    }\n\n    private generateVirtualPlayerProfileMap(virtualPlayerProfiles: VirtualPlayer[]): void {\n        virtualPlayerProfiles.forEach((profile: VirtualPlayer) => {\n            if (profile.name === this.playerName) return;\n\n            const namesForLevel: string[] | undefined = this.virtualPlayerNameMap.get(profile.level as VirtualPlayerLevel);\n            if (!namesForLevel) this.virtualPlayerNameMap.set(profile.level as VirtualPlayerLevel, [profile.name]);\n            else namesForLevel.push(profile.name);\n        });\n    }\n\n    private handleConvertToSolo(): void {\n        this.gameDispatcherService.handleRecreateGame(this.gameParameters);\n        this.dialogRef.close({ isConverting: true });\n    }\n\n    private setupDialog(): void {\n        this.dialogRef.disableClose = true;\n        this.dialogRef.backdropClick().subscribe(() => this.returnToWaiting());\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n::ng-deep body {\n    background: $page-background;\n}\n\n$border-radius: 6px;\n\n:host ::ng-deep {\n    span.mat-button-toggle-label-content {\n        line-height: 1em;\n        height: 100%;\n        width: 100%;\n        padding: 0;\n        border-radius: $border-radius;\n    }\n}\n\n$border-radius: 6px;\n\n.container {\n    max-width: 625px;\n    width: 60vw;\n    margin: 0 auto;\n\n    & > mat-card {\n        margin: 0 12px;\n    }\n\n    form {\n        mat-button-toggle-group,\n        mat-form-field {\n            width: 100%;\n        }\n\n        mat-button-toggle-group {\n            margin-bottom: 1.34375em;\n        }\n\n        mat-button-toggle-group {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 12px;\n            border: none;\n            overflow: visible;\n\n            mat-button-toggle-label {\n                width: 100%;\n            }\n\n            mat-button-toggle {\n                border-radius: $border-radius;\n                background: transparent;\n                border: none;\n                overflow: visible;\n                width: 100%;\n\n                mat-card.content {\n                    background: white;\n                    border-radius: $border-radius;\n                    border: none;\n                    box-sizing: border-box;\n                    display: block;\n                    width: 100%;\n                    border: solid 1px rgb(236, 236, 236);\n                    padding: 8px;\n                }\n                p,\n                app-icon {\n                    margin: auto;\n                    line-height: 1em !important;\n                }\n\n                app-icon {\n                    font-size: 1.3em;\n                    margin-bottom: 0.3em;\n                    display: block;\n                }\n\n                p {\n                    font-size: 0.9em;\n                }\n\n                &.mat-button-toggle-checked {\n                    mat-card.content {\n                        background-color: rgba($primary, 0.15);\n                        border: solid 1px rgba($primary, 0.1);\n                        app-icon {\n                            color: $primary;\n                        }\n                    }\n                }\n\n                &.mat-button-toggle-disabled {\n                    mat-card.content {\n                        background-color: rgb(241, 241, 241);\n                        border-color: rgb(241, 241, 241);\n                        color: rgba(0, 0, 0, 0.459);\n                    }\n                }\n            }\n        }\n\n        mat-label.button-toggle-label {\n            display: block;\n            margin-bottom: 0.25em;\n        }\n\n        app-timer-selection {\n            display: block;\n        }\n    }\n\n    .buttons {\n        display: flex;\n        justify-content: space-evenly;\n\n        button {\n            font-size: 1.2em;\n            padding: 6px 16px;\n        }\n    }\n}\n.mat-button-toggle-label-content {\n    width: 100%;\n}\n\n::ng-deep snack-bar-container.error {\n    background: lighten(tomato, 30%);\n    color: tomato;\n\n    button {\n        color: tomato;\n    }\n}\n",
                    "styleUrl": "./convert-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConvertDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConvertDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Convertir en partie solo</h2>\n<mat-dialog-content>\n    <div class=\"container\">\n        <form [formGroup]=\"gameParameters\" (ngSubmit)=\"onSubmit()\">\n            <ng-container>\n                <mat-label class=\"button-toggle-label\" id=\"level-label\">Choisissez le niveau de votre adversaire virtuel</mat-label>\n                <mat-button-toggle-group id=\"level-buttons\" formControlName=\"level\">\n                    <mat-button-toggle id=\"begginer-button\" [value]=\"virtualPlayerLevels.Beginner\">\n                        <mat-card class=\"content\">\n                            <app-icon icon=\"turtle\" styling=\"solid\"></app-icon>\n                            <p class=\"text\">{{ virtualPlayerLevels.Beginner }}</p>\n                        </mat-card>\n                    </mat-button-toggle>\n\n                    <mat-button-toggle id=\"expert-button\" [value]=\"virtualPlayerLevels.Expert\">\n                        <mat-card class=\"content\">\n                            <app-icon icon=\"rabbit\" styling=\"solid\"></app-icon>\n                            <p class=\"text\">{{ virtualPlayerLevels.Expert }}</p>\n                        </mat-card>\n                    </mat-button-toggle>\n                </mat-button-toggle-group>\n\n                <mat-form-field appearance=\"outline\">\n                    <mat-label floatLabel=\"always\">Choissez votre adversaire virtuel</mat-label>\n                    <mat-select formControlName=\"virtualPlayerName\">\n                        <mat-option *ngFor=\"let virtualPlayer of getVirtualPlayerNames()\" value=\"{{ virtualPlayer }}\">{{ virtualPlayer }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </ng-container>\n            <ng-container>\n                <div class=\"buttons\">\n                    <button mat-flat-button style=\"background-color: rgb(231, 231, 231)\" mat-dialog-close (click)=\"returnToWaiting()\">\n                        Retourner en attente\n                    </button>\n                    <div\n                        matTooltip=\"Veuillez d'abord sélectionner le nom de votre adversaire virtuel\"\n                        matTooltipPosition=\"above\"\n                        [matTooltipDisabled]=\"gameParameters?.valid\"\n                    >\n                        <button\n                            mat-flat-button\n                            mat-dialog-close\n                            color=\"primary\"\n                            type=\"submit\"\n                            id=\"convert-game-button\"\n                            [disabled]=\"gameParameters?.invalid\"\n                            cdkFocusInitial\n                        >\n                            Démarrer la partie solo\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n        </form>\n    </div>\n</mat-dialog-content>\n"
        },
        {
            "name": "CreateVirtualPlayerComponent",
            "id": "component-CreateVirtualPlayerComponent-f58b3536154db3534dfce1ae8346be8943beb73a9997433c1ea8509a919fce16536cc63a280bbef51f6681793c7aa2cbad5b7cd142954258ff9641fe41c0b7e2",
            "file": "src/app/components/create-virtual-player-dialog/create-virtual-player-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-virtual-player-dialog",
            "styleUrls": [
                "./create-virtual-player-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-virtual-player-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "formParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isVirtualPlayerNameValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "virtualPlayerLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "virtualPlayerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createVirtualPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayerNameChanges",
                    "args": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { VIRTUAL_PLAYER_NAME_VALIDATION } from '@app/constants/virtual-player-name-validation';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\nimport { VirtualPlayerData } from '@common/models/virtual-player';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-create-virtual-player-dialog',\n    templateUrl: './create-virtual-player-dialog.component.html',\n    styleUrls: ['./create-virtual-player-dialog.component.scss'],\n})\nexport class CreateVirtualPlayerComponent implements OnDestroy {\n    formParameters: FormGroup;\n    virtualPlayerLevels: typeof VirtualPlayerLevel;\n    isVirtualPlayerNameValid: boolean;\n\n    private virtualPlayerName: string;\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(private dialogRef: MatDialogRef<CreateVirtualPlayerComponent>, private virtualPlayerProfilesService: VirtualPlayerProfilesService) {\n        this.componentDestroyed$ = new Subject();\n        this.virtualPlayerLevels = VirtualPlayerLevel;\n        this.virtualPlayerName = '';\n        this.isVirtualPlayerNameValid = false;\n        this.formParameters = new FormGroup({\n            level: new FormControl(VirtualPlayerLevel.Beginner),\n            inputVirtualPlayerName: new FormControl(this.virtualPlayerName, [\n                Validators.required,\n                Validators.minLength(VIRTUAL_PLAYER_NAME_VALIDATION.minLength),\n                Validators.maxLength(VIRTUAL_PLAYER_NAME_VALIDATION.maxLength),\n            ]),\n        });\n    }\n\n    onPlayerNameChanges([playerName, valid]: [string, boolean]): void {\n        this.virtualPlayerName = playerName;\n        this.isVirtualPlayerNameValid = valid;\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    async createVirtualPlayer(): Promise<void> {\n        this.virtualPlayerProfilesService.createVirtualPlayer({\n            name: this.virtualPlayerName,\n            level: this.formParameters.get('level')?.value as VirtualPlayerLevel,\n        } as VirtualPlayerData);\n        this.closeDialog();\n    }\n\n    closeDialog(): void {\n        this.dialogRef.close();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.primary {\n    color: $primary;\n}\n\n#buttons-container {\n    text-align: right;\n}\n\n.inner-container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n}\n\n$border-radius: 6px;\n\n:host ::ng-deep {\n    span.mat-button-toggle-label-content {\n        line-height: 1em;\n        height: 100%;\n        width: 100%;\n        padding: 0;\n        border-radius: $border-radius;\n    }\n}\n\n.container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: flex-start;\n\n    & > mat-card {\n        margin: 0 12px;\n    }\n\n    form {\n        mat-button-toggle-group,\n        mat-form-field {\n            width: 100%;\n        }\n\n        mat-button-toggle-group {\n            margin-top: 0.67em;\n            margin-bottom: 1.34375em;\n            text-align: center;\n        }\n\n        mat-button-toggle-group {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 12px;\n            border: none;\n            overflow: visible;\n\n            mat-button-toggle {\n                border-radius: 6px;\n                background: transparent;\n                border: none;\n                overflow: visible;\n\n                mat-card.content {\n                    background: white;\n                    border-radius: 6px;\n                    border: none;\n                    box-sizing: border-box;\n                    display: block;\n                    width: 100%;\n                    border: solid 1px rgb(236, 236, 236);\n                    padding: 8px;\n                }\n                p,\n                app-icon {\n                    margin: auto;\n                    line-height: 1em !important;\n                }\n\n                app-icon {\n                    font-size: 1.3em;\n                    margin-bottom: 0.3em;\n                    display: block;\n                }\n\n                p {\n                    font-size: 0.9em;\n                }\n\n                &.mat-button-toggle-checked {\n                    mat-card.content {\n                        background-color: rgba($primary, 0.15);\n                        border: solid 1px rgba($primary, 0.1);\n                        app-icon {\n                            color: $primary;\n                        }\n                    }\n                }\n\n                &.mat-button-toggle-disabled {\n                    mat-card.content {\n                        background-color: rgb(241, 241, 241);\n                        border-color: rgb(241, 241, 241);\n                        color: rgba(0, 0, 0, 0.459);\n                    }\n                }\n            }\n        }\n\n        mat-label.button-toggle-label {\n            display: block;\n            margin-bottom: 0.25em;\n        }\n\n        mat-form-field.margin-top {\n            margin-top: 1.34375em;\n        }\n    }\n\n    .buttons {\n        display: flex;\n        justify-content: flex-end;\n\n        button {\n            font-size: 1.2em;\n            padding: 6px 16px;\n        }\n    }\n}\n",
                    "styleUrl": "./create-virtual-player-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateVirtualPlayerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateVirtualPlayerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Ajouter un joueur virtuel</h2>\n<div class=\"container\">\n    <form [formGroup]=\"formParameters\" class=\"inner-container\" (ngSubmit)=\"createVirtualPlayer()\">\n        <div>\n            <mat-label id=\"level-label\">Choisissez le niveau du joueur virtuel:</mat-label>\n            <mat-button-toggle-group formControlName=\"level\">\n                <mat-button-toggle id=\"begginer-button\" [value]=\"virtualPlayerLevels.Beginner\">\n                    <mat-card class=\"content\">\n                        <app-icon icon=\"turtle\" styling=\"solid\"></app-icon>\n                        <p class=\"text\">{{ virtualPlayerLevels.Beginner }}</p>\n                    </mat-card>\n                </mat-button-toggle>\n                <mat-button-toggle id=\"expert-button\" [value]=\"virtualPlayerLevels.Expert\">\n                    <mat-card class=\"content\">\n                        <app-icon icon=\"rabbit\" styling=\"solid\"></app-icon>\n                        <p class=\"text\">{{ virtualPlayerLevels.Expert }}</p>\n                    </mat-card>\n                </mat-button-toggle>\n            </mat-button-toggle-group>\n        </div>\n        <div>\n                <app-name-field\n                    [initialPlayerName]=\"''\"\n                    [virtualPlayerName]=\"''\"\n                    [mustVerifyVirtualPlayerName]=\"false\"\n                    (keydown.enter)=\"$event.preventDefault()\"\n                    (playerNameChange)=\"onPlayerNameChanges($event)\"\n                ></app-name-field>\n        </div>\n        <div id=\"buttons-container\">\n            <button mat-flat-button color = \"primary\" type=\"submit\" [disabled]=\"!this.isVirtualPlayerNameValid\">\n                <app-icon icon=\"plus-circle\" styling=\"solid\" ></app-icon>\n                Ajouter\n            </button>\n            <button mat flat button mat-button color = \"primary\" type=\"button\" (click)=\"closeDialog()\">\n                <app-icon icon=\"ban\"></app-icon>\n                Annuler\n            </button> \n        </div>\n    </form>\n</div>\n    \n\n"
        },
        {
            "name": "CreateWaitingPageComponent",
            "id": "component-CreateWaitingPageComponent-a540b00ad2fbe7dd5bb338bbcedc01831b9d72b57e60c15db3e6b4f3e47319526b18fd6f82f3975a825b73fe6135c775a8416468775f082c204de5abfcdc6244",
            "file": "src/app/pages/create-waiting-page/create-waiting-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-waiting-page",
            "styleUrls": [
                "./create-waiting-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-waiting-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "opponentName",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentLobby",
                    "defaultValue": "DEFAULT_LOBBY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LobbyInfo",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "funFact",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "gameDispatcherService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameDispatcherService",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isOpponentFound",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isStartingGame",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "roundTime",
                    "defaultValue": "'1:00'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "waitingRoomMessage",
                    "defaultValue": "HOST_WAITING_MESSAGE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmConvertToSolo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmOpponentToServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmRejectionToServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "disconnectOpponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleGameCreationFail",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "opponentLeft",
                    "args": [
                        {
                            "name": "leaverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "leaverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOpponent",
                    "args": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "opponentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:beforeunload",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, HostListener, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport LobbyInfo from '@app/classes/communication/lobby-info';\nimport { Timer } from '@app/classes/round/timer';\nimport { ConvertDialogComponent, ConvertResult } from '@app/components/convert-dialog/convert-dialog.component';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { ERROR_SNACK_BAR_CONFIG } from '@app/constants/components-constants';\nimport { getRandomFact } from '@app/constants/fun-facts-scrabble-constants';\nimport {\n    DEFAULT_LOBBY,\n    DIALOG_BUTTON_CONTENT_REJECTED,\n    DIALOG_CONTENT,\n    DIALOG_TITLE,\n    HOST_WAITING_MESSAGE,\n    KEEP_DATA,\n    OPPONENT_FOUND_MESSAGE,\n} from '@app/constants/pages-constants';\nimport { GameDispatcherService } from '@app/services/';\nimport { PlayerLeavesService } from '@app/services/player-leave-service/player-leave.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-create-waiting-page',\n    templateUrl: './create-waiting-page.component.html',\n    styleUrls: ['./create-waiting-page.component.scss'],\n})\nexport class CreateWaitingPageComponent implements OnInit, OnDestroy {\n    @Input() opponentName: string | undefined = undefined;\n    isOpponentFound: boolean = false;\n    waitingRoomMessage: string = HOST_WAITING_MESSAGE;\n    roundTime: string = '1:00';\n    currentLobby: LobbyInfo = DEFAULT_LOBBY;\n    funFact: string = '';\n\n    private isStartingGame: boolean = false;\n    private componentDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(\n        public dialog: MatDialog,\n        public gameDispatcherService: GameDispatcherService,\n        private readonly playerLeavesService: PlayerLeavesService,\n        public router: Router,\n        private snackBar: MatSnackBar,\n    ) {}\n\n    @HostListener('window:beforeunload')\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n        if (!this.isStartingGame) this.gameDispatcherService.handleCancelGame();\n    }\n\n    ngOnInit(): void {\n        this.currentLobby = this.gameDispatcherService.currentLobby ?? DEFAULT_LOBBY;\n        const roundTime: Timer = Timer.convertTime(this.currentLobby.maxRoundTime);\n        this.roundTime = `${roundTime.minutes}:${roundTime.getTimerSecondsPadded()}`;\n        this.funFact = getRandomFact();\n\n        this.gameDispatcherService.subscribeToJoinRequestEvent(this.componentDestroyed$, (opponentName: string) => this.setOpponent(opponentName));\n        this.playerLeavesService.subscribeToJoinerLeavesGameEvent(this.componentDestroyed$, (leaverName: string) => this.opponentLeft(leaverName));\n        this.gameDispatcherService\n            .observeGameCreationFailed()\n            .pipe(takeUntil(this.componentDestroyed$))\n            .subscribe((error: HttpErrorResponse) => this.handleGameCreationFail(error));\n    }\n\n    confirmConvertToSolo(): void {\n        this.gameDispatcherService.handleCancelGame(KEEP_DATA);\n        this.dialog\n            .open(ConvertDialogComponent, {\n                data: this.gameDispatcherService.currentLobby?.hostName,\n            })\n            .afterClosed()\n            .subscribe((convertResult: ConvertResult) => (this.isStartingGame = convertResult.isConverting));\n    }\n\n    confirmOpponentToServer(): void {\n        this.isStartingGame = true;\n        if (this.opponentName) {\n            this.gameDispatcherService.handleConfirmation(this.opponentName);\n        }\n    }\n\n    confirmRejectionToServer(): void {\n        if (this.opponentName) {\n            this.gameDispatcherService.handleRejection(this.opponentName);\n            this.disconnectOpponent();\n        }\n    }\n\n    private setOpponent(opponentName: string): void {\n        this.opponentName = opponentName;\n        this.waitingRoomMessage = this.opponentName + OPPONENT_FOUND_MESSAGE;\n        this.isOpponentFound = true;\n    }\n\n    private disconnectOpponent(): void {\n        if (this.opponentName) {\n            this.opponentName = undefined;\n            this.waitingRoomMessage = HOST_WAITING_MESSAGE;\n            this.isOpponentFound = false;\n        }\n    }\n\n    private opponentLeft(leaverName: string): void {\n        this.disconnectOpponent();\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_TITLE,\n                content: leaverName + DIALOG_CONTENT,\n                buttons: [\n                    {\n                        content: DIALOG_BUTTON_CONTENT_REJECTED,\n                        closeDialog: true,\n                    },\n                ],\n            },\n        });\n    }\n\n    private handleGameCreationFail(error: HttpErrorResponse): void {\n        this.confirmRejectionToServer();\n        this.snackBar.open(error.error.message, 'Fermer', ERROR_SNACK_BAR_CONFIG);\n        this.router.navigateByUrl('game-creation');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n@import '../../style/utils.scss';\n\n::ng-deep body {\n    background: $page-background;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    gap: 5vh;\n\n    mat-card {\n        justify-content: center;\n        justify-items: center;\n        align-items: center;\n        text-align: center;\n        width: calc(100% - 24px);\n\n        p:first-child {\n            font-size: larger;\n        }\n\n        mat-progress-bar {\n            width: 100%;\n            margin-bottom: 2em;\n        }\n\n        .players {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: 100%;\n            gap: 1vw;\n\n            .name {\n                font-size: 1.2em;\n            }\n\n            #vs {\n                font-size: 0.9em;\n                font-weight: 600;\n                opacity: 0.55;\n            }\n        }\n\n        .chip-list {\n            display: flex;\n            justify-content: center;\n            padding-top: 20px;\n            margin-bottom: 2.75em;\n\n            .chip {\n                @include no-select;\n                background: $gray;\n                padding: 2px 12px;\n                border-radius: 100px;\n                font-size: 0.85em;\n\n                app-icon {\n                    margin-right: 5px;\n                    width: 100%;\n                }\n\n                &:not(:last-child) {\n                    margin-right: 6px;\n                }\n            }\n        }\n\n        .button-box {\n            display: flex;\n            flex-direction: column;\n            height: 35%;\n            align-content: center;\n\n            .button {\n                margin-bottom: 6px;\n                width: 100%;\n            }\n        }\n    }\n\n    mat-card.top-box {\n        max-width: 350px;\n    }\n\n    mat-card.fun-fact-box {\n        max-width: 750px;\n        text-align: center;\n\n        #intro {\n            color: $primary;\n            font-weight: bold;\n            font-style: italic;\n            font-size: larger;\n        }\n    }\n}\n\n#game-creation-waiting-container {\n    margin-top: -64px;\n    display: grid;\n    align-items: center;\n    justify-items: center;\n\n    mat-label {\n        margin-bottom: 16px;\n        font-weight: 500;\n        font-size: 24px;\n    }\n}\n\n::ng-deep snack-bar-container.error {\n    background: lighten(tomato, 30%);\n    color: tomato;\n\n    button {\n        color: tomato;\n    }\n}\n",
                    "styleUrl": "./create-waiting-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerLeavesService",
                        "type": "PlayerLeavesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerLeavesService",
                        "type": "PlayerLeavesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n    <mat-card class=\"top-box\">\n        <div class=\"center\">\n            <p>{{ waitingRoomMessage }}</p>\n            <ng-container *ngIf=\"!isOpponentFound\">\n                <mat-progress-bar class=\"progress\" mode=\"indeterminate\"></mat-progress-bar>\n            </ng-container>\n            <ng-container *ngIf=\"isOpponentFound\">\n                <mat-progress-bar class=\"progress\" mode=\"determinate\" value=\"100\"></mat-progress-bar>\n            </ng-container>\n        </div>\n\n        <div class=\"players\">\n            <span class=\"name\"\n                ><b>{{ currentLobby.hostName }}</b></span\n            ><span id=\"vs\"> vs </span><span class=\"name\">{{ opponentName ?? '...' }}</span>\n        </div>\n\n        <div class=\"chip-list\">\n            <div class=\"chip\"><app-icon icon=\"hourglass-half\" size=\"sm\"></app-icon> {{ roundTime }}</div>\n            <div class=\"chip\">\n                <app-icon icon=\"gamepad\"></app-icon>\n                {{ currentLobby.gameType }}\n            </div>\n            <div class=\"chip\">\n                <app-icon icon=\"book\"></app-icon>\n                {{ currentLobby.dictionary.title }}\n            </div>\n        </div>\n\n        <div class=\"button-box\">\n            <button\n                id=\"start-game-button\"\n                class=\"button\"\n                mat-flat-button\n                color=\"primary\"\n                [disabled]=\"!isOpponentFound\"\n                (click)=\"confirmOpponentToServer()\"\n            >\n                Démarrer la partie\n            </button>\n\n            <button\n                id=\"reject-button\"\n                class=\"button\"\n                mat-flat-button\n                color=\"primary\"\n                [disabled]=\"!isOpponentFound\"\n                (click)=\"confirmRejectionToServer()\"\n            >\n                Rejeter cet adversaire\n            </button>\n\n            <button\n                id=\"convert-solo-button\"\n                mat-flat-button\n                class=\"button\"\n                color=\"primary\"\n                [disabled]=\"isOpponentFound\"\n                (click)=\"confirmConvertToSolo()\"\n            >\n                Convertir en partie solo\n            </button>\n\n            <button id=\"cancel-button\" mat-flat-button class=\"button\" color=\"primary\" routerLink=\"/game-creation\">Annuler la partie</button>\n        </div>\n    </mat-card>\n\n    <mat-card class=\"fun-fact-box\">\n        <p id=\"intro\">Le saviez-vous ?</p>\n        <p id=\"fact\">{{ funFact }}</p>\n    </mat-card>\n</div>\n"
        },
        {
            "name": "DefaultDialogComponent",
            "id": "component-DefaultDialogComponent-37c14031967d6ed6264fd0eb2566075aef43db90271f0cb6bdcf1e20c0569b3afc31f8abc3a2c80934e24ae76eb037bbec3f3525af4be8721659871f99c916de",
            "file": "src/app/components/default-dialog/default-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-default-dialog",
            "styleUrls": [
                "./default-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DefaultDialogButtonParameters[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DefaultDialogParameters",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "handleButtonClick",
                    "args": [
                        {
                            "name": "button",
                            "type": "DefaultDialogButtonParameters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "DefaultDialogButtonParameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { BUTTON_MUST_HAVE_CONTENT, DIALOG_BUTTONS_MUST_BE_AN_ARRAY, DIALOG_MUST_HAVE_TITLE } from '@app/constants/component-errors';\nimport { DefaultDialogButtonParameters, DefaultDialogParameters } from './default-dialog.component.types';\n\n@Component({\n    selector: 'app-default-dialog',\n    templateUrl: './default-dialog.component.html',\n    styleUrls: ['./default-dialog.component.scss'],\n})\nexport class DefaultDialogComponent {\n    title: string;\n    content: string | undefined;\n    buttons: DefaultDialogButtonParameters[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: DefaultDialogParameters, private router: Router) {\n        // Data must be handled because it is not typed correctly when used in dialog.open(...)\n        if (!this.data.title || typeof this.data.title !== 'string') throw new Error(DIALOG_MUST_HAVE_TITLE);\n\n        this.title = this.data.title;\n        this.content = this.data.content;\n        this.buttons = [];\n\n        if (!this.data.buttons) return;\n        if (!Array.isArray(this.data.buttons)) throw new Error(DIALOG_BUTTONS_MUST_BE_AN_ARRAY);\n\n        this.data.buttons.forEach((button) => {\n            if (!button.content) throw new Error(BUTTON_MUST_HAVE_CONTENT);\n            this.buttons.push({\n                content: button.content,\n                closeDialog: button.redirect ? true : button.closeDialog ?? false,\n                action: button.action,\n                redirect: button.redirect,\n                style: button.style,\n                icon: button.icon,\n            });\n        });\n    }\n\n    handleButtonClick(button: DefaultDialogButtonParameters): void {\n        if (button.action) button.action();\n        if (button.redirect) this.router.navigate([button.redirect]);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./default-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DefaultDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DefaultDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{ title }}</h2>\n<mat-dialog-content>\n    {{ content }}\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <ng-container *ngFor=\"let btn of buttons\">\n        <button class=\"dialog-button\" [style]=\"btn.style\" mat-button mat-dialog-close *ngIf=\"btn.closeDialog\" (click)=\"handleButtonClick(btn)\">\n            <app-icon *ngIf=\"btn.icon\" [icon]=\"btn.icon\"></app-icon>\n            {{ btn.content }}\n        </button>\n        <button class=\"dialog-button\" [style]=\"btn.style\" mat-button *ngIf=\"!btn.closeDialog\" (click)=\"handleButtonClick(btn)\">\n            <app-icon *ngIf=\"btn.icon\" [icon]=\"btn.icon\"></app-icon>\n            {{ btn.content }}\n        </button>\n    </ng-container>\n</mat-dialog-actions>\n"
        },
        {
            "name": "DeleteDictionaryDialogComponent",
            "id": "component-DeleteDictionaryDialogComponent-34a7af7085821fa93c4ee830f12359a46c113ef482b2c705c2bfb6f93760262dd544ed62d5a2505523226299bcc5cbe1e024842610a3ec348fb05ba76928aa2f",
            "file": "src/app/components/delete-dictionary-dialog/delete-dictionary-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-dictionary-dialog",
            "styleUrls": [
                "delete-dictionary-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "delete-dictionary-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeleteDictionaryDialogParameters",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dictionaryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteDictionary",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ModifyDictionaryComponent } from '@app/components/modify-dictionary-dialog/modify-dictionary-dialog.component';\nimport { DictionaryService } from '@app/services/dictionary-service/dictionary.service';\nimport { DeleteDictionaryDialogParameters } from './delete-dictionary-dialog.component.types';\n\n@Component({\n    selector: 'app-delete-dictionary-dialog',\n    templateUrl: 'delete-dictionary-dialog.component.html',\n    styleUrls: ['delete-dictionary-dialog.component.scss'],\n})\nexport class DeleteDictionaryDialogComponent {\n    private dictionaryId: string;\n\n    constructor(\n        private dialogRef: MatDialogRef<ModifyDictionaryComponent>,\n        private dictionariesService: DictionaryService,\n        @Inject(MAT_DIALOG_DATA) public data: DeleteDictionaryDialogParameters,\n    ) {\n        this.dictionaryId = data.dictionaryId;\n    }\n\n    closeDialog(): void {\n        this.dialogRef.close();\n    }\n\n    async deleteDictionary(): Promise<void> {\n        await this.dictionariesService.deleteDictionary(this.dictionaryId);\n        this.closeDialog();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.primary {\n    color: $primary;\n}\n.secondary {\n    opacity: 0.45;\n}\n\n#buttons-container {\n    text-align: right;\n    margin-top: 25px;\n}\n\n.bold-primary {\n    color: $primary;\n    font-weight: 500;\n}",
                    "styleUrl": "delete-dictionary-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModifyDictionaryComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DeleteDictionaryDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModifyDictionaryComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DeleteDictionaryDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Supprimer le dictionnaire</h2>\n<span>Voulez-vous supprimer le dictionnaire \n    <span class=\"bold-primary\">\n        {{data.pageTitle}}\n    </span>\n    ?\n</span>\n\n<div id=\"buttons-container\">\n    <button mat-flat-button color = \"primary\" (click)=\"deleteDictionary()\">\n        <app-icon icon=\"trash-alt\"></app-icon>\n        Supprimer\n    </button>\n    <button mat-flat-button  (click)=\"closeDialog()\">\n        <app-icon icon=\"ban\"></app-icon>\n        Annuler\n    </button> \n</div>"
        },
        {
            "name": "DeleteVirtualPlayerDialogComponent",
            "id": "component-DeleteVirtualPlayerDialogComponent-5e61bf17f9efc314b25ced49383d37038f1c19826c9a35985e3c725bd2f22223c3ce39b6950a41fa2d829ddc7a5449e3823b3d92fcf20157c3a79e4091369e7e",
            "file": "src/app/components/delete-virtual-player-dialog/delete-virtual-player-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-virtual-player-dialog",
            "styleUrls": [
                "delete-virtual-player-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "delete-virtual-player-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeleteVirtualPlayerDialogParameters",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "virtualPlayerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteVirtualPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DeleteVirtualPlayerDialogParameters } from '@app/components/admin-virtual-players/admin-virtual-players.types';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\n\n@Component({\n    selector: 'app-delete-virtual-player-dialog',\n    templateUrl: 'delete-virtual-player-dialog.component.html',\n    styleUrls: ['delete-virtual-player-dialog.component.scss'],\n})\nexport class DeleteVirtualPlayerDialogComponent {\n    virtualPlayerId: number;\n    constructor(\n        private dialogRef: MatDialogRef<DeleteVirtualPlayerDialogComponent>,\n        private virtualPlayerProfilesService: VirtualPlayerProfilesService,\n        @Inject(MAT_DIALOG_DATA) public data: DeleteVirtualPlayerDialogParameters,\n    ) {\n        this.virtualPlayerId = data.idVirtualPlayer;\n    }\n\n    closeDialog(): void {\n        this.dialogRef.close();\n    }\n\n    deleteVirtualPlayer(): void {\n        this.virtualPlayerProfilesService.deleteVirtualPlayer(this.virtualPlayerId);\n        this.closeDialog();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.primary {\n    color: $primary;\n}\n.secondary {\n    opacity: 0.45;\n}\n\n#buttons-container {\n    text-align: right;\n    margin-top: 25px;\n}\n\n.bold-primary {\n    color: $primary;\n    font-weight: 500;\n}",
                    "styleUrl": "delete-virtual-player-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteVirtualPlayerDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DeleteVirtualPlayerDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteVirtualPlayerDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DeleteVirtualPlayerDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Supprimer le joueur virtuel</h2>\n<span>Voulez-vous supprimer \n    <span class=\"bold-primary\">\n        {{data.name}}\n    </span>\n    de niveau \n    <span class=\"bold-primary\">\n        {{data.level}}\n    </span> \n    ?\n</span>\n\n<div id=\"buttons-container\">\n    <button mat-flat-button color = \"primary\" (click)=\"deleteVirtualPlayer()\">\n        <app-icon icon=\"trash-alt\"></app-icon>\n        Supprimer\n    </button>\n    <button mat flat button mat-button color = \"primary\" type=\"button\" (click)=\"closeDialog()\">\n        <app-icon icon=\"ban\"></app-icon>\n        Annuler\n    </button> \n</div>"
        },
        {
            "name": "GameCreationPageComponent",
            "id": "component-GameCreationPageComponent-fbba678fee5a97c6db3992d359a631c8fb87e4ac903c1eee9608455ed2c883f8443bb05798e56dffcc021a3923e1d19a299bce75970bbed5f3e28886af8899ec",
            "file": "src/app/pages/game-creation-page/game-creation-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-creation-page",
            "styleUrls": [
                "./game-creation-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./game-creation-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dictionaryDeletedError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "dictionaryOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionarySummary[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "dictionaryRequiredError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "gameModes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "gameParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "gameTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isCreatingGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "nameField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NameFieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NameFieldComponent"
                        }
                    ]
                },
                {
                    "name": "pageDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "playerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "playerNameValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "shouldSetToDefaultDictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "virtualPlayerLevels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "virtualPlayerNameMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<VirtualPlayerLevel | string[]>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "wasDictionaryDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "createGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "generateVirtualPlayerProfileMap",
                    "args": [
                        {
                            "name": "virtualPlayerProfiles",
                            "type": "VirtualPlayer[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "virtualPlayerProfiles",
                            "type": "VirtualPlayer[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultTimerValue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getVirtualPlayerNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDictionaryDeleted",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                },
                {
                    "name": "handleGameCreationFail",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFormValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "onDictionaryChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormInvalidClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayerNameChanges",
                    "args": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DictionarySummary } from '@app/classes/communication/dictionary-summary';\nimport { VirtualPlayerLevel } from '@app/classes/player/virtual-player-level';\nimport { NameFieldComponent } from '@app/components/name-field/name-field.component';\nimport { DICTIONARY_DELETED, DICTIONARY_REQUIRED } from '@app/constants/component-errors';\nimport { INVALID_DICTIONARY_ID } from '@app/constants/controllers-errors';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\nimport { DEFAULT_TIMER_VALUE } from '@app/constants/pages-constants';\nimport { DICTIONARY_NAME_KEY, PLAYER_NAME_KEY, TIMER_KEY } from '@app/constants/session-storage-constants';\nimport { GameDispatcherService } from '@app/services';\nimport { DictionaryService } from '@app/services/dictionary-service/dictionary.service';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\nimport { randomizeArray } from '@app/utils/randomize-array/randomize-array';\nimport { VirtualPlayer } from '@common/models/virtual-player';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-game-creation-page',\n    templateUrl: './game-creation-page.component.html',\n    styleUrls: ['./game-creation-page.component.scss'],\n})\nexport class GameCreationPageComponent implements OnInit, OnDestroy {\n    @ViewChild(NameFieldComponent) nameField: NameFieldComponent;\n\n    gameTypes: typeof GameType;\n    gameModes: typeof GameMode;\n    virtualPlayerLevels: typeof VirtualPlayerLevel;\n    dictionaryOptions: DictionarySummary[];\n    playerName: string;\n    gameParameters: FormGroup;\n\n    dictionaryRequiredError: string;\n    dictionaryDeletedError: string;\n    wasDictionaryDeleted: boolean;\n\n    isCreatingGame: boolean;\n\n    private playerNameValid: boolean;\n    private shouldSetToDefaultDictionary: boolean;\n    private virtualPlayerNameMap: Map<VirtualPlayerLevel, string[]>;\n    private pageDestroyed$: Subject<boolean>;\n\n    constructor(\n        private gameDispatcherService: GameDispatcherService,\n        private readonly virtualPlayerProfilesService: VirtualPlayerProfilesService,\n        private readonly dictionaryService: DictionaryService,\n    ) {\n        this.gameTypes = GameType;\n        this.gameModes = GameMode;\n        this.virtualPlayerLevels = VirtualPlayerLevel;\n        this.dictionaryOptions = [];\n        this.virtualPlayerNameMap = new Map();\n        this.playerName = window.localStorage.getItem(PLAYER_NAME_KEY) || '';\n        this.playerNameValid = false;\n        this.pageDestroyed$ = new Subject();\n        this.gameParameters = new FormGroup({\n            gameType: new FormControl(GameType.Classic, Validators.required),\n            gameMode: new FormControl(GameMode.Multiplayer, Validators.required),\n            level: new FormControl(VirtualPlayerLevel.Beginner),\n            virtualPlayerName: new FormControl(''),\n            timer: new FormControl(this.getDefaultTimerValue(), Validators.required),\n            dictionary: new FormControl(undefined, [Validators.required]),\n        });\n\n        this.dictionaryRequiredError = DICTIONARY_REQUIRED;\n        this.dictionaryDeletedError = DICTIONARY_DELETED;\n        this.wasDictionaryDeleted = false;\n\n        this.isCreatingGame = false;\n\n        this.shouldSetToDefaultDictionary = true;\n\n        this.gameDispatcherService\n            .observeGameCreationFailed()\n            .pipe(takeUntil(this.pageDestroyed$))\n            .subscribe(async (error: HttpErrorResponse) => await this.handleGameCreationFail(error));\n\n        this.dictionaryService.subscribeToDictionariesUpdateDataEvent(this.pageDestroyed$, () => {\n            this.dictionaryOptions = this.dictionaryService.getDictionaries();\n            if (this.shouldSetToDefaultDictionary)\n                this.gameParameters.patchValue({\n                    dictionary:\n                        this.dictionaryOptions.find((d) => d.title === window.localStorage.getItem(DICTIONARY_NAME_KEY)) || this.dictionaryOptions[0],\n                });\n        });\n    }\n\n    async ngOnInit(): Promise<void> {\n        this.gameParameters\n            .get('gameMode')\n            ?.valueChanges.pipe(takeUntil(this.pageDestroyed$), distinctUntilChanged())\n            .subscribe((value) => {\n                if (value === this.gameModes.Solo) {\n                    this.gameParameters?.get('level')?.setValidators([Validators.required]);\n                    this.gameParameters?.get('virtualPlayerName')?.setValidators([Validators.required]);\n                } else {\n                    this.gameParameters?.get('level')?.clearValidators();\n                    this.gameParameters?.get('virtualPlayerName')?.clearValidators();\n                }\n                this.gameParameters?.get('level')?.updateValueAndValidity();\n                this.gameParameters?.get('virtualPlayerName')?.updateValueAndValidity();\n                this.gameParameters.patchValue({ virtualPlayerName: randomizeArray(this.getVirtualPlayerNames())[0] });\n            });\n\n        await this.dictionaryService.updateAllDictionaries();\n\n        this.gameParameters\n            .get('level')\n            ?.valueChanges.pipe(takeUntil(this.pageDestroyed$), distinctUntilChanged())\n            .subscribe(() => this.gameParameters.patchValue({ virtualPlayerName: randomizeArray(this.getVirtualPlayerNames())[0] }));\n\n        this.virtualPlayerProfilesService.subscribeToVirtualPlayerProfilesUpdateEvent(this.pageDestroyed$, (profiles) => {\n            this.generateVirtualPlayerProfileMap(profiles);\n        });\n        this.virtualPlayerProfilesService.getAllVirtualPlayersProfile();\n    }\n\n    ngOnDestroy(): void {\n        this.pageDestroyed$.next(true);\n        this.pageDestroyed$.complete();\n    }\n\n    isFormValid(): boolean {\n        return this.gameParameters?.valid && this.playerNameValid;\n    }\n\n    onSubmit(): void {\n        if (this.isFormValid()) {\n            window.localStorage.setItem(PLAYER_NAME_KEY, this.playerName);\n            window.localStorage.setItem(DICTIONARY_NAME_KEY, this.gameParameters.get('dictionary')?.value.title);\n            window.localStorage.setItem(TIMER_KEY, this.gameParameters.get('timer')?.value);\n            this.createGame();\n        }\n    }\n\n    onPlayerNameChanges([playerName, valid]: [string, boolean]): void {\n        this.playerName = playerName;\n        this.playerNameValid = valid;\n    }\n\n    onFormInvalidClick(): void {\n        this.gameParameters.controls.dictionary?.markAsTouched();\n        this.onDictionaryChange();\n        this.nameField.onFormInvalidClick();\n    }\n\n    onDictionaryChange(): void {\n        this.wasDictionaryDeleted = false;\n    }\n\n    getVirtualPlayerNames(): string[] {\n        if (!this.virtualPlayerNameMap) return [];\n        const namesForLevel: string[] | undefined = this.virtualPlayerNameMap.get(this.gameParameters.get('level')?.value);\n        return namesForLevel ?? [];\n    }\n\n    private generateVirtualPlayerProfileMap(virtualPlayerProfiles: VirtualPlayer[]): void {\n        virtualPlayerProfiles.forEach((profile: VirtualPlayer) => {\n            const namesForLevel: string[] | undefined = this.virtualPlayerNameMap.get(profile.level as VirtualPlayerLevel);\n            if (!namesForLevel) this.virtualPlayerNameMap.set(profile.level as VirtualPlayerLevel, [profile.name]);\n            else namesForLevel.push(profile.name);\n        });\n    }\n\n    private getDefaultTimerValue(): number {\n        const INVALID = -1;\n        const time = Number.parseInt(window.localStorage.getItem(TIMER_KEY) || `${INVALID}`, 10);\n        return !Number.isNaN(time) && time > INVALID ? time : DEFAULT_TIMER_VALUE;\n    }\n\n    private createGame(): void {\n        this.isCreatingGame = true;\n        this.gameDispatcherService.handleCreateGame(this.playerName, this.gameParameters);\n    }\n\n    private async handleGameCreationFail(error: HttpErrorResponse): Promise<void> {\n        if (error.error.message === INVALID_DICTIONARY_ID) {\n            await this.handleDictionaryDeleted();\n        }\n    }\n\n    private async handleDictionaryDeleted(): Promise<void> {\n        this.wasDictionaryDeleted = true;\n        this.shouldSetToDefaultDictionary = false;\n        await this.dictionaryService.updateAllDictionaries();\n        this.gameParameters.controls.dictionary?.setValue(undefined);\n        this.gameParameters.controls.dictionary?.markAsTouched();\n        this.isCreatingGame = false;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n::ng-deep body {\n    background: $page-background;\n}\n\n$border-radius: 6px;\n\n:host ::ng-deep {\n    span.mat-button-toggle-label-content {\n        line-height: 1em;\n        height: 100%;\n        width: 100%;\n        padding: 0;\n        border-radius: $border-radius;\n    }\n}\n\n::ng-deep .mat-tooltip {\n    font-size: small;\n}\n\n.page {\n    .container {\n        #game-creation-waiting-container {\n            padding-top: 256px;\n            display: grid;\n            align-items: center;\n            justify-items: center;\n\n            mat-label {\n                margin-bottom: 16px;\n                font-weight: 500;\n                font-size: 24px;\n            }\n        }\n\n        max-width: 625px;\n        margin: 0 auto;\n        padding-top: 54px;\n\n        & > mat-card {\n            margin: 0 12px;\n        }\n\n        form {\n            mat-button-toggle-group,\n            mat-form-field {\n                width: 100%;\n            }\n\n            mat-button-toggle-group {\n                margin-bottom: 1.34375em;\n            }\n\n            mat-button-toggle-group {\n                display: grid;\n                grid-template-columns: repeat(2, 1fr);\n                gap: 12px;\n                border: none;\n                overflow: visible;\n\n                mat-button-toggle {\n                    border-radius: $border-radius;\n                    background: transparent;\n                    border: none;\n                    overflow: visible;\n\n                    mat-card.content {\n                        background: white;\n                        border-radius: $border-radius;\n                        border: none;\n                        box-sizing: border-box;\n                        display: block;\n                        width: 100%;\n                        border: solid 1px rgb(236, 236, 236);\n                        padding: 8px;\n                    }\n                    p,\n                    app-icon {\n                        margin: auto;\n                        line-height: 1em !important;\n                    }\n\n                    app-icon {\n                        font-size: 1.3em;\n                        margin-bottom: 0.3em;\n                        display: block;\n                    }\n\n                    p {\n                        font-size: 0.9em;\n                    }\n\n                    &.mat-button-toggle-checked {\n                        mat-card.content {\n                            background-color: rgba($primary, 0.15);\n                            border: solid 1px rgba($primary, 0.1);\n                            app-icon {\n                                color: $primary;\n                            }\n                        }\n                    }\n\n                    &.mat-button-toggle-disabled {\n                        mat-card.content {\n                            background-color: rgb(241, 241, 241);\n                            border-color: rgb(241, 241, 241);\n                            color: rgba(0, 0, 0, 0.459);\n                        }\n                    }\n                }\n            }\n\n            mat-label.button-toggle-label {\n                display: block;\n                margin-bottom: 0.25em;\n            }\n\n            mat-form-field.margin-top {\n                margin-top: 1.34375em;\n            }\n\n            app-timer-selection {\n                display: block;\n            }\n\n            .alert {\n                color: red;\n                display: flex;\n            }\n\n            .alert-group {\n                margin: -1.34375em 0px calc(1.34375em / 2) 2px;\n                height: 100%;\n                color: red;\n            }\n        }\n\n        .buttons {\n            display: flex;\n            justify-content: flex-end;\n\n            button {\n                font-size: 1.2em;\n                padding: 6px 16px;\n            }\n        }\n    }\n}\n\n.dictionary-title {\n    font-weight: 500;\n}\n.dictionary-description {\n    color: rgba(0, 0, 0, 0.6);\n    font-size: 12px;\n}\n\n::ng-deep snack-bar-container.error {\n    background: lighten(tomato, 30%);\n    color: tomato;\n\n    button {\n        color: tomato;\n    }\n}\n",
                    "styleUrl": "./game-creation-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dictionaryService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dictionaryService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n    <app-page-header title=\"Création de partie\" button=\"Rejoindre une partie\" buttonRoute=\"/lobby\"></app-page-header>\n\n    <br />\n\n    <div class=\"container\">\n        <div *ngIf=\"isCreatingGame\" id=\"game-creation-waiting-container\">\n            <app-loading-page></app-loading-page>\n        </div>\n        <mat-card *ngIf=\"!isCreatingGame\">\n            <form [formGroup]=\"gameParameters\" (ngSubmit)=\"onSubmit()\">\n                <mat-label class=\"button-toggle-label\">Choisissez un type de partie</mat-label>\n                <mat-button-toggle-group formControlName=\"gameType\" ngDefaultControl>\n                    <mat-button-toggle id=\"classic-button\" [value]=\"gameTypes.Classic\">\n                        <mat-card class=\"content\">\n                            <app-icon icon=\"chess-pawn\" styling=\"solid\"></app-icon>\n                            <p class=\"text\">{{ gameTypes.Classic }}</p>\n                        </mat-card>\n                    </mat-button-toggle>\n                    <mat-button-toggle id=\"log2990-button\" [value]=\"gameTypes.LOG2990\">\n                        <mat-card class=\"content\">\n                            <app-icon icon=\"chess-queen\" styling=\"solid\"></app-icon>\n                            <p class=\"text\">{{ gameTypes.LOG2990 }}</p>\n                        </mat-card>\n                    </mat-button-toggle>\n                </mat-button-toggle-group>\n\n                <mat-divider></mat-divider>\n                <br />\n\n                <mat-label class=\"button-toggle-label\">Choisissez un mode de jeu</mat-label>\n                <mat-button-toggle-group formControlName=\"gameMode\" ngDefaultControl>\n                    <mat-button-toggle id=\"solo-button\" [value]=\"gameModes.Solo\">\n                        <mat-card class=\"content\">\n                            <app-icon icon=\"user\" styling=\"solid\"></app-icon>\n                            <p class=\"text\">{{ gameModes.Solo }}</p>\n                        </mat-card>\n                    </mat-button-toggle>\n                    <mat-button-toggle id=\"multi-button\" [value]=\"gameModes.Multiplayer\">\n                        <mat-card class=\"content\">\n                            <app-icon icon=\"user-friends\" styling=\"solid\"></app-icon>\n                            <p class=\"text\">{{ gameModes.Multiplayer }}</p>\n                        </mat-card>\n                    </mat-button-toggle>\n                </mat-button-toggle-group>\n\n                <ng-container *ngIf=\"gameParameters.get('gameMode')?.value === gameModes.Solo\">\n                    <mat-label class=\"button-toggle-label\" id=\"level-label\">Choisissez le niveau de votre adversaire virtuel</mat-label>\n                    <mat-button-toggle-group id=\"level-buttons\" formControlName=\"level\">\n                        <mat-button-toggle id=\"begginer-button\" [value]=\"virtualPlayerLevels.Beginner\">\n                            <mat-card class=\"content\">\n                                <app-icon icon=\"turtle\" styling=\"solid\"></app-icon>\n                                <p class=\"text\">{{ virtualPlayerLevels.Beginner }}</p>\n                            </mat-card>\n                        </mat-button-toggle>\n\n                        <mat-button-toggle id=\"expert-button\" [value]=\"virtualPlayerLevels.Expert\">\n                            <mat-card class=\"content\">\n                                <app-icon icon=\"rabbit\" styling=\"solid\"></app-icon>\n                                <p class=\"text\">{{ virtualPlayerLevels.Expert }}</p>\n                            </mat-card>\n                        </mat-button-toggle>\n                    </mat-button-toggle-group>\n\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label floatLabel=\"always\">Choissez votre adversaire virtuel</mat-label>\n                        <mat-select formControlName=\"virtualPlayerName\" (selectionChange)=\"isFormValid()\">\n                            <mat-option *ngFor=\"let virtualPlayer of getVirtualPlayerNames()\" value=\"{{ virtualPlayer }}\">{{\n                                virtualPlayer\n                            }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </ng-container>\n\n                <mat-divider></mat-divider>\n\n                <mat-form-field appearance=\"outline\" class=\"margin-top\">\n                    <mat-label floatLabel=\"always\"><app-icon icon=\"book\"></app-icon> Choisissez le dictionnaire à utiliser</mat-label>\n                    <mat-select formControlName=\"dictionary\" (selectionChange)=\"onDictionaryChange()\">\n                        <mat-select-trigger>\n                            <span class=\"dictionary-title\">{{ gameParameters.get('dictionary')?.value?.title }}</span>\n                            <span> - </span>\n                            <span class=\"dictionary-description\">{{ gameParameters.get('dictionary')?.value?.description }}</span>\n                        </mat-select-trigger>\n                        <mat-option *ngFor=\"let dictionary of dictionaryOptions\" [value]=\"dictionary\">\n                            <span class=\"dictionary-title\">{{ dictionary.title }}</span>\n                            <span> - </span>\n                            <span class=\"dictionary-description\">{{ dictionary.description }}</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <div\n                    class=\"alert-group\"\n                    *ngIf=\"\n                        (gameParameters.get('dictionary')?.invalid &&\n                        (gameParameters.get('dictionary')?.dirty || gameParameters.get('dictionary')?.touched)) && gameParameters.get('dictionary')?.errors?.['required']\n                    \"\n                >\n                    <mat-error class=\"alert\" *ngIf=\"!wasDictionaryDeleted\">\n                        {{ dictionaryRequiredError }}\n                    </mat-error>\n                    <mat-error class=\"alert\" *ngIf=\"wasDictionaryDeleted\">\n                        {{ dictionaryDeletedError }}\n                    </mat-error>\n                </div>\n\n                <app-timer-selection [parentForm]=\"gameParameters\"></app-timer-selection>\n\n                <app-name-field\n                    [initialPlayerName]=\"playerName\"\n                    [virtualPlayerName]=\"gameParameters.get('virtualPlayerName')?.value\"\n                    [mustVerifyVirtualPlayerName]=\"gameParameters.get('gameMode')?.value === gameModes.Solo\"\n                    (keydown.enter)=\"$event.preventDefault()\"\n                    (playerNameChange)=\"onPlayerNameChanges($event)\"\n                ></app-name-field>\n\n                <div class=\"buttons\">\n                    <div\n                        class=\"button-container\"\n                        matTooltip=\"Veuillez remplir tous les champs avec des données valides\"\n                        [matTooltipDisabled]=\"isFormValid()\"\n                        matTooltipPosition=\"above\"\n                        (click)=\"onFormInvalidClick()\"\n                    >\n                        <button mat-flat-button color=\"primary\" type=\"submit\" id=\"create-game-button\" [disabled]=\"!isFormValid()\" cdkFocusInitial>\n                            Créer la partie\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </mat-card>\n    </div>\n</div>\n"
        },
        {
            "name": "GamePageComponent",
            "id": "component-GamePageComponent-bb9a8a0c993c634ef459833cf5e4f52395dfaf5559ac92f7312acb44bceb80f2488b33662be57adfa89d34a986906fea267ac6b825bea8605facf92aa44e9485",
            "file": "src/app/pages/game-page/game-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-page",
            "styleUrls": [
                "./game-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./game-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardComponent",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BoardComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gameService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameService",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mustDisconnectGameOnLeave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "surrenderDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tileRackComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TileRackComponent",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TileRackComponent, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "canPlaceWord",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canPlay",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeTileFontSize",
                    "args": [
                        {
                            "name": "operation",
                            "type": "FontSizeChangeOperations",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "FontSizeChangeOperations",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "endOfGameDialog",
                    "args": [
                        {
                            "name": "winnerNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "winnerNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keypress', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEventArrowLeft",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.arrowleft', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEventArrowRight",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.arrowright', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEventBackspace",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.backspace', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeyboardEventEsc",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePlayerLeaves",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hintButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLocalPlayerTurn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLocalPlayerWinner",
                    "args": [
                        {
                            "name": "winnerNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "winnerNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noActiveGameDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "buttonsContent",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "buttonsContent",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "passButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "placeButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "quitButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "throwConfettis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.arrowleft",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83
                },
                {
                    "name": "document:keydown.arrowright",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88
                },
                {
                    "name": "document:keydown.backspace",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79
                },
                {
                    "name": "document:keydown.escape",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75
                },
                {
                    "name": "document:keypress",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71
                },
                {
                    "name": "window:beforeunload",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActionType, PlaceActionPayload } from '@app/classes/actions/action-data';\nimport { BoardComponent } from '@app/components/board/board.component';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { TileRackComponent } from '@app/components/tile-rack/tile-rack.component';\nimport { FontSizeChangeOperations } from '@app/constants/font-size-operations';\nimport {\n    DIALOG_ABANDON_BUTTON_CONFIRM,\n    DIALOG_ABANDON_BUTTON_CONTINUE,\n    DIALOG_ABANDON_CONTENT,\n    DIALOG_ABANDON_TITLE,\n    DIALOG_END_OF_GAME_CLOSE_BUTTON,\n    DIALOG_END_OF_GAME_CONTENT,\n    DIALOG_END_OF_GAME_TITLE,\n    DIALOG_NO_ACTIVE_GAME_BUTTON,\n    DIALOG_NO_ACTIVE_GAME_CONTENT,\n    DIALOG_NO_ACTIVE_GAME_TITLE,\n    DIALOG_QUIT_BUTTON_CONFIRM,\n    DIALOG_QUIT_CONTENT,\n    DIALOG_QUIT_STAY,\n    DIALOG_QUIT_TITLE,\n    MAX_CONFETTI_COUNT,\n    MIN_CONFETTI_COUNT,\n} from '@app/constants/pages-constants';\nimport {\n    RACK_FONT_SIZE_INCREMENT,\n    RACK_TILE_MAX_FONT_SIZE,\n    RACK_TILE_MIN_FONT_SIZE,\n    SQUARE_FONT_SIZE_INCREMENT,\n    SQUARE_TILE_MAX_FONT_SIZE,\n    SQUARE_TILE_MIN_FONT_SIZE,\n} from '@app/constants/tile-font-size-constants';\nimport { GameService } from '@app/services';\nimport { ActionService } from '@app/services/action-service/action.service';\nimport { FocusableComponentsService } from '@app/services/focusable-components-service/focusable-components.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport { PlayerLeavesService } from '@app/services/player-leave-service/player-leave.service';\nimport { ReconnectionService } from '@app/services/reconnection-service/reconnection.service';\nimport party from 'party-js';\nimport { DynamicSourceType } from 'party-js/lib/systems/sources';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-game-page',\n    templateUrl: './game-page.component.html',\n    styleUrls: ['./game-page.component.scss'],\n})\nexport class GamePageComponent implements OnInit, OnDestroy {\n    @ViewChild(BoardComponent, { static: false }) boardComponent: BoardComponent;\n    @ViewChild(TileRackComponent, { static: false }) tileRackComponent: TileRackComponent;\n\n    private mustDisconnectGameOnLeave: boolean;\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(\n        public dialog: MatDialog,\n        public gameService: GameService,\n        private focusableComponentService: FocusableComponentsService,\n        private readonly reconnectionService: ReconnectionService,\n        public surrenderDialog: MatDialog,\n        private playerLeavesService: PlayerLeavesService,\n        private gameViewEventManagerService: GameViewEventManagerService,\n        private actionService: ActionService,\n    ) {\n        this.mustDisconnectGameOnLeave = true;\n        this.componentDestroyed$ = new Subject();\n    }\n\n    @HostListener('document:keypress', ['$event'])\n    handleKeyboardEvent(event: KeyboardEvent): void {\n        this.focusableComponentService.emitKeyboard(event);\n    }\n    @HostListener('document:keydown.escape', ['$event'])\n    handleKeyboardEventEsc(event: KeyboardEvent): void {\n        this.focusableComponentService.emitKeyboard(event);\n    }\n    @HostListener('document:keydown.backspace', ['$event'])\n    handleKeyboardEventBackspace(event: KeyboardEvent): void {\n        this.focusableComponentService.emitKeyboard(event);\n    }\n    @HostListener('document:keydown.arrowleft', ['$event'])\n    handleKeyboardEventArrowLeft(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.focusableComponentService.emitKeyboard(event);\n    }\n    @HostListener('document:keydown.arrowright', ['$event'])\n    handleKeyboardEventArrowRight(event: KeyboardEvent): void {\n        event.preventDefault();\n        this.focusableComponentService.emitKeyboard(event);\n    }\n\n    @HostListener('window:beforeunload')\n    ngOnDestroy(): void {\n        if (this.mustDisconnectGameOnLeave) {\n            this.reconnectionService.disconnectGame();\n        }\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    ngOnInit(): void {\n        this.gameViewEventManagerService.subscribeToGameViewEvent('noActiveGame', this.componentDestroyed$, () => this.noActiveGameDialog());\n        this.gameViewEventManagerService.subscribeToGameViewEvent('endOfGame', this.componentDestroyed$, (winnerNames: string[]) =>\n            this.endOfGameDialog(winnerNames),\n        );\n        if (!this.gameService.getGameId()) {\n            this.reconnectionService.reconnectGame();\n        }\n    }\n\n    hintButtonClicked(): void {\n        this.actionService.sendAction(\n            this.gameService.getGameId(),\n            this.gameService.getLocalPlayerId(),\n            this.actionService.createActionData(ActionType.HINT, {}, '', true),\n        );\n    }\n\n    passButtonClicked(): void {\n        this.actionService.sendAction(\n            this.gameService.getGameId(),\n            this.gameService.getLocalPlayerId(),\n            this.actionService.createActionData(ActionType.PASS, {}, '', true),\n        );\n    }\n\n    placeButtonClicked(): void {\n        const placePayload: PlaceActionPayload | undefined = this.gameViewEventManagerService.getGameViewEventValue('usedTiles');\n        if (!placePayload) return;\n        this.actionService.sendAction(\n            this.gameService.getGameId(),\n            this.gameService.getLocalPlayerId(),\n            this.actionService.createActionData(ActionType.PLACE, placePayload),\n        );\n    }\n\n    quitButtonClicked(): void {\n        let title = '';\n        let content = '';\n        const buttonsContent = ['', ''];\n        if (this.gameService.isGameOver) {\n            title = DIALOG_QUIT_TITLE;\n            content = DIALOG_QUIT_CONTENT;\n            buttonsContent[0] = DIALOG_QUIT_BUTTON_CONFIRM;\n            buttonsContent[1] = DIALOG_QUIT_STAY;\n        } else {\n            title = DIALOG_ABANDON_TITLE;\n            content = DIALOG_ABANDON_CONTENT;\n            buttonsContent[0] = DIALOG_ABANDON_BUTTON_CONFIRM;\n            buttonsContent[1] = DIALOG_ABANDON_BUTTON_CONTINUE;\n        }\n        this.openDialog(title, content, buttonsContent);\n    }\n\n    changeTileFontSize(operation: FontSizeChangeOperations): void {\n        if (operation === 'smaller') {\n            if (this.tileRackComponent.tileFontSize > RACK_TILE_MIN_FONT_SIZE) this.tileRackComponent.tileFontSize -= RACK_FONT_SIZE_INCREMENT;\n            if (this.boardComponent.tileFontSize > SQUARE_TILE_MIN_FONT_SIZE) this.boardComponent.tileFontSize -= SQUARE_FONT_SIZE_INCREMENT;\n        } else {\n            if (this.tileRackComponent.tileFontSize < RACK_TILE_MAX_FONT_SIZE) this.tileRackComponent.tileFontSize += RACK_FONT_SIZE_INCREMENT;\n            if (this.boardComponent.tileFontSize < SQUARE_TILE_MAX_FONT_SIZE) this.boardComponent.tileFontSize += SQUARE_FONT_SIZE_INCREMENT;\n        }\n    }\n\n    canPlay(): boolean {\n        return this.isLocalPlayerTurn() && !this.gameService.isGameOver && !this.actionService.hasActionBeenPlayed;\n    }\n\n    canPlaceWord(): boolean {\n        return this.canPlay() && this.gameViewEventManagerService.getGameViewEventValue('usedTiles') !== undefined;\n    }\n\n    private openDialog(title: string, content: string, buttonsContent: string[]): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title,\n                content,\n                buttons: [\n                    {\n                        content: buttonsContent[0],\n                        redirect: '/home',\n                        style: 'background-color: #FA6B84; color: rgb(0, 0, 0)',\n                        // We haven't been able to test that the right function is called because this\n                        // arrow function creates a new instance of the function. We cannot spy on it.\n                        // It totally works tho, try it!\n                        action: () => this.handlePlayerLeaves(),\n                    },\n                    {\n                        content: buttonsContent[1],\n                        closeDialog: true,\n                        style: 'background-color: rgb(231, 231, 231)',\n                    },\n                ],\n            },\n        });\n    }\n\n    private noActiveGameDialog(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_NO_ACTIVE_GAME_TITLE,\n                content: DIALOG_NO_ACTIVE_GAME_CONTENT,\n                buttons: [\n                    {\n                        content: DIALOG_NO_ACTIVE_GAME_BUTTON,\n                        closeDialog: false,\n                        redirect: '/home',\n                        style: 'background-color: rgb(231, 231, 231)',\n                        // We haven't been able to test that the right function is called because this\n                        // arrow function creates a new instance of the function. We cannot spy on it.\n                        // It totally works tho, try it!\n                        action: () => (this.mustDisconnectGameOnLeave = false),\n                    },\n                ],\n            },\n        });\n    }\n\n    private endOfGameDialog(winnerNames: string[]): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_END_OF_GAME_TITLE(this.isLocalPlayerWinner(winnerNames)),\n                content: DIALOG_END_OF_GAME_CONTENT(this.isLocalPlayerWinner(winnerNames)),\n                buttons: [\n                    {\n                        content: DIALOG_QUIT_BUTTON_CONFIRM,\n                        redirect: '/home',\n                        style: 'background-color: rgb(231, 231, 231)',\n                        // We haven't been able to test that the right function is called because this\n                        // arrow function creates a new instance of the function. We cannot spy on it.\n                        // It totally works tho, try it!\n                        action: () => this.handlePlayerLeaves(),\n                    },\n                    {\n                        content: DIALOG_END_OF_GAME_CLOSE_BUTTON,\n                        closeDialog: true,\n                        style: 'background-color: rgb(231, 231, 231)',\n                    },\n                ],\n            },\n        });\n\n        if (this.isLocalPlayerWinner(winnerNames)) this.throwConfettis();\n    }\n\n    private isLocalPlayerTurn(): boolean {\n        return this.gameService.isLocalPlayerPlaying();\n    }\n\n    private handlePlayerLeaves(): void {\n        this.mustDisconnectGameOnLeave = false;\n        this.playerLeavesService.handleLocalPlayerLeavesGame();\n    }\n\n    private throwConfettis(): void {\n        /* We have not been able to cover this line in the tests because it is impossible to spyOn the confetti method\n        from the party-js package. This method is not exported from a class or a module, so jasmine does not offer a\n        way to spy on it. Additionally, calling this method through in the tests would create some errors because the \n        mat-dialog-container is not defined in the tests. */\n        party.confetti(document.querySelector('.mat-dialog-container') as DynamicSourceType, {\n            count: party.variation.range(MIN_CONFETTI_COUNT, MAX_CONFETTI_COUNT),\n        });\n    }\n\n    private isLocalPlayerWinner(winnerNames: string[]): boolean {\n        return winnerNames.includes(this.gameService.getLocalPlayer()?.name ?? '');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$spacing: 8px;\n\n::ng-deep body {\n    background: #f3f3f3;\n}\n\n::ng-deep mat-dialog-container {\n    min-width: 350px;\n}\n\n#page-container {\n    --board-size: 730px;\n    --max-width: 1100px;\n\n    height: 100%;\n\n    .top-level-grid {\n        height: 100%;\n        display: grid;\n        grid-template-rows: auto 1fr;\n        max-width: var(--max-width);\n        margin: 0 auto;\n        padding: $spacing 0;\n        box-sizing: border-box;\n        gap: $spacing;\n\n        .horizontal-grid {\n            display: grid;\n            grid-template-columns: var(--board-size) 1fr;\n            gap: $spacing;\n\n            .vertical-grid {\n                display: grid;\n                grid-template-rows: 1fr auto auto;\n                gap: $spacing;\n\n                .grid-item-container {\n                    mat-card {\n                        padding: 12px 16px;\n                        display: flex;\n\n                        & > button,\n                        & > div {\n                            font-size: 0.95em;\n                            flex: 1 1 0px;\n\n                            &:not(:last-child) {\n                                margin-right: $spacing;\n                            }\n                        }\n\n                        & > div button {\n                            width: 100%;\n                        }\n                    }\n                }\n            }\n\n            .sidebar-section {\n                height: 100%;\n\n                .communication-box-container {\n                    height: 100%;\n                    display: grid;\n                    grid-template-rows: 1fr auto;\n                    gap: $spacing;\n\n                    .text-button-container {\n                        mat-card {\n                            display: flex;\n                            justify-content: space-between;\n                            align-items: center;\n                            padding: 12px 16px;\n\n                            p {\n                                margin: 0 12px 0 0;\n                            }\n\n                            .text-buttons {\n                                flex-grow: 1;\n                                display: flex;\n                                max-width: 160px;\n\n                                button {\n                                    flex-grow: 1;\n                                    font-size: 0.95em;\n\n                                    &:not(:last-child) {\n                                        margin-right: 12px;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    @media screen and (max-height: 1000px) {\n        --board-size: 690px;\n        --max-width: 1050px;\n    }\n    @media screen and (max-height: 950px) {\n        --board-size: 640px;\n        --max-width: 1000px;\n    }\n    @media screen and (max-height: 900px) {\n        --board-size: 610px;\n        --max-width: 950px;\n    }\n}\n",
                    "styleUrl": "./game-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focusableComponentService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reconnectionService",
                        "type": "ReconnectionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "surrenderDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerLeavesService",
                        "type": "PlayerLeavesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "focusableComponentService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reconnectionService",
                        "type": "ReconnectionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "surrenderDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerLeavesService",
                        "type": "PlayerLeavesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"page-container\">\n    <div class=\"top-level-grid\">\n        <div class=\"grid-item-container\">\n            <app-information-box></app-information-box>\n        </div>\n        <div class=\"horizontal-grid\">\n            <div class=\"vertical-grid\">\n                <div class=\"grid-item-container\">\n                    <app-board #boardComponent></app-board>\n                </div>\n                <div class=\"grid-item-container\">\n                    <app-tile-rack #tileRackComponent></app-tile-rack>\n                </div>\n                <div class=\"grid-item-container\" id=\"button-group\">\n                    <mat-card>\n                        <div>\n                            <button mat-flat-button id=\"surrender-dialog-button\" (click)=\"quitButtonClicked()\" color=\"primary\">\n                                <ng-container *ngIf=\"!gameService.isGameOver\">\n                                    <app-icon icon=\"flag-alt\" styling=\"solid\"></app-icon>\n                                    <span> Abandonner</span>\n                                </ng-container>\n                                <ng-container *ngIf=\"gameService.isGameOver\">\n                                    <app-icon icon=\"door-open\" styling=\"solid\"></app-icon>\n                                    <span *ngIf=\"gameService.isGameOver\"> Quitter</span>\n                                </ng-container>\n                            </button>\n                        </div>\n                        <div matTooltip=\"Ce n'est pas votre tour de jouer\" matTooltipPosition=\"above\" [matTooltipDisabled]=\"canPlay()\">\n                            <button mat-flat-button color=\"primary\" [disabled]=\"!canPlay()\" (click)=\"hintButtonClicked()\">\n                                <app-icon icon=\"lightbulb\" styling=\"solid\"></app-icon> Indice\n                            </button>\n                        </div>\n                        <div matTooltip=\"Ce n'est pas votre tour de jouer\" matTooltipPosition=\"above\" [matTooltipDisabled]=\"canPlay()\">\n                            <button mat-flat-button color=\"primary\" [disabled]=\"!canPlay()\" (click)=\"passButtonClicked()\">\n                                <app-icon icon=\"redo\"></app-icon> Passer\n                            </button>\n                        </div>\n                        <div\n                            matTooltip=\"Ce n'est pas votre tour de jouer ou vous n'avez pas placé de mot encore\"\n                            matTooltipPosition=\"above\"\n                            [matTooltipDisabled]=\"canPlaceWord()\"\n                        >\n                            <button mat-flat-button color=\"primary\" [disabled]=\"!canPlaceWord()\" (click)=\"placeButtonClicked()\">\n                                <app-icon icon=\"square\" styling=\"solid\"></app-icon> Placer\n                            </button>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n            <div class=\"sidebar-section\">\n                <div class=\"communication-box-container\">\n                    <app-communication-box></app-communication-box>\n                    <div class=\"text-button-container\">\n                        <mat-card>\n                            <span><app-icon icon=\"text-size\"></app-icon> Taille de la police</span>\n                            <div class=\"text-buttons\">\n                                <button mat-flat-button id=\"minus-button\" color=\"primary\" (click)=\"changeTileFontSize('smaller')\">\n                                    <app-icon icon=\"minus\"></app-icon>\n                                </button>\n                                <button mat-flat-button id=\"plus-button\" color=\"primary\" (click)=\"changeTileFontSize('larger')\">\n                                    <app-icon icon=\"plus\"></app-icon>\n                                </button>\n                            </div>\n                        </mat-card>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "HighScoreBoxComponent",
            "id": "component-HighScoreBoxComponent-874ce40bfc76f4793d08220ecc39de992c52bf81abf50e7d6c3b60a8220820a6015e85c48ad1c99b6089c68db9be014944108f6b5acf1eb284d48bb99ae542b9",
            "file": "src/app/components/high-score-box/high-score-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-high-score-box",
            "styleUrls": [
                "./high-score-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./high-score-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "highScore",
                    "defaultValue": "DEFAULT_HIGH_SCORE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "SingleHighScore",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { DEFAULT_HIGH_SCORE } from '@app/constants/components-constants';\nimport { SingleHighScore } from '@common/models/high-score';\n\n@Component({\n    selector: 'app-high-score-box',\n    templateUrl: './high-score-box.component.html',\n    styleUrls: ['./high-score-box.component.scss'],\n})\nexport class HighScoreBoxComponent {\n    @Input() highScore: SingleHighScore = DEFAULT_HIGH_SCORE;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#root {\n    display: grid;\n    grid-template-columns: 150px 275px 200px;\n    justify-self: center;\n    width: 100%;\n    vertical-align: middle;\n    padding: 5px;\n}\n\n.rank, .score, .name {\n    display: flex;\n    align-items: center;\n    font-size: larger;\n    text-align: right;\n    justify-items: right;\n    padding-left: 10px;\n    padding-right: 10px;\n    box-sizing: border-box;\n\n}\n\n.score {\n    margin-left: auto;\n    text-align: right;\n}\n\n",
                    "styleUrl": "./high-score-box.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div id=\"root\">\n    <div class=\"rank\">\n        {{highScore.rank}}\n    </div>\n    <div class=\"name\">\n            {{highScore.name}}\n    </div>\n    <div class=\"score\">\n        {{highScore.score}}\n    </div>\n</div>\n"
        },
        {
            "name": "HighScoresPageComponent",
            "id": "component-HighScoresPageComponent-a8bcb9b9e5c66125ded3d84ebf89e662edf10077459fc748e3e20583c803c15908279f8b4b96b4a8ac875c4a82a6b52daed1ed867a7d4bce2ae904427aa09fef",
            "file": "src/app/pages/high-scores-page/high-scores-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-high-scores-page",
            "styleUrls": [
                "./high-scores-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./high-scores-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameTypes",
                    "defaultValue": "GameType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "highScoresParameters",
                    "defaultValue": "new FormGroup({\n        gameType: new FormControl(GameType.Classic, Validators.required),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getHighScores",
                    "args": [],
                    "optional": false,
                    "returnType": "SingleHighScore[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GameType } from '@app/constants/game-type';\nimport HighScoresService from '@app/services/high-score-service/high-score.service';\nimport { SingleHighScore } from '@common/models/high-score';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-high-scores-page',\n    templateUrl: './high-scores-page.component.html',\n    styleUrls: ['./high-scores-page.component.scss'],\n})\nexport class HighScoresPageComponent implements OnInit, OnDestroy {\n    highScoresParameters: FormGroup = new FormGroup({\n        gameType: new FormControl(GameType.Classic, Validators.required),\n    });\n    gameTypes = GameType;\n    isInitialized: boolean = false;\n\n    private componentDestroyed$: Subject<boolean> = new Subject();\n\n    constructor(private highScoresService: HighScoresService) {}\n\n    ngOnInit(): void {\n        this.highScoresService.handleHighScoresRequest();\n        this.highScoresService.subscribeToInitializedHighScoresListEvent(this.componentDestroyed$, () => {\n            this.isInitialized = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    getHighScores(): SingleHighScore[] {\n        return this.highScoresService.getHighScores(this.highScoresParameters.get('gameType')?.value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n$border-radius: 6px;\n\n::ng-deep body {\n    background: $page-background;\n}\n\n:host ::ng-deep {\n    span.mat-button-toggle-label-content {\n        line-height: 1em;\n        height: 100%;\n        width: 100%;\n        padding: 0;\n        border-radius: $border-radius;\n    }\n}\n\n::ng-deep .mat-tooltip {\n    font-size: small;\n}\n#db-problem {\n    margin-top: 100px;\n    display: inline-block;\n    align-items: center;\n    .center {\n        padding-bottom: 15px;\n        font-size: x-large;\n    }\n}\n\n.center {\n    display: grid;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.page {\n    .container {\n        max-width: 625px;\n        margin: 0 auto;\n        padding-top: 54px;\n\n        & > mat-card {\n            margin: 0 12px;\n        }\n\n        form {\n            mat-button-toggle-group,\n            mat-form-field {\n                width: 100%;\n            }\n\n            mat-button-toggle-group {\n                margin-bottom: 1.34375em;\n            }\n\n            mat-button-toggle-group {\n                display: grid;\n                grid-template-columns: repeat(2, 1fr);\n                gap: 12px;\n                border: none;\n                overflow: visible;\n\n                mat-button-toggle {\n                    border-radius: $border-radius;\n                    background: transparent;\n                    border: none;\n                    overflow: visible;\n\n                    mat-card.content {\n                        background: white;\n                        border-radius: $border-radius;\n                        border: none;\n                        box-sizing: border-box;\n                        display: block;\n                        width: 100%;\n                        border: solid 1px rgb(236, 236, 236);\n                        padding: 8px;\n                    }\n                    p,\n                    app-icon {\n                        margin: auto;\n                        line-height: 1em !important;\n                    }\n\n                    app-icon {\n                        font-size: 1.3em;\n                        margin-bottom: 0.3em;\n                        display: block;\n                    }\n\n                    p {\n                        font-size: 0.9em;\n                    }\n\n                    &.mat-button-toggle-checked {\n                        mat-card.content {\n                            background-color: rgba($primary, 0.15);\n                            border: solid 1px rgba($primary, 0.1);\n                            app-icon {\n                                color: $primary;\n                            }\n                        }\n                    }\n                }\n            }\n\n            mat-label.button-toggle-label {\n                display: block;\n                margin-bottom: 0.25em;\n            }\n        }\n\n        #high-scores-container {\n            border: solid 1px rgb(133, 133, 133);\n            border-radius: 4px;\n\n            #high-scores-header {\n                display: grid;\n                grid-template-columns: 150px 275px 200px;\n                justify-self: center;\n                width: 100%;\n                vertical-align: middle;\n                padding: 5px;\n                height: 50px;\n\n                box-sizing: border-box;\n                border-bottom: solid 1px rgb(133, 133, 133);\n\n                .rank,\n                .score,\n                .name {\n                    display: flex;\n                    align-items: center;\n                    font-size: larger;\n                    text-align: right;\n                    justify-items: right;\n                }\n\n                .score {\n                    padding-right: 20px;\n                    margin-left: auto;\n                    text-align: right;\n                    box-sizing: border-box;\n                }\n            }\n\n            .high-score {\n                display: flex;\n                align-self: center;\n                justify-content: center;\n                align-items: center;\n                height: 50px;\n                font-size: larger;\n                font-family: Roboto, 'Helvetica Neue', sans-serif;\n            }\n\n            .high-score:nth-child(2n) {\n                background-color: rgba($primary, 0.15);\n            }\n        }\n\n        .buttons {\n            display: flex;\n            justify-content: flex-end;\n\n            button {\n                font-size: 1.2em;\n                padding: 6px 16px;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./high-scores-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "highScoresService",
                        "type": "HighScoresService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "highScoresService",
                        "type": "HighScoresService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n    <app-page-header title=\"Meilleurs scores\"></app-page-header>\n\n    <br />\n\n    <div class=\"center\" id=\"db-problem\" *ngIf=\"!isInitialized\">\n        <div  class=\"center\">\n            <app-icon icon=\"exclamation-triangle\" styling=\"solid\" size=\"10x\"></app-icon>\n        </div>\n        <p class=\"center\">Incapable d'accéder à la base de données</p>\n        <p class=\"center\">Veuillez réessayer plus tard!</p>\n    </div>\n\n    <div class=\"container\" *ngIf=\"isInitialized\">\n            <form [formGroup]=\"highScoresParameters\">\n            <mat-button-toggle-group formControlName=\"gameType\" ngDefaultControl>\n                <mat-button-toggle id=\"classic-button\" [value]=\"gameTypes.Classic\">\n                    <mat-card class=\"content\">\n                        <app-icon icon=\"chess-pawn\" styling=\"solid\"></app-icon>\n                        <p class=\"text\">{{ gameTypes.Classic }}</p>\n                    </mat-card>\n                </mat-button-toggle>\n                <mat-button-toggle id=\"log2990-button\" [value]=\"gameTypes.LOG2990\">\n                    <mat-card class=\"content\">\n                        <app-icon icon=\"chess-queen\" styling=\"solid\"></app-icon>\n                        <p class=\"text\">{{ gameTypes.LOG2990 }}</p>\n                    </mat-card>\n                </mat-button-toggle>\n            </mat-button-toggle-group>\n        </form>\n\n\n\n        <div id=\"high-scores-container\" >\n            <div id=\"high-scores-header\">\n                <div class=\"rank\">\n                    Classement\n                </div>\n                <div class=\"name\">\n                    Nom\n                </div>\n                <div class=\"score\">\n                    Score\n                </div>\n\n            </div>\n            <div class=\"high-score\" *ngFor=\"let highScore of getHighScores()\">\n                <app-high-score-box [highScore]=\"highScore\"></app-high-score-box>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-b244584d9578e90b3a37668cde0cbbb7fcd6a3cc29115cb27b2c0a9330ba0b53f0569637b05b0b716a7728df4d74d3d1897d7a9d83abb7d1b2657cc8248e6550",
            "file": "src/app/pages/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [
                "./home-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-home-page',\n    templateUrl: './home-page.component.html',\n    styleUrls: ['./home-page.component.scss'],\n})\nexport class HomePageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":ng-root {\n    html,\n    body {\n        overflow: hidden;\n        height: 100%;\n    }\n}\n#tiles {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    z-index: -1;\n    overflow: hidden;\n    app-tile {\n        position: absolute;\n        &:nth-child(1) {\n            height: calc(8vw + 8vh);\n            width: calc(8vw + 8vh);\n            bottom: -3vh;\n            left: 4vw;\n            font-size: calc(4vw + 4vh);\n            transform: rotate(-7deg);\n        }\n        &:nth-child(2) {\n            height: calc(5vw + 5vh);\n            width: calc(5vw + 5vh);\n            bottom: 20vh;\n            left: 6vw;\n            font-size: calc(2.5vw + 2.5vh);\n            transform: rotate(7deg);\n        }\n        &:nth-child(3) {\n            height: calc(6vw + 6vh);\n            width: calc(6vw + 6vh);\n            top: 50%;\n            right: 4vw;\n            font-size: calc(3vw + 3vh);\n            transform: rotate(5deg) translateY(-50%);\n        }\n        &:nth-child(4) {\n            height: calc(3vw + 3vh);\n            width: calc(3vw + 3vh);\n            top: 3vh;\n            right: 4vw;\n            font-size: calc(1.5vw + 1.5vh);\n            transform: rotate(8deg);\n        }\n        &:nth-child(5) {\n            height: calc(10vw + 10vh);\n            width: calc(10vw + 10vh);\n            top: 8vh;\n            left: -2vw;\n            font-size: calc(5vw + 5vh);\n            transform: rotate(16deg);\n        }\n        &:nth-child(6) {\n            height: calc(7vw + 7vh);\n            width: calc(7vw + 7vh);\n            top: 14vh;\n            right: 3vw;\n            font-size: calc(3.5vw + 3.5vh);\n            transform: rotate(-4deg);\n        }\n        &:nth-child(7) {\n            height: calc(12vw + 12vh);\n            width: calc(12vw + 12vh);\n            bottom: -4vh;\n            right: -3vw;\n            font-size: calc(6vw + 6vh);\n            transform: rotate(-10deg);\n        }\n    }\n}\n#page-content {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    overflow: hidden;\n    .content {\n        height: 100%;\n        max-height: 700px;\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: space-between;\n        padding: 36px 24px;\n        box-sizing: border-box;\n        img {\n            width: calc(40vw + 30vh);\n        }\n        #button-group {\n            display: flex;\n            flex-direction: column;\n            button {\n                width: 100%;\n                font-size: 1.4em;\n                padding: 8px 24px;\n                &:not(:last-child) {\n                    margin-bottom: 12px;\n                }\n            }\n        }\n        .footer-item {\n            text-align: center;\n            h4 {\n                margin: 0 0 6px 0;\n                font-size: 1.3em;\n                font-weight: 500;\n            }\n            p {\n                margin: 0;\n                font-size: 1.1em;\n                max-width: 400px;\n                span {\n                    display: inline-flex;\n                    align-items: center;\n                    margin: 0 4px;\n\n                    .home-tile-name {\n                        max-height: 20.46px;\n                    }\n                }\n                app-tile {\n                    display: inline-block;\n                    height: 2em;\n                    width: 2em;\n                    font-size: 0.6em;\n                    margin-right: 2px;\n                }\n            }\n        }\n    }\n    #background {\n        content: '';\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        background-position: center !important;\n        background-size: cover !important;\n        opacity: 0.3;\n        z-index: -2;\n    }\n}\n",
                    "styleUrl": "./home-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div id=\"page-content\">\n    <div id=\"tiles\">\n        <app-tile [tile]=\"{ letter: 'C', value: 3 }\"></app-tile>\n        <app-tile [tile]=\"{ letter: 'I', value: 1 }\"></app-tile>\n        <app-tile [tile]=\"{ letter: 'L', value: 1 }\"></app-tile>\n        <app-tile [tile]=\"{ letter: 'H', value: 4 }\"></app-tile>\n        <app-tile [tile]=\"{ letter: 'M', value: 2 }\"></app-tile>\n        <app-tile [tile]=\"{ letter: 'E', value: 1 }\"></app-tile>\n        <app-tile [tile]=\"{ letter: 'G', value: 2 }\"></app-tile>\n    </div>\n\n    <div class=\"content\">\n        <img src=\"https://bit.ly/3m206ss\" alt=\"Logo Scrabble\" />\n        <section id=\"button-group\" class=\"justified\">\n            <button mat-flat-button color=\"primary\" routerLink=\"/lobby\">Rejoindre une partie</button>\n            <button mat-flat-button color=\"primary\" routerLink=\"/game-creation\">Créer une partie</button>\n            <button mat-flat-button color=\"primary\" routerLink=\"/high-scores\">Meilleurs scores</button>\n        </section>\n        <div class=\"footer-item\">\n            <h4 class=\"team-name\">Équipe 212</h4>\n            <p>\n                <span\n                    ><a class=\"home-tile-name\" href=\"https://www.linkedin.com/in/thomas-tr%C3%A9panier/\"\n                        ><app-tile [tile]=\"{ letter: 'T', value: 0 }\" [hideValue]=\"true\"></app-tile></a\n                    >homas Trépanier</span\n                >\n                <span\n                    ><a class=\"home-tile-name\" href=\"https://www.linkedin.com/in/rachad-chazbek-a06489212/\"\n                        ><app-tile [tile]=\"{ letter: 'R', value: 0 }\" [hideValue]=\"true\"></app-tile></a\n                    >achad Chazbek</span\n                >\n                <span\n                    ><a class=\"home-tile-name\" href=\"https://www.linkedin.com/in/cfstcyr/\"\n                        ><app-tile [tile]=\"{ letter: 'C', value: 0 }\" [hideValue]=\"true\"></app-tile></a\n                    >harles-François St-Cyr</span\n                >\n                <span\n                    ><a class=\"home-tile-name\" href=\"https://www.linkedin.com/in/ahmed-mewloud-b0a481195/\"\n                        ><app-tile [tile]=\"{ letter: 'A', value: 0 }\" [hideValue]=\"true\"></app-tile></a\n                    >hmed Mewloud</span\n                >\n                <span\n                    ><a class=\"home-tile-name\" href=\"https://www.linkedin.com/in/raphael-salvas/\"\n                        ><app-tile [tile]=\"{ letter: 'R', value: 0 }\" [hideValue]=\"true\"></app-tile></a\n                    >aphael Salvas</span\n                >\n                <span\n                    ><a class=\"home-tile-name\" href=\"https://www.linkedin.com/in/bourdache-amine-26b67a22a/\"\n                        ><app-tile [tile]=\"{ letter: 'A', value: 0 }\" [hideValue]=\"true\"></app-tile></a\n                    >mine Bourdache</span\n                >\n            </p>\n        </div>\n    </div>\n\n    <div id=\"background\" style=\"background: url('assets/img/board_background.svg')\"></div>\n</div>\n"
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-151d6a7615de59b9a6c2442b76e458626c0d08dc1a6771d446b1cc41671505e9b882b35e29a4e428ea1da89f8e6af3e46109266e007303134cf6375c264254a6",
            "file": "src/app/components/icon-button/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon-button",
            "styleUrls": [
                "./icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-icon-button',\n    templateUrl: './icon-button.component.html',\n    styleUrls: ['./icon-button.component.scss'],\n})\nexport class IconButtonComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".icon-button {\n    border: none;\n    background-color: transparent;\n    font-size: 18px;\n    padding: 6px 8px;\n    border-radius: 4px;\n    cursor: pointer;\n    box-sizing: border-box;\n    transition: ease-in scale 0.1s;\n\n    &:hover {\n        background-color: rgba(gray, 0.05);\n    }\n\n    &:active {\n        scale: 0.925;\n        transition: ease-in scale 0.1s;\n    }\n}",
                    "styleUrl": "./icon-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"icon-button\">\n    <ng-content></ng-content>\n</button>"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-81235ef4d016c95f0b1c80869a1e408301dd7d56a80092c88235bcb8e70b4b8bf108e8e12d1aa453814143546d5b821e0257867a60acd0cae48a23c58762936f",
            "file": "src/app/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "animation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "IconAnimation",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "rotation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IconRotation",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IconSize",
                    "decorators": []
                },
                {
                    "name": "styling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "IconStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getPrefix",
                    "args": [
                        {
                            "name": "style",
                            "type": "IconStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IconPrefix",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "style",
                            "type": "IconStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { IconAnimation, IconName, IconPrefix, IconRotation, IconSize, IconStyle } from './icon.component.type';\n\n@Component({\n    selector: 'app-icon',\n    templateUrl: './icon.component.html',\n})\nexport class IconComponent implements OnInit {\n    @Input() icon: IconName;\n    @Input() styling?: IconStyle;\n    @Input() animation?: IconAnimation;\n    @Input() size?: IconSize;\n    @Input() rotation?: IconRotation;\n\n    className: string;\n\n    ngOnInit(): void {\n        this.setClassName();\n    }\n\n    getPrefix(style?: IconStyle): IconPrefix {\n        switch (style) {\n            case 'light':\n                return 'fal';\n            case 'solid':\n                return 'fas';\n            case 'duotone':\n                return 'fad';\n            default:\n                return 'far';\n        }\n    }\n\n    private setClassName(): void {\n        const prefix: IconPrefix = this.getPrefix(this.styling);\n\n        this.className = `${prefix} fa-${this.icon}`;\n\n        if (this.animation) this.className += ` fa-${this.animation}`;\n        if (this.size) this.className += ` fa-${this.size}`;\n        if (this.rotation) this.className += ` fa-${this.rotation}`;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<i [class]=\"getPrefix(styling) + ' fa-' + icon + (this.animation ? ' fa-' + this.animation : '') + (this.size ? ' fa-' + this.size : '') + (this.rotation ? ' fa-' + this.rotation : '')\"></i>"
        },
        {
            "name": "InformationBoxComponent",
            "id": "component-InformationBoxComponent-b47479615e64d339a3d7fad16a541943ae57eb7d7b6cd7f9d16e293d8ab84b08f21ba5b789af74e28649a32ba04ef370b2b342b3bc39d4b40886f5350393129d",
            "file": "src/app/components/information-box/information-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-information-box",
            "styleUrls": [
                "./information-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./information-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isPlayer1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isPlayer1Active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isPlayer2Active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "localPlayerIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "maxTilesPerPlayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timer",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "timerSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "timerSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfIsPlayer1",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createTimer",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "endRound",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getLocalPlayerIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "IconName",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPlayer1",
                    "args": [],
                    "optional": false,
                    "returnType": "Player",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPlayer2",
                    "args": [],
                    "optional": false,
                    "returnType": "Player",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTimerRunning",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setupGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "startTimer",
                    "args": [
                        {
                            "name": "timer",
                            "type": "Timer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "timer",
                            "type": "Timer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateActivePlayerBorder",
                    "args": [
                        {
                            "name": "activePlayer",
                            "type": "Player | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "activePlayer",
                            "type": "Player | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Player } from '@app/classes/player';\nimport { Timer } from '@app/classes/round/timer';\nimport { IconName } from '@app/components/icon/icon.component.type';\nimport { LOCAL_PLAYER_ICON } from '@app/constants/components-constants';\nimport { MAX_TILES_PER_PLAYER, PLAYER_1_INDEX, PLAYER_2_INDEX, SECONDS_TO_MILLISECONDS } from '@app/constants/game-constants';\nimport { GameService } from '@app/services';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport RoundManagerService from '@app/services/round-manager-service/round-manager.service';\nimport { Observable, Subject, Subscription, timer as timerCreationFunction } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-information-box',\n    templateUrl: './information-box.component.html',\n    styleUrls: ['./information-box.component.scss'],\n})\nexport class InformationBoxComponent implements OnInit, OnDestroy {\n    readonly maxTilesPerPlayer;\n    isPlayer1Active: boolean;\n    isPlayer2Active: boolean;\n    isPlayer1: boolean;\n    localPlayerIcon: IconName;\n    timer: Timer;\n\n    private timerSource: Observable<number>;\n    private timerSubscription: Subscription;\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(\n        private roundManager: RoundManagerService,\n        private gameService: GameService,\n        private gameViewEventManagerService: GameViewEventManagerService,\n    ) {\n        this.maxTilesPerPlayer = MAX_TILES_PER_PLAYER;\n    }\n\n    ngOnInit(): void {\n        this.timer = new Timer(0, 0);\n        this.componentDestroyed$ = new Subject();\n        this.gameViewEventManagerService.subscribeToGameViewEvent('reRender', this.componentDestroyed$, () => {\n            this.onDestroy();\n            this.ngOnInit();\n            this.updateActivePlayerBorder(this.roundManager.getActivePlayer());\n        });\n        this.gameViewEventManagerService.subscribeToGameViewEvent('gameInitialized', this.componentDestroyed$, () => {\n            this.localPlayerIcon = this.getLocalPlayerIcon();\n        });\n\n        if (!this.gameService.isGameSetUp) return;\n        this.setupGame();\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy();\n    }\n\n    getPlayer1(): Player {\n        const player1 = this.gameService.getPlayerByNumber(PLAYER_1_INDEX);\n        return player1 ? player1 : new Player('', 'Player1', []);\n    }\n\n    getPlayer2(): Player {\n        const player2 = this.gameService.getPlayerByNumber(PLAYER_2_INDEX);\n        return player2 ? player2 : new Player('', 'Player2', []);\n    }\n\n    isTimerRunning(): boolean {\n        return this.timerSubscription !== undefined && !this.timerSubscription.closed;\n    }\n\n    private onDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    private setupGame(): void {\n        if (this.roundManager.timer) {\n            this.roundManager.timer.pipe(takeUntil(this.componentDestroyed$)).subscribe(([timer, activePlayer]) => {\n                this.startTimer(timer);\n                this.updateActivePlayerBorder(activePlayer);\n            });\n        }\n        this.roundManager.subscribeToEndRoundEvent(this.componentDestroyed$, () => this.endRound());\n        this.isPlayer1 = this.checkIfIsPlayer1();\n    }\n\n    private startTimer(timer: Timer): void {\n        this.timer = timer;\n        this.timerSource = this.createTimer(SECONDS_TO_MILLISECONDS);\n        this.timerSubscription = this.timerSource.pipe(takeUntil(this.componentDestroyed$)).subscribe(() => this.timer.decrement());\n    }\n\n    private endRound(): void {\n        this.timer = new Timer(0, 0);\n        if (this.timerSubscription) {\n            this.timerSubscription.unsubscribe();\n        }\n    }\n\n    private updateActivePlayerBorder(activePlayer: Player | undefined): void {\n        const player1 = this.getPlayer1();\n        const player2 = this.getPlayer2();\n        if (!activePlayer) {\n            this.isPlayer1Active = false;\n            this.isPlayer2Active = false;\n            return;\n        }\n        this.isPlayer1Active = player1 && activePlayer.id === player1.id;\n        this.isPlayer2Active = player2 && activePlayer.id === player2.id;\n    }\n\n    private createTimer(length: number): Observable<number> {\n        return timerCreationFunction(0, length);\n    }\n\n    private checkIfIsPlayer1(): boolean {\n        return this.gameService.getLocalPlayer() === this.gameService.getPlayerByNumber(PLAYER_1_INDEX);\n    }\n\n    private getLocalPlayerIcon(): IconName {\n        return LOCAL_PLAYER_ICON[Math.floor(Math.random() * LOCAL_PLAYER_ICON.length)];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/utils.scss';\n@import '../../style/variables.scss';\n@import '../../style/animations.scss';\n\n#outer-container {\n    @include no-select;\n    cursor: default;\n    display: grid;\n    grid-template-columns: minmax(0, 2.5fr) auto minmax(0, 2.5fr);\n    gap: 8px;\n    height: 100%;\n\n    #time-container {\n        text-align: center;\n        padding: 12px 12px;\n        width: 150px;\n\n        #time-left {\n            font-size: 2em;\n            font-weight: 500;\n            margin-top: 4px;\n        }\n\n        &.running .separator {\n            animation-name: blinking;\n            animation-duration: 1s;\n            animation-iteration-count: infinite;\n        }\n    }\n\n    .player-container {\n        position: relative;\n        transition: ease-in all 0.1s;\n        z-index: 10;\n\n        mat-card {\n            width: 100%;\n            height: 100%;\n            padding-top: 12px;\n            padding-bottom: 12px;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            box-sizing: border-box;\n            transition: ease-in all 0.1s;\n        }\n\n        .name-container {\n            display: flex;\n            align-items: center;\n            justify-content: flex-start;\n            max-width: 100%;\n\n            & > *:not(:last-child) {\n                margin-right: 6px;\n            }\n\n            .name {\n                line-height: 1.2em;\n                font-size: 1.5em;\n                font-weight: 500;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n\n            .score {\n                font-weight: 400;\n                background: $primary;\n                color: white;\n                padding: 0.075em 0.65em;\n                border-radius: 100px;\n                white-space: nowrap;\n                transition: ease-in all 0.2s;\n            }\n\n            app-icon {\n                color: $primary;\n                transition: ease-in all 0.2s;\n            }\n        }\n\n        .local-player-active-indicator {\n            position: absolute;\n            bottom: 0;\n            background: rgb(39, 39, 39);\n            color: white;\n            padding: 6px 12px;\n            border-bottom-left-radius: 3px;\n            border-bottom-right-radius: 3px;\n            z-index: -1;\n            transition: ease-in transform 0.2s;\n            pointer-events: none;\n        }\n\n        &#player-1 {\n            mat-card {\n                align-items: flex-start;\n            }\n\n            .local-player-active-indicator {\n                left: 12px;\n            }\n        }\n\n        &#player-2 {\n            mat-card {\n                align-items: flex-end;\n            }\n\n            .local-player-active-indicator {\n                right: 12px;\n            }\n        }\n\n        &.local.active {\n            transition: ease-in all 0.2s;\n            mat-card {\n                background: $primary;\n                color: white;\n                transition: ease-in all 0.1s;\n\n                .score {\n                    background: white;\n                    color: black;\n                    transition: ease-in all 0.2s;\n                }\n\n                app-icon {\n                    color: white;\n                    transition: ease-in all 0.2s;\n                }\n            }\n        }\n\n        &.active {\n            .local-player-active-indicator {\n                @keyframes hide {\n                    0% {\n                        transform: translateY(100%);\n                    }\n                    100% {\n                        transform: translateY(0%);\n                    }\n                }\n\n                transform: translateY(100%);\n                animation-name: hide;\n                animation-duration: 0.2s;\n                animation-fill-mode: forwards;\n                animation-delay: 4s;\n                transition: ease-in transform 0.5s;\n            }\n        }\n\n        &:not(.active) {\n            opacity: 0.55;\n            transition: ease-in all 0.1s;\n        }\n    }\n\n    p {\n        margin: 0;\n    }\n}\n",
                    "styleUrl": "./information-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "roundManager",
                        "type": "RoundManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "roundManager",
                        "type": "RoundManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"outer-container\">\n    <div class=\"player-container\" id=\"player-1\" [ngClass]=\"{ active: isPlayer1Active, local: isPlayer1 }\">\n        <mat-card>\n            <p class=\"name-container\">\n                <app-icon *ngIf=\"isPlayer1\" [icon]=\"localPlayerIcon\" styling=\"solid\"></app-icon>\n                <span class=\"name\">{{ getPlayer1().name }}</span>\n                <span class=\"score\">{{ getPlayer1().score }} points</span>\n            </p>\n    \n            <p *ngIf=\"getPlayer1().getTiles().length < maxTilesPerPlayer\" class=\"tiles-left\">\n                Tuiles restantes : {{ getPlayer1().getTiles().length }}\n            </p>\n        </mat-card>\n\n        <p class=\"local-player-active-indicator\">\n            <span *ngIf=\"isPlayer1\">C'est votre tour</span>\n            <span *ngIf=\"!isPlayer1\">C'est au tour de {{ getPlayer1().name }}</span>\n        </p>\n    </div>\n\n    <mat-card id=\"time-container\" [ngClass]=\"{ running: isTimerRunning() }\">\n        <p>Temps restant au tour</p>\n        <p id=\"time-left\">\n            <span class=\"minutes\">{{ timer.minutes }}</span>\n            <span class=\"separator\">:</span>\n            <span class=\"seconds\">{{ timer.getTimerSecondsPadded() }}</span>\n        </p>\n    </mat-card>\n\n    <div class=\"player-container\" id=\"player-2\"  [ngClass]=\"{ active: isPlayer2Active, local: !isPlayer1 }\">\n        <mat-card>\n            <p class=\"name-container\">\n                <span class=\"score\">{{ getPlayer2().score }} points</span>\n                <span class=\"name\">{{ getPlayer2().name }}</span>\n                <app-icon *ngIf=\"!isPlayer1\" [icon]=\"localPlayerIcon\" styling=\"solid\"></app-icon>\n            </p>\n    \n            <p *ngIf=\"getPlayer2().getTiles().length < maxTilesPerPlayer\" class=\"tiles-left\">\n                Tuiles restantes : {{ getPlayer2().getTiles().length }}\n            </p>\n        </mat-card>\n\n        <p class=\"local-player-active-indicator\">\n            <span *ngIf=\"!isPlayer1\">C'est votre tour</span>\n            <span *ngIf=\"isPlayer1\">C'est au tour de {{ getPlayer2().name }}</span>\n        </p>\n    </div>\n</div>\n"
        },
        {
            "name": "JoinWaitingPageComponent",
            "id": "component-JoinWaitingPageComponent-14b46411ceaad4362711fa6a17eec5eb21b120acf9ef75d8daeb0aa247694f14608cecf01c8107cebc5a5537b6c44bdb3153999dbea8d4e5e1038f8d1f8656d8",
            "file": "src/app/pages/join-waiting-page/join-waiting-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-waiting-page",
            "styleUrls": [
                "./join-waiting-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./join-waiting-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentLobby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LobbyInfo",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "currentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "funFact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "gameDispatcherService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameDispatcherService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roundTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hostHasCanceled",
                    "args": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBeforeUnload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload'"
                        }
                    ]
                },
                {
                    "name": "playerRejected",
                    "args": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "hostName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "routerChangeMethod",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:beforeunload",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { NavigationStart, Router } from '@angular/router';\nimport { LobbyInfo } from '@app/classes/communication';\nimport { Timer } from '@app/classes/round/timer';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { getRandomFact } from '@app/constants/fun-facts-scrabble-constants';\nimport {\n    DEFAULT_LOBBY,\n    DIALOG_BUTTON_CONTENT_REJECTED,\n    DIALOG_BUTTON_CONTENT_RETURN_LOBBY,\n    DIALOG_CANCEL_CONTENT,\n    DIALOG_CANCEL_TITLE,\n    DIALOG_REJECT_CONTENT,\n    DIALOG_REJECT_TITLE,\n} from '@app/constants/pages-constants';\nimport GameDispatcherService from '@app/services/game-dispatcher-service/game-dispatcher.service';\nimport { PlayerLeavesService } from '@app/services/player-leave-service/player-leave.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-waiting-page',\n    templateUrl: './join-waiting-page.component.html',\n    styleUrls: ['./join-waiting-page.component.scss'],\n})\nexport class JoinWaitingPageComponent implements OnInit, OnDestroy {\n    currentLobby: LobbyInfo;\n    currentName: string;\n    funFact: string;\n    roundTime: string;\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(\n        public dialog: MatDialog,\n        public gameDispatcherService: GameDispatcherService,\n        private readonly playerLeavesService: PlayerLeavesService,\n        public router: Router,\n    ) {\n        this.componentDestroyed$ = new Subject();\n    }\n\n    @HostListener('window:beforeunload')\n    onBeforeUnload(): void {\n        this.playerLeavesService.handleLeaveLobby();\n    }\n\n    ngOnInit(): void {\n        this.currentLobby = this.gameDispatcherService.currentLobby ?? DEFAULT_LOBBY;\n        const roundTime: Timer = Timer.convertTime(this.currentLobby.maxRoundTime);\n        this.roundTime = `${roundTime.minutes}:${roundTime.getTimerSecondsPadded()}`;\n\n        this.currentName = this.gameDispatcherService.currentName;\n        this.funFact = getRandomFact();\n\n        this.router.events.pipe(takeUntil(this.componentDestroyed$)).subscribe((event) => {\n            if (event instanceof NavigationStart) {\n                this.routerChangeMethod(event.url);\n            }\n        });\n\n        this.gameDispatcherService.subscribeToCanceledGameEvent(this.componentDestroyed$, (hostName: string) => this.hostHasCanceled(hostName));\n        this.gameDispatcherService.subscribeToJoinerRejectedEvent(this.componentDestroyed$, (hostName: string) => this.playerRejected(hostName));\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    private routerChangeMethod(url: string): void {\n        if (url !== '/game') {\n            this.playerLeavesService.handleLeaveLobby();\n        }\n    }\n\n    private playerRejected(hostName: string): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_REJECT_TITLE,\n                content: hostName + DIALOG_REJECT_CONTENT,\n                buttons: [\n                    {\n                        content: DIALOG_BUTTON_CONTENT_REJECTED,\n                        redirect: '/lobby',\n                        closeDialog: true,\n                    },\n                ],\n            },\n        });\n    }\n\n    private hostHasCanceled(hostName: string): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_CANCEL_TITLE,\n                content: hostName + DIALOG_CANCEL_CONTENT,\n                buttons: [\n                    {\n                        content: DIALOG_BUTTON_CONTENT_RETURN_LOBBY,\n                        redirect: '/lobby',\n                        closeDialog: true,\n                    },\n                ],\n            },\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n@import '../../style/utils.scss';\n\n::ng-deep body {\n    background: $page-background;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    gap: 5vh;\n\n    mat-card {\n        justify-content: center;\n        justify-items: center;\n        align-items: center;\n        text-align: center;\n        width: calc(100% - 24px);\n\n        &.top-box p:first-child {\n            font-size: larger;\n        }\n\n        .players {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: 100%;\n            gap: 1vw;\n\n            .name {\n                font-size: 1.2em;\n            }\n\n            #vs {\n                font-size: 0.9em;\n                font-weight: 600;\n                opacity: 0.55;\n            }\n        }\n\n        mat-progress-bar {\n            width: 100%;\n            margin-bottom: 20px;\n        }\n\n        .chip-list {\n            display: flex;\n            justify-content: center;\n            padding: 20px 0;\n\n            .chip {\n                @include no-select;\n                background: $gray;\n                padding: 2px 12px;\n                border-radius: 100px;\n                font-size: 0.85em;\n\n                app-icon {\n                    margin-right: 5px;\n                    width: 100%;\n                }\n\n                &:not(:last-child) {\n                    margin-right: 6px;\n                }\n            }\n        }\n    }\n\n    mat-card.top-box {\n        max-width: 350px;\n    }\n\n    mat-card.fun-fact-box {\n        max-width: 750px;\n        text-align: center;\n\n        #intro {\n            color: $primary;\n            font-weight: bold;\n            font-style: italic;\n            font-size: larger;\n        }\n    }\n}\n\n.centered {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    min-width: 250 px;\n    transform: translate(-50%, -50%);\n}\n",
                    "styleUrl": "./join-waiting-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerLeavesService",
                        "type": "PlayerLeavesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerLeavesService",
                        "type": "PlayerLeavesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container centered\">\n    <mat-card class=\"top-box\">\n        <p class=\"waiting-message\">En attente que l'hôte vous accepte.</p>\n\n        <mat-progress-bar class=\"progress\" mode=\"indeterminate\"></mat-progress-bar>\n\n        <div class=\"players\">\n            <span class=\"name\"\n                ><b>{{ currentName }}</b></span\n            ><span id=\"vs\"> vs </span><span class=\"name\">{{ currentLobby.hostName }}</span>\n        </div>\n\n        <div class=\"chip-list\">\n            <div class=\"chip\"><app-icon icon=\"hourglass-half\" size=\"sm\"></app-icon> {{ roundTime }}</div>\n            <div class=\"chip\">\n                <app-icon icon=\"gamepad\"></app-icon>\n                {{ currentLobby.gameType }}\n            </div>\n            <div class=\"chip\">\n                <app-icon icon=\"book\"></app-icon>\n                {{ currentLobby.dictionary.title }}\n            </div>\n        </div>\n\n        <button id=\"cancel-button\" mat-flat-button color=\"primary\" [routerLink]=\"'/lobby'\">Annuler</button>\n    </mat-card>\n\n    <mat-card class=\"fun-fact-box\">\n        <p id=\"intro\">Le saviez-vous ?</p>\n        <p id=\"fact\">{{ funFact }}</p>\n    </mat-card>\n</div>\n"
        },
        {
            "name": "LoadingPageComponent",
            "id": "component-LoadingPageComponent-48045b05b6816b7c750b08accb1d8c5e1f217b0834ad13598c10300302d4da63643c07748311415e2a07dec6a7ca566dd9c59cab6cdec4c9a79114fce623a23e",
            "file": "src/app/pages/loading-page/loading-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-page",
            "styleUrls": [
                "./loading-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isTrying",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-loading-page',\n    templateUrl: './loading-page.component.html',\n    styleUrls: ['./loading-page.component.scss'],\n})\nexport class LoadingPageComponent {\n    @Input() error?: string;\n    @Input() isTrying: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n::ng-deep body {\n    background: $page-background;\n}\n\n.loading-page {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    mat-card {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 24px;\n        gap: 24px;\n        max-width: 300px;\n\n        app-tile {\n            height: 64px;\n            width: 64px;\n            display: block;\n            font-size: 2.4em;\n            transform: rotate(0deg);\n        }\n        p {\n            margin: 0;\n            font-size: 1.2em;\n            text-align: center;\n\n            .dot {\n                @for $i from 1 to 4 {\n                    &:nth-child(#{$i}) {\n                        @keyframes dot-#{$i} {\n                            0% {\n                                opacity: 0%;\n                            }\n                            #{$i * 10% + 24%} {\n                                opacity: 0%;\n                            }\n                            #{$i * 10% + 25%} {\n                                opacity: 100%;\n                            }\n                        }\n                        animation-name: dot-#{$i};\n                    }\n                }\n\n                animation-duration: 1.5s;\n                animation-iteration-count: infinite;\n                visibility: visible;\n            }\n\n            &.trying-message {\n                font-size: 1.1em;\n                opacity: 0.55;\n            }\n        }\n    }\n\n    &:not(.error),\n    &.is-trying {\n        mat-card app-tile {\n            @keyframes loading {\n                0% {\n                    transform: rotate(0deg);\n                }\n\n                10% {\n                    transform: rotate(-20deg);\n                }\n\n                60% {\n                    transform: rotate(375deg);\n                }\n\n                68% {\n                    transform: rotate(360deg);\n                }\n\n                100% {\n                    transform: rotate(360deg);\n                }\n            }\n\n            animation: loading 2s ease-in-out 0s infinite;\n        }\n    }\n}\n",
                    "styleUrl": "./loading-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"loading-page\" [ngClass]=\"{ error: error !== undefined, 'is-trying': isTrying }\">\n    <mat-card>\n        <app-tile [tile]=\"{ letter: 'S', value: 0 }\" [hideValue]=\"true\"></app-tile>\n        \n        <div class=\"messages\">\n            <p *ngIf=\"error === undefined\">Chargement<span class=\"dot\">.</span><span class=\"dot\">.</span><span class=\"dot\">.</span></p>\n            <p *ngIf=\"error !== undefined\" class=\"error-message\">{{ error }}</p>\n            <p *ngIf=\"isTrying\" class=\"trying-message\">Tentative de reconnexion<span class=\"dot\">.</span><span class=\"dot\">.</span><span class=\"dot\">.</span></p>\n        </div>\n    </mat-card>\n</div>"
        },
        {
            "name": "LobbyInfoComponent",
            "id": "component-LobbyInfoComponent-f6ae82674f406a55b10816959c7e668e3b7db0482616619322942d12fcb6756215826017d6bb0be6f18a8a7c0ee9d5e71a33e3667f1cb14fc3d9a105d5f0b8ce",
            "file": "src/app/components/lobby-info/lobby-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lobby-info",
            "styleUrls": [
                "./lobby-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lobby-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lobby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "LobbyInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "joinLobbyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "roundTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timer",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "joinLobby",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { LobbyInfo } from '@app/classes/communication/';\nimport { Timer } from '@app/classes/round/timer';\nimport { TEST_DICTIONARY } from '@app/constants/controller-test-constants';\nimport { GameMode } from '@app/constants/game-mode';\nimport { GameType } from '@app/constants/game-type';\n\n@Component({\n    selector: 'app-lobby-info',\n    templateUrl: './lobby-info.component.html',\n    styleUrls: ['./lobby-info.component.scss'],\n})\nexport class LobbyInfoComponent implements OnInit {\n    @Input() lobby: LobbyInfo;\n    @Output() joinLobbyId: EventEmitter<string>;\n    roundTime: Timer;\n\n    constructor() {\n        this.joinLobbyId = new EventEmitter<string>();\n        this.lobby = {\n            lobbyId: '0',\n            dictionary: TEST_DICTIONARY,\n            hostName: '',\n            gameType: GameType.Classic,\n            gameMode: GameMode.Solo,\n            maxRoundTime: 0,\n            canJoin: false,\n        };\n        this.roundTime = Timer.convertTime(this.lobby.maxRoundTime);\n    }\n\n    ngOnInit(): void {\n        this.roundTime = Timer.convertTime(this.lobby.maxRoundTime);\n    }\n\n    joinLobby(): void {\n        this.joinLobbyId.emit(this.lobby.lobbyId);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/utils.scss';\n@import '../../style/variables.scss';\n\n.content {\n    display: flex;\n    align-items: center;\n\n    .info {\n        flex-grow: 1;\n\n        .name {\n            font-size: 1.3em;\n            margin: 0 0 8px 0;\n        }\n\n        .chip-list {\n            display: flex;\n\n            .chip {\n                @include no-select;\n                background: $gray;\n                padding: 2px 12px;\n                border-radius: 100px;\n                font-size: 0.85em;\n\n                app-icon {\n                    margin-right: 2px;\n                }\n\n                &:not(:last-child) {\n                    margin-right: 6px;\n                }\n            }\n        }\n    }\n\n    .button-container {\n        flex-grow: 0;\n    }\n}\n",
                    "styleUrl": "./lobby-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"content\">\n    <div class=\"info\">\n        <p class=\"name\">{{ lobby.hostName }}</p>\n        <div class=\"chip-list\">\n            <div class=\"chip\">\n                <app-icon icon=\"hourglass-half\" size=\"sm\"></app-icon> {{ roundTime.minutes }}:{{ roundTime.getTimerSecondsPadded() }}\n            </div>\n            <div class=\"chip\"><app-icon icon=\"gamepad\"></app-icon> {{ lobby.gameType }}</div>\n            <div class=\"chip\">\n                <app-icon icon=\"book\"></app-icon>\n                {{ lobby.dictionary.title }}\n            </div>\n        </div>\n    </div>\n    <div\n        class=\"button-container\"\n        matTooltip=\"Veuillez entrer un nom valide différent de {{ lobby.hostName }}\"\n        matTooltipClass=\"example-tooltip-red\"\n        [matTooltipDisabled]=\"lobby.canJoin\"\n    >\n        <button mat-flat-button id=\"join-button\" color=\"primary\" [disabled]=\"!lobby.canJoin\" (click)=\"joinLobby()\">\n            <app-icon icon=\"swords\" size=\"lg\"></app-icon> Joindre\n        </button>\n    </div>\n</mat-card>\n"
        },
        {
            "name": "LobbyPageComponent",
            "id": "component-LobbyPageComponent-89e371aec52170919c06eb8ed4402b2f2166bbb59ae12cb6fbeb5678b9de247007aebb5287dc0af0554d6351a5d0a4de57b3a55838abd5610c409c5a22276d72",
            "file": "src/app/pages/lobby-page/lobby-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lobby-page",
            "styleUrls": [
                "./lobby-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lobby-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filterFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "gameDispatcherService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameDispatcherService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lobbies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LobbyInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "numberOfLobbiesMeetingFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "playerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "playerNameValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getRandomLobby",
                    "args": [],
                    "optional": false,
                    "returnType": "LobbyInfo",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "joinLobby",
                    "args": [
                        {
                            "name": "lobbyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lobbyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinRandomLobby",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lobbyCanceledDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lobbyFullDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayerNameChanges",
                    "args": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFormAvailability",
                    "args": [
                        {
                            "name": "isNameValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isNameValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAllLobbiesAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateLobbies",
                    "args": [
                        {
                            "name": "lobbies",
                            "type": "LobbyInfo[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "lobbies",
                            "type": "LobbyInfo[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLobbyAttributes",
                    "args": [
                        {
                            "name": "lobby",
                            "type": "LobbyInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "lobby",
                            "type": "LobbyInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { LobbyInfo } from '@app/classes/communication/';\nimport { DefaultDialogComponent } from '@app/components/default-dialog/default-dialog.component';\nimport { NO_LOBBY_CAN_BE_JOINED } from '@app/constants/component-errors';\nimport {\n    DIALOG_BUTTON_CONTENT_RETURN_LOBBY,\n    DIALOG_CANCELED_CONTENT,\n    DIALOG_CANCELED_TITLE,\n    DIALOG_FULL_CONTENT,\n    DIALOG_FULL_TITLE,\n} from '@app/constants/pages-constants';\nimport { PLAYER_NAME_KEY } from '@app/constants/session-storage-constants';\nimport { GameDispatcherService } from '@app/services/';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-lobby-page',\n    templateUrl: './lobby-page.component.html',\n    styleUrls: ['./lobby-page.component.scss'],\n})\nexport class LobbyPageComponent implements OnInit, OnDestroy {\n    filterFormGroup: FormGroup;\n    numberOfLobbiesMeetingFilter: number;\n    playerName: string;\n    playerNameValid: boolean;\n    lobbies: LobbyInfo[];\n\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(public gameDispatcherService: GameDispatcherService, public dialog: MatDialog, private snackBar: MatSnackBar) {\n        this.playerName = window.localStorage.getItem(PLAYER_NAME_KEY) || '';\n        this.playerNameValid = false;\n        this.lobbies = [];\n        this.componentDestroyed$ = new Subject();\n        this.filterFormGroup = new FormGroup({\n            gameType: new FormControl('all'),\n        });\n        this.numberOfLobbiesMeetingFilter = 0;\n    }\n\n    ngOnInit(): void {\n        this.gameDispatcherService.subscribeToLobbiesUpdateEvent(this.componentDestroyed$, (lobbies: LobbyInfo[]) => this.updateLobbies(lobbies));\n        this.gameDispatcherService.subscribeToLobbyFullEvent(this.componentDestroyed$, () => this.lobbyFullDialog());\n        this.gameDispatcherService.subscribeToCanceledGameEvent(this.componentDestroyed$, () => this.lobbyCanceledDialog());\n        this.gameDispatcherService.handleLobbyListRequest();\n\n        this.filterFormGroup.get('gameType')?.valueChanges.subscribe(() => this.updateAllLobbiesAttributes());\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    joinLobby(lobbyId: string): void {\n        window.localStorage.setItem(PLAYER_NAME_KEY, this.playerName);\n        this.gameDispatcherService.handleJoinLobby(this.lobbies.filter((lobby) => lobby.lobbyId === lobbyId)[0], this.playerName);\n    }\n\n    joinRandomLobby(): void {\n        try {\n            const lobby = this.getRandomLobby();\n            this.joinLobby(lobby.lobbyId);\n        } catch (exception) {\n            this.snackBar.open((exception as Error).toString(), 'Ok', {\n                duration: 3000,\n            });\n        }\n    }\n\n    onPlayerNameChanges([playerName, valid]: [string, boolean]): void {\n        setTimeout(() => {\n            this.playerName = playerName;\n            this.playerNameValid = valid;\n            this.validateName();\n        });\n    }\n\n    private validateName(): void {\n        this.numberOfLobbiesMeetingFilter = 0;\n        this.setFormAvailability(this.playerNameValid);\n\n        this.updateAllLobbiesAttributes();\n    }\n\n    private setFormAvailability(isNameValid: boolean): void {\n        if (isNameValid) {\n            this.filterFormGroup.get('gameType')?.enable();\n        } else {\n            this.filterFormGroup.get('gameType')?.disable();\n        }\n    }\n\n    private updateLobbies(lobbies: LobbyInfo[]): void {\n        this.lobbies = lobbies;\n        this.validateName();\n    }\n\n    private lobbyFullDialog(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_FULL_TITLE,\n                content: DIALOG_FULL_CONTENT,\n                buttons: [\n                    {\n                        content: DIALOG_BUTTON_CONTENT_RETURN_LOBBY,\n                        closeDialog: true,\n                    },\n                ],\n            },\n        });\n    }\n\n    private lobbyCanceledDialog(): void {\n        this.dialog.open(DefaultDialogComponent, {\n            data: {\n                title: DIALOG_CANCELED_TITLE,\n                content: DIALOG_CANCELED_CONTENT,\n                buttons: [\n                    {\n                        content: DIALOG_BUTTON_CONTENT_RETURN_LOBBY,\n                        closeDialog: true,\n                    },\n                ],\n            },\n        });\n    }\n\n    private getRandomLobby(): LobbyInfo {\n        const filteredLobbies = this.lobbies.filter((lobby) => lobby.canJoin && lobby.meetFilters);\n        if (filteredLobbies.length === 0) throw new Error(NO_LOBBY_CAN_BE_JOINED);\n        return filteredLobbies[Math.floor(Math.random() * filteredLobbies.length)];\n    }\n\n    private updateAllLobbiesAttributes(): void {\n        this.numberOfLobbiesMeetingFilter = 0;\n        for (const lobby of this.lobbies) {\n            this.updateLobbyAttributes(lobby);\n            if (lobby.meetFilters) this.numberOfLobbiesMeetingFilter++;\n        }\n    }\n\n    private updateLobbyAttributes(lobby: LobbyInfo): void {\n        const gameType = this.filterFormGroup.get('gameType')?.value;\n        lobby.meetFilters = gameType === 'all' || gameType === lobby.gameType;\n        lobby.canJoin = this.playerNameValid && this.playerName !== lobby.hostName;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/utils.scss';\n$primary: #1b5e20;\n$disabled: gray;\n$line: rgb(202, 202, 202);\n$max-width: 1200px;\n\n::ng-deep body {\n    background: #f3f3f3;\n}\n\n.steps {\n    .step {\n        display: flex;\n\n        .step-indicator {\n            padding: 24px;\n            flex-grow: 0;\n            position: relative;\n\n            p.indicator {\n                @include no-select;\n                background-color: $primary;\n                color: white;\n                height: 24px;\n                width: 24px;\n                border-radius: 12px;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                font-weight: 500;\n                cursor: default;\n                transition: ease-in background 0.2s;\n            }\n        }\n\n        .step-content {\n            flex-grow: 1;\n            padding: 12px 12px 12px 0;\n            max-height: 100%;\n            transition: ease-in opacity 0.2s;\n        }\n\n        .step-divider {\n            margin-top: 24px;\n        }\n\n        &:not(:last-child) {\n            .step-indicator {\n\n                &:after,\n                &:before {\n                    content: '';\n                    position: absolute;\n                    top: 52px;\n                    left: 50%;\n                    width: 2px;\n                    transform: translateX(-50%);\n                }\n\n                &:after {\n                    background-color: $line;\n                    height: calc(100% - 31px);\n                    z-index: -2;\n                }\n\n                &:before {\n                    background-color: $primary;\n                    height: 0;\n                    z-index: -1;\n                    transition: ease-in height 0.2s;\n                }\n            }\n\n            &.completed .step-indicator {\n                &:before {\n                    height: calc(100% - 31px);\n                    transition: ease-in height 0.2s;\n                }\n            }\n        }\n\n        &.disabled {\n            .step-indicator p.indicator {\n                background-color: gray;\n                transition: ease-in background 0.2s;\n            }\n\n            .step-content {\n                @include no-select;\n                opacity: 0.45;\n                transition: ease-in opacity 0.2s;\n            }\n        }\n    }\n}\n\n.page {\n    .header {\n        position: fixed;\n        width: 100%;\n        z-index: 1;\n        box-sizing: border-box;\n\n        .content {\n            display: flex;\n            max-width: $max-width;\n            margin: 0 auto;\n            justify-content: space-between;\n\n            .back-btn {\n                display: flex;\n                align-items: center;\n                cursor: pointer;\n\n                app-icon {\n                    color: $primary;\n                    margin-right: 6px;\n                    font-size: 1.1em;\n                }\n\n                img {\n                    height: 22px;\n                    width: auto;\n                }\n            }\n\n            .title {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                font-size: 1.5em;\n            }\n\n            .link {\n                text-decoration: none;\n                font-size: 1.2em;\n                color: $primary;\n                transition: ease-in opacity 0.05s;\n\n                &:hover {\n                    opacity: 0.55;\n                    transition: ease-in opacity 0.1s;\n                }\n            }\n        }\n    }\n\n    .container {\n        max-width: $max-width;\n        margin: 0 auto;\n        padding-top: 54px;\n\n        .steps {\n            max-height: 100%;\n        }\n    }\n}\n\n.hidden {\n    visibility: hidden;\n    opacity: 0;\n    display: none;\n}\n\n#name-input-container mat-card {\n    box-sizing: border-box;\n    margin-top: 12px;\n    padding: 12px 12px 0 12px;\n\n    app-name-field {\n        width: 100%;\n    }\n}\n\n#lobby-container {\n    mat-card {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        p {\n            margin: 0;\n        }\n    }\n\n    .form-container {\n        margin-bottom: 12px;\n\n        .title {\n            font-size: 1.3em;\n        }\n\n        .lobby-amount {\n            opacity: 0.55;\n        }\n    }\n\n    mat-divider {\n        margin: 24px 0;\n    }\n\n    .grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 12px;\n\n        @media screen and (max-width: 830px) {\n            grid-template-columns: repeat(1, 1fr);\n        }\n    }\n}\n",
                    "styleUrl": "./lobby-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "gameDispatcherService",
                        "type": "GameDispatcherService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n    <mat-card class=\"header\">\n        <div class=\"content\">\n            <div class=\"back-btn\" [routerLink]=\"'/'\">\n                <app-icon icon=\"arrow-left\" styling=\"solid\"></app-icon>\n                <img src=\"https://bit.ly/3m206ss\" />\n            </div>\n\n            <div class=\"title\">Sélection de partie</div>\n\n            <a routerLink=\"/game-creation\" class=\"link\">Créer une partie</a>\n        </div>\n    </mat-card>\n\n    <div class=\"container\">\n        <div class=\"steps\">\n            <div class=\"step\" [ngClass]=\"{ completed: playerNameValid }\">\n                <div class=\"step-indicator\">\n                    <p class=\"indicator\"><span>1</span></p>\n                </div>\n                <div class=\"step-content\" id=\"name-input-container\">\n                    <mat-card>\n                        <app-name-field\n                            [initialPlayerName]=\"playerName\"\n                            [virtualPlayerName]=\"''\"\n                            [mustVerifyVirtualPlayerName]=\"false\"\n                            (keydown.enter)=\"$event.preventDefault()\"\n                            (playerNameChange)=\"onPlayerNameChanges($event)\"\n                        ></app-name-field>\n                    </mat-card>\n\n                    <mat-divider class=\"step-divider\"></mat-divider>\n                </div>\n            </div>\n\n            <div class=\"step\" [ngClass]=\"{ disabled: !playerNameValid }\">\n                <div class=\"step-indicator\">\n                    <p class=\"indicator\"><span>2</span></p>\n                </div>\n                <div class=\"step-content\" id=\"lobby-container\">\n                    <mat-card>\n                        <p *ngIf=\"numberOfLobbiesMeetingFilter > 0\">\n                            Choisissez une partie<span *ngIf=\"numberOfLobbiesMeetingFilter > 1\"> ou rejoignez une partie aléatoire</span>.\n                        </p>\n                        <p *ngIf=\"numberOfLobbiesMeetingFilter === 0\">Aucune partie disponible.</p>\n                        <button\n                            mat-flat-button\n                            color=\"primary\"\n                            *ngIf=\"numberOfLobbiesMeetingFilter > 0\"\n                            [disabled]=\"numberOfLobbiesMeetingFilter <= 1 || !playerNameValid\"\n                            (click)=\"joinRandomLobby()\"\n                        >\n                            <app-icon icon=\"random\"></app-icon> Partie aléatoire\n                        </button>\n                    </mat-card>\n\n                    <br />\n\n                    <mat-card class=\"form-container\">\n                        <div class=\"info\">\n                            <p class=\"title\">Filtre</p>\n                            <p class=\"lobby-amount\" *ngIf=\"numberOfLobbiesMeetingFilter > 1\">{{ numberOfLobbiesMeetingFilter }} parties trouvées</p>\n                            <p class=\"lobby-amount\" *ngIf=\"numberOfLobbiesMeetingFilter === 1\">{{ numberOfLobbiesMeetingFilter }} partie trouvée</p>\n                            <p class=\"lobby-amount\" *ngIf=\"numberOfLobbiesMeetingFilter === 0\">Aucune partie trouvée</p>\n                        </div>\n\n                        <div class=\"forms\">\n                            <form [formGroup]=\"filterFormGroup\">\n                                <mat-form-field appearance=\"standard\">\n                                    <mat-label>Type de partie</mat-label>\n                                    <mat-select formControlName=\"gameType\">\n                                        <mat-option value=\"all\">Tous</mat-option>\n                                        <mat-option value=\"Classique\">Classique</mat-option>\n                                        <mat-option value=\"LOG2990\">LOG2990</mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </form>\n                        </div>\n                    </mat-card>\n\n                    <div class=\"grid\">\n                        <ng-container *ngFor=\"let lobby of lobbies\">\n                            <app-lobby-info [lobby]=\"lobby\" *ngIf=\"lobby.meetFilters\" (joinLobbyId)=\"joinLobby($event)\"></app-lobby-info>\n                        </ng-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "ModifyDictionaryComponent",
            "id": "component-ModifyDictionaryComponent-b08e3541747d33a9b341786aff18f7d1a3332beab1f88839395fdbad1748f7710c100eb59cced3d5738eafe8e997c6ca9507a0bcf9084000365248c857cfabfb",
            "file": "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modify-dictionary-dialog",
            "styleUrls": [
                "./modify-dictionary-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modify-dictionary-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionaryDialogParameters",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dictionaryToModify",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionaryDialogParameters",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "formParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isDictionaryDescriptionValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isDictionaryTitleValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isInformationValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDictionary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnChanges, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DictionaryDialogParameters } from '@app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types';\nimport { DICTIONARY_DESCRIPTION_VALIDATION, DICTIONARY_NAME_VALIDATION } from '@app/constants/dictionary-name-validation';\nimport { DictionaryService } from '@app/services/dictionary-service/dictionary.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'app-modify-dictionary-dialog',\n    templateUrl: './modify-dictionary-dialog.component.html',\n    styleUrls: ['./modify-dictionary-dialog.component.scss'],\n})\nexport class ModifyDictionaryComponent implements OnChanges, OnDestroy {\n    formParameters: FormGroup;\n\n    private dictionaryToModify: DictionaryDialogParameters;\n    private isDictionaryTitleValid: boolean;\n    private isDictionaryDescriptionValid: boolean;\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(\n        private dialogRef: MatDialogRef<ModifyDictionaryComponent>,\n        private dictionariesService: DictionaryService,\n        @Inject(MAT_DIALOG_DATA) public data: DictionaryDialogParameters,\n    ) {\n        this.componentDestroyed$ = new Subject();\n        this.dictionaryToModify = data;\n        this.isDictionaryTitleValid = true;\n        this.isDictionaryDescriptionValid = true;\n        this.formParameters = new FormGroup({\n            inputDictionaryTitle: new FormControl(data.dictionaryToModifyTitle, [\n                Validators.required,\n                Validators.minLength(DICTIONARY_NAME_VALIDATION.minLength),\n                Validators.maxLength(DICTIONARY_NAME_VALIDATION.maxLength),\n            ]),\n            inputDictionaryDescription: new FormControl(data.dictionaryToModifyDescription, [\n                Validators.required,\n                Validators.minLength(DICTIONARY_DESCRIPTION_VALIDATION.minLength),\n                Validators.maxLength(DICTIONARY_DESCRIPTION_VALIDATION.maxLength),\n            ]),\n        });\n    }\n\n    ngOnChanges(): void {\n        this.formParameters.controls.inputTitle?.updateValueAndValidity();\n        this.isDictionaryTitleValid = this.formParameters.get('inputDictionaryTitle')?.valid ?? false;\n        this.isDictionaryDescriptionValid = this.formParameters.get('inputDictionaryDescription')?.valid ?? false;\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    updateDictionary(): void {\n        this.dictionariesService.updateDictionary(\n            this.dictionaryToModify.dictionaryId,\n            this.formParameters.get('inputDictionaryTitle')?.value,\n            this.formParameters.get('inputDictionaryDescription')?.value,\n        );\n        this.closeDialog();\n    }\n\n    closeDialog(): void {\n        this.dialogRef.close();\n    }\n\n    isInformationValid(): boolean {\n        return this.isDictionaryTitleValid && this.isDictionaryDescriptionValid;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.primary {\n    color: $primary;\n}\n\n#container {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    justify-content: space-between;\n    height: 80%;\n}\n\n#buttons-container {\n    text-align: right;\n}\n\n.form-field {\n    width: 80%;\n}",
                    "styleUrl": "./modify-dictionary-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModifyDictionaryComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DictionaryDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModifyDictionaryComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DictionaryDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Modifier le dictionnaire</h2>\n<div id=\"container\">\n    <div>\n        <mat-form-field\n            class=\"form-field\"\n            appearance=\"outline\"\n            [formGroup]=\"formParameters\"\n            matTooltip=\"Le nom du dictionnaire doit être entre 2 et 30 caractères.\"\n            matTooltipPosition=\"above\"\n        >\n            <mat-label> Nom</mat-label>\n            <input\n                matInput\n                id=\"dictionaryNameValidator\"\n                type=\"text\"\n                formControlName=\"inputDictionaryTitle\"\n                autocomplete=\"off\"\n                (ngModelChange)=\"ngOnChanges()\"\n                (valueChanges)=\"ngOnChanges()\"\n            />\n        </mat-form-field>\n    </div>\n    <div>\n        <mat-form-field\n            class=\"form-field\"\n            appearance=\"outline\"\n            [formGroup]=\"formParameters\"\n            matTooltipPosition=\"above\"\n            matTooltip=\"La description doit être entre 2 et 80 caractères.\"\n            >\n            <mat-label> Description</mat-label>\n            <input\n                matInput\n                id=\"dictionaryDescriptionValidator\"\n                type=\"text\"\n                formControlName=\"inputDictionaryDescription\"\n                autocomplete=\"off\"\n                (ngModelChange)=\"ngOnChanges()\"\n                (valueChanges)=\"ngOnChanges()\"\n            />\n        </mat-form-field>\n    </div>\n    <div id=\"buttons-container\">\n        <button mat-flat-button color = \"primary\" (click)=\"updateDictionary()\" [disabled]=\"!this.isInformationValid()\">\n            <app-icon icon=\"pencil\"></app-icon>\n            Modifier\n        </button>\n        <button mat flat button mat-button color = \"primary\" (click)=\"closeDialog()\">\n            <app-icon icon=\"ban\"></app-icon>\n            Annuler\n        </button> \n    </div>\n</div>\n    \n\n"
        },
        {
            "name": "NameFieldComponent",
            "id": "component-NameFieldComponent-47abaa27852ceeee8d84efd991c226e18e1715fe334403282ea765f01423fd742912abe26b52804e3c75332828a0d9bdfe5ab5b261776790171035f6ae95e3f4",
            "file": "src/app/components/name-field/name-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-name-field",
            "styleUrls": [
                "./name-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./name-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initialPlayerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mustVerifyVirtualPlayerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualPlayerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "isInputNameValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                },
                {
                    "name": "playerNameChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorNameNoMatchRegex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorNameRequired",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "errorNameTooLong",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errorNameTooShort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errorSameNameAsVirtualPlayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "nameDifferentFromVirtualPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormInvalidClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { NAME_NO_MATCH_REGEX, NAME_REQUIRED, NAME_SAME_AS_VIRTUAL_PLAYER, NAME_TOO_LONG, NAME_TOO_SHORT } from '@app/constants/name-field';\nimport { NAME_VALIDATION } from '@app/constants/name-validation';\n\n@Component({\n    selector: 'app-name-field',\n    templateUrl: './name-field.component.html',\n    styleUrls: ['./name-field.component.scss'],\n})\nexport class NameFieldComponent implements OnChanges, OnInit {\n    @Input() initialPlayerName: string;\n    @Input() virtualPlayerName: string;\n    @Input() mustVerifyVirtualPlayerName: boolean;\n    @Output() isInputNameValid;\n    @Output() playerNameChange;\n    errorNameRequired: string;\n    errorNameTooShort: string;\n    errorNameTooLong: string;\n    errorNameNoMatchRegex: string;\n    errorSameNameAsVirtualPlayer: string;\n    formParameters: FormGroup;\n\n    constructor() {\n        this.initialPlayerName = '';\n        this.virtualPlayerName = '';\n        this.mustVerifyVirtualPlayerName = false;\n        this.isInputNameValid = new EventEmitter<boolean>();\n        this.playerNameChange = new EventEmitter<[name: string, valid: boolean]>();\n        this.errorNameRequired = NAME_REQUIRED;\n        this.errorNameTooShort = NAME_TOO_SHORT;\n        this.errorNameTooLong = NAME_TOO_LONG;\n        this.errorNameNoMatchRegex = NAME_NO_MATCH_REGEX;\n        this.errorSameNameAsVirtualPlayer = NAME_SAME_AS_VIRTUAL_PLAYER;\n        this.formParameters = new FormGroup({\n            inputName: new FormControl('', [\n                Validators.required,\n                Validators.pattern(NAME_VALIDATION.rule),\n                Validators.minLength(NAME_VALIDATION.minLength),\n                Validators.maxLength(NAME_VALIDATION.maxLength),\n                this.nameDifferentFromVirtualPlayer(),\n            ]),\n        });\n    }\n\n    ngOnInit(): void {\n        this.formParameters.get('inputName')?.setValue(this.initialPlayerName);\n        this.onChange();\n    }\n\n    ngOnChanges(): void {\n        this.onChange();\n    }\n\n    onChange(): void {\n        if (this.formParameters.controls.inputName?.dirty) this.formParameters.controls.inputName?.markAsTouched();\n        this.formParameters.controls.inputName?.updateValueAndValidity();\n        const isNameValid: boolean = this.formParameters.get('inputName')?.valid ?? false;\n        this.isInputNameValid.emit(isNameValid);\n        this.playerNameChange.emit([this.formParameters.get('inputName')?.value, isNameValid]);\n    }\n\n    onFormInvalidClick(): void {\n        this.formParameters.controls.inputName?.markAsDirty();\n        this.onChange();\n    }\n\n    private nameDifferentFromVirtualPlayer(): ValidatorFn {\n        return (inputName: AbstractControl): ValidationErrors | null => {\n            if (!this.mustVerifyVirtualPlayerName) return null;\n            if (inputName.value !== this.virtualPlayerName) return null;\n            return { nameDifferentFomVirtualPlayer: true };\n        };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.alert {\n    margin-top: -20px;\n    color: red;\n    display: flex;\n\n}\n\n.alert-group {\n    height: 0px;\n    color: red;\n}\n\n mat-form-field, input {\n    width: 100%;\n}",
                    "styleUrl": "./name-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"form-group\">\n    <mat-form-field\n        appearance=\"outline\"\n        [formGroup]=\"formParameters\"\n        matTooltip=\"Votre nom doit être entre 2 et 20 caractères sans caractères spéciaux\"\n        matTooltipPosition=\"above\"\n    >\n        <mat-label><app-icon icon=\"user\"></app-icon> Choisissez votre nom de joueur</mat-label>\n        <input\n            matInput\n            id=\"playerNameValidator\"\n            type=\"text\"\n            formControlName=\"inputName\"\n            autocomplete=\"off\"\n            (ngModelChange)=\"onChange()\"\n            (valueChanges)=\"onChange()\"\n        />\n    </mat-form-field>\n    <span\n        class=\"alert-group\"\n        *ngIf=\"formParameters.get('inputName')?.invalid && (formParameters.get('inputName')?.dirty || formParameters.get('inputName')?.touched)\"\n    >\n        <mat-error class=\"alert\" *ngIf=\"formParameters.get('inputName')?.errors?.['required']\"> {{ errorNameRequired }} </mat-error>\n        <mat-error class=\"alert\" *ngIf=\"formParameters.get('inputName')?.errors?.['minlength']\">\n            {{ errorNameTooShort }}\n        </mat-error>\n        <mat-error class=\"alert\" *ngIf=\"formParameters.get('inputName')?.errors?.['maxlength']\">\n            {{ errorNameTooLong }}\n        </mat-error>\n        <mat-error\n            class=\"alert\"\n            *ngIf=\"\n                formParameters.get('inputName')?.errors?.pattern &&\n                !formParameters.get('inputName')?.errors?.maxlength &&\n                !formParameters.get('inputName')?.errors?.minlength\n            \"\n        >\n            {{ errorNameNoMatchRegex }}\n        </mat-error>\n    </span>\n    <mat-error class=\"alert\" *ngIf=\"mustVerifyVirtualPlayerName && formParameters.get('inputName')?.value === virtualPlayerName\">\n        {{ errorSameNameAsVirtualPlayer }}\n    </mat-error>\n</div>\n"
        },
        {
            "name": "ObjectiveBoxComponent",
            "id": "component-ObjectiveBoxComponent-5c7b59fa268f941ec0d59cfdc250b9c8c2bfe21ced0139c07259f6a840281f6b9f6e534ddc563209886436c3c7632b6547627e95634017cf58d4824b6ac72c6e",
            "file": "src/app/components/objective-box/objective-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-objective-box",
            "styleUrls": [
                "./objective-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./objective-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "objectiveManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectivesManagerService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ObjectivesManagerService } from '@app/services/objectives-manager-service/objectives-manager.service';\n\n@Component({\n    selector: 'app-objective-box',\n    templateUrl: './objective-box.component.html',\n    styleUrls: ['./objective-box.component.scss'],\n})\nexport class ObjectiveBoxComponent {\n    constructor(public objectiveManager: ObjectivesManagerService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\n    font-size: 0.9em;\n    font-weight: 500;\n    opacity: 0.65;\n    margin-bottom: 4px;\n}\n\n#objective-box-container {\n    overflow-y: auto;\n    max-height: 330px;\n}\n",
                    "styleUrl": "./objective-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "objectiveManager",
                        "type": "ObjectivesManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "objectiveManager",
                        "type": "ObjectivesManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div id=\"objective-box-container\">\n    <p class=\"title\"><app-icon icon=\"lock-open\"></app-icon> Objectifs publics</p>\n    <div *ngFor=\"let objective of objectiveManager.getPublicObjectives()\">\n        <app-objective [objective]=\"objective\"></app-objective>\n    </div>\n\n    <p *ngIf=\"objectiveManager.getPrivateObjectives().length <= 1\" class=\"title\"><app-icon icon=\"lock\"></app-icon> Objectif privé</p>\n    <p *ngIf=\"objectiveManager.getPrivateObjectives().length > 1\" class=\"title\"><app-icon icon=\"lock\"></app-icon> Objectifs privés</p>\n    <div *ngFor=\"let objective of objectiveManager.getPrivateObjectives()\">\n        <app-objective [objective]=\"objective\"></app-objective>\n    </div>\n</div>\n"
        },
        {
            "name": "ObjectiveComponent",
            "id": "component-ObjectiveComponent-dad08e4e7a9c083546fc9bb0421e38ac0e6d1c44632c883bebe516cd8e4636f936d0f3dcbd4f072e80ca73da2eec91a0c621f78063bf059a4d937575148aae95",
            "file": "src/app/components/objective/objective.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-objective",
            "styleUrls": [
                "./objective.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./objective.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "objective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ObjectiveData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStateMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ObjectiveData } from '@app/classes/communication/objective-data';\nimport { ObjectiveState } from '@app/classes/objectives/objective-state';\nimport { OPPONENT_COMPLETED_THIS_OBJECTIVE, PERCENT, YOU_COMPLETED_THIS_OBJECTIVE } from '@app/constants/components-constants';\n\n@Component({\n    selector: 'app-objective',\n    templateUrl: './objective.component.html',\n    styleUrls: ['./objective.component.scss'],\n})\nexport class ObjectiveComponent {\n    @Input() objective: ObjectiveData;\n\n    getProgress(): number {\n        return (this.objective.progress / this.objective.maxProgress) * PERCENT;\n    }\n\n    getStateMessage(): string {\n        switch (this.objective.state) {\n            case ObjectiveState.Completed:\n                return YOU_COMPLETED_THIS_OBJECTIVE;\n            case ObjectiveState.CompletedByOpponent:\n                return OPPONENT_COMPLETED_THIS_OBJECTIVE(this.objective.isPublic);\n            default:\n                return '';\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n@import '../../style/animations.scss';\n\n#objective {\n    border-radius: 10px;\n    padding: 14px;\n\n    & {\n        margin-bottom: 8px;\n    }\n\n    .top, .bottom {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n    \n    .trophy-icon {\n        position: relative;\n        margin-right: 6px;\n        color: rgb(214, 214, 214);\n    }\n\n    .help-icon {\n        margin-left: 6px;\n    }\n    \n    .points {\n        background: rgb(231, 231, 231);\n        border-radius: 100px;\n        padding: 2px 8px;\n        text-align: center;\n        margin-left: 12px;\n        line-break: strict;\n        white-space: nowrap;\n    }\n\n    .progress-text {\n        margin-right: 6px;\n        font-size: 0.95em;\n        font-weight: 500;\n        opacity: 0.75;\n    }\n\n    p {\n        margin: 0;\n    }\n\n    &.completed {\n        .trophy-icon {\n            color: $primary;\n        }\n\n        .title {\n            font-weight: 500;\n        }\n\n        .points {\n            background: $primary;\n            color: white;\n        }\n    }\n\n    &.completed-by-opponent {\n        opacity: 0.55;\n\n        .trophy-icon:after {\n            content: '';\n            position: absolute;\n            height: 110%;\n            width: 2px;\n            background: tomato;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) rotate(-45deg);\n            border: solid 1px white;\n        }\n    }\n}",
                    "styleUrl": "./objective.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card id=\"objective\" [ngClass]=\"{ \n    'not-completed': objective.state === 'NotCompleted', \n    'completed': objective.state === 'Completed', \n    'completed-by-opponent': objective.state === 'CompletedByOpponent' \n}\">\n    <div class=\"top\">\n        <p>\n            <app-icon icon=\"trophy\" styling=\"solid\" *ngIf=\"objective.state !== 'NotCompleted'\" class=\"trophy-icon\" [matTooltip]=\"getStateMessage()\" matTooltipPosition=\"left\"></app-icon>\n            <span class=\"title\">{{ objective.name }}</span>\n            <app-icon icon=\"info-circle\" class=\"help-icon\" [matTooltip]=\"objective.description\" matTooltipPosition=\"above\"></app-icon>\n        </p>\n        <p class=\"points\">{{ objective.bonusPoints }} points</p>\n    </div>\n    <div class=\"bottom\">\n        <span class=\"progress-text\">{{ objective.progress }}/{{ objective.maxProgress }}</span>\n        <mat-progress-bar mode=\"determinate\" [value]=\"getProgress()\" *ngIf=\"objective.state === 'NotCompleted'\"></mat-progress-bar>\n    </div>\n</mat-card>"
        },
        {
            "name": "PageHeaderComponent",
            "id": "component-PageHeaderComponent-4267a0aab1aba47404b52a5c64658390bba007b32d636ed83b071200b8dbe135048ce37b76c05adad0bc32c46af7a2117e744b9a11b72adb01172b31b22696c0",
            "file": "src/app/components/page-header/page-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-header",
            "styleUrls": [
                "./page-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "button",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonRoute",
                    "defaultValue": "'/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'SCRABBLE'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-page-header',\n    templateUrl: './page-header.component.html',\n    styleUrls: ['./page-header.component.scss'],\n})\nexport class PageHeaderComponent {\n    @Input() title: string = 'SCRABBLE';\n    @Input() button: string = '';\n    @Input() buttonRoute: string = '/';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.header {\n    position: fixed;\n    width: 100%;\n    z-index: 10;\n    box-sizing: border-box;\n\n    .content {\n        display: flex;\n        max-width: $page-max-width;\n        margin: 0 auto;\n        justify-content: space-between;\n\n        .back-btn {\n            display: flex;\n            align-items: center;\n            cursor: pointer;\n\n            app-icon {\n                color: $primary;\n                margin-right: 8px;\n                font-size: 1.1em;\n            }\n\n            img {\n                height: 22px;\n                width: auto;\n            }\n        }\n\n        .title {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-size: 1.5em;\n        }\n\n        .link {\n            text-decoration: none;\n            font-size: 1.2em;\n            color: $primary;\n            transition: ease-in opacity 0.05s;\n\n            &:hover {\n                opacity: 0.55;\n                transition: ease-in opacity 0.1s;\n            }\n        }\n    }\n}",
                    "styleUrl": "./page-header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"header\">\n    <div class=\"content\">\n        <div class=\"back-btn\" [routerLink]=\"'/'\">\n            <app-icon icon=\"arrow-left\" styling=\"solid\"></app-icon>\n            <img src=\"https://bit.ly/3m206ss\" />\n        </div>\n    \n        <div class=\"title\">{{ title }}</div>\n\n        <a [routerLink]=\"buttonRoute\" class=\"link\">{{ button }}</a>\n    </div>\n</mat-card>\n"
        },
        {
            "name": "SquareComponent",
            "id": "component-SquareComponent-2bfb14d75cb1829513817c933dee27e7c092987310086bbe5bad53466985d62014c153ffd4de34df5d26c27df12c91521c8e6b35992dcf2f7b2810bc588ea035",
            "file": "src/app/components/square/square.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-square",
            "styleUrls": [
                "./square.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./square.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cursorOrientation",
                    "defaultValue": "Orientation.Horizontal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Orientation",
                    "decorators": []
                },
                {
                    "name": "isCursor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "squareView",
                    "defaultValue": "DEFAULT_SQUARE_VIEW",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "SquareView",
                    "decorators": []
                },
                {
                    "name": "tileFontSize",
                    "defaultValue": "SQUARE_TILE_DEFAULT_FONT_SIZE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "multiplierType",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "multiplierValue",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getOrientationClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Orientation } from '@app/classes/actions/orientation';\nimport { SquareView } from '@app/classes/square';\nimport { DEFAULT_SQUARE_VIEW } from '@app/constants/game-constants';\nimport { SQUARE_TILE_DEFAULT_FONT_SIZE } from '@app/constants/tile-font-size-constants';\n\nexport interface CssStyleProperty {\n    key: string;\n    value: string;\n}\n\n@Component({\n    selector: 'app-square',\n    templateUrl: './square.component.html',\n    styleUrls: ['./square.component.scss'],\n})\nexport class SquareComponent implements OnInit {\n    @Input() squareView: SquareView = DEFAULT_SQUARE_VIEW;\n    @Input() tileFontSize: number = SQUARE_TILE_DEFAULT_FONT_SIZE;\n    @Input() isCursor: boolean = false;\n    @Input() cursorOrientation: Orientation = Orientation.Horizontal;\n    multiplierType: string | undefined = undefined;\n    multiplierValue: string | undefined = undefined;\n\n    ngOnInit(): void {\n        [this.multiplierType, this.multiplierValue] = this.squareView.getText();\n    }\n\n    getOrientationClass(): string {\n        return `cursor-${this.cursorOrientation === Orientation.Horizontal ? 'horizontal' : 'vertical'}`;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/utils.scss';\n\n$selected-color: rgb(64, 218, 115);\n\napp-square {\n    transform: scale(2, 2);\n}\n.square {\n    @include no-select();\n\n    position: relative;\n    width: 100%;\n    height: 100%;\n    border-radius: 5px;\n    transition: ease-in transform 0.05s;\n    box-sizing: border-box;\n\n    &.no-tile {\n        cursor: pointer;\n\n        &:hover {\n            transform: scale(1.1);\n            z-index: 1;\n            transition: ease-in transform 0.1s;\n        }\n    }\n    &.has-tile {\n        cursor: default;\n\n        app-tile {\n            transform: scale(1.2);\n        }\n    }\n    &.cursor {\n        @keyframes blink-border {\n            0% {\n                border: solid 4px $selected-color;\n            }\n            30% {\n                border: solid 4px transparent;\n            }\n            60% {\n                border: solid 4px $selected-color;\n            }\n            100% {\n                border: solid 4px $selected-color;\n            }\n        }\n        \n\n        &:before {\n            content: \"\";\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border-radius: 5px;\n            box-sizing: border-box;\n            background-color: rgba($selected-color, 30%);\n            animation: blink-border;\n            animation-duration: 0.8s;\n            animation-iteration-count: infinite;\n        }\n\n        &:after {\n            @keyframes blink-arrow {\n                0% {\n                    color: $selected-color;\n                }\n                30% {\n                    color: transparent;\n                }\n                60% {\n                    color: $selected-color;\n                }\n                100% {\n                    color: $selected-color;\n                }\n            }\n\n            position: absolute;\n            z-index: 100;\n            color: $selected-color;\n            font-size: 1.2em;\n            text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);\n            animation: blink-arrow;\n            animation-duration: 0.8s;\n            animation-iteration-count: infinite;\n        }\n\n        &.cursor-horizontal:after {\n            content: \"▶\";\n            top: 50%;\n            right: -7px;\n            transform: translate(100%, -50%);\n        }\n\n        &.cursor-vertical:after {\n            content: \"▼\";\n            left: 50%;\n            bottom: -5px;\n            transform: translate(-50%, 100%);\n        }\n    }\n\n    .content {\n        height: 100%;\n        width: 100%;\n\n        .multiplier {\n            height: 100%;\n            width: 100%;\n            text-align: center;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            opacity: 0.75;\n            \n            p {\n                margin: 0;\n            }\n            p.type {\n                display: block;\n                font-size: 0.6em;\n                line-height: 1em;\n                text-transform: uppercase;\n            }\n            p.value {\n                display: block;\n                line-height: 1em;\n            }\n        }\n\n        .star {\n            height: 100%;\n            width: 100%;\n            margin: 0;\n            font-size: 1.3em;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    }\n}",
                    "styleUrl": "./square.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n    [class]=\"'square' + (squareView.square.tile ? ' has-tile ' : ' no-tile ') + getOrientationClass()\"\n    [ngClass]=\"{ cursor: isCursor }\"\n    [ngStyle]=\"{ 'background-color': squareView.getColor() }\"\n>\n    <div class=\"content\">\n        <ng-container *ngIf=\"squareView.square.tile; else noTile\">\n            <app-tile [tile]=\"squareView.square.tile\" [ngStyle]=\"{ fontSize: tileFontSize + 'em' }\" [applied]=\"squareView.applied\" [newlyPlaced]=\"squareView.newlyPlaced\"></app-tile>\n        </ng-container>\n        <ng-template #noTile>\n            <ng-container *ngIf=\"squareView.square.isCenter; else notCenter\">\n                <p class=\"star\">\n                    <app-icon icon=\"star\" styling=\"solid\"></app-icon>\n                </p>\n            </ng-container>\n            <ng-template #notCenter>\n                <div class=\"multiplier\" *ngIf=\"multiplierType\">\n                    <p class=\"type\">{{ multiplierType }}</p>\n                    <p class=\"value\">× {{ multiplierValue }}</p>\n                </div>\n            </ng-template>\n        </ng-template>\n    </div>\n</div>\n"
        },
        {
            "name": "TileComponent",
            "id": "component-TileComponent-5299a42c396df000d666945eb6e79d635d1e0fdc4653114fbbe2f9dbbbaf060483b57cefb23fc1f536cc973cc5c3f787c2fbde98fc408aa2fb101dfd7d83b307",
            "file": "src/app/components/tile/tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tile",
            "styleUrls": [
                "./tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "applied",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "newlyPlaced",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Tile | literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getBackgroundPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isWorthlessTile",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { LetterValue, Tile } from '@app/classes/tile';\nimport { BLANK_TILE_LETTER_VALUE, UNDEFINED_TILE } from '@app/constants/game-constants';\n\nconst AMOUNT_OF_TILE_BACKGROUND_IMAGES = 4;\n\n@Component({\n    selector: 'app-tile',\n    templateUrl: './tile.component.html',\n    styleUrls: ['./tile.component.scss'],\n})\nexport class TileComponent implements OnInit {\n    @Input() tile: Tile | { letter: '?'; value: number; isBlank?: boolean; playedLetter?: LetterValue };\n    @Input() fontSize: string;\n    @Input() hideValue: boolean;\n    @Input() applied: boolean;\n    @Input() newlyPlaced: boolean;\n    backgroundPath: string;\n\n    constructor() {\n        this.tile = UNDEFINED_TILE;\n        this.fontSize = '1em';\n        this.hideValue = false;\n        this.applied = true;\n        this.newlyPlaced = false;\n        this.backgroundPath = this.getBackgroundPath();\n    }\n\n    ngOnInit(): void {\n        if (this.isWorthlessTile()) {\n            this.hideValue = true;\n        }\n    }\n\n    private getBackgroundPath(): string {\n        const index = Math.floor(Math.random() * AMOUNT_OF_TILE_BACKGROUND_IMAGES) + 1;\n        return `assets/img/tiles/bg_${index}.svg`;\n    }\n\n    private isWorthlessTile(): boolean {\n        return this.tile.isBlank || (this.tile.letter === BLANK_TILE_LETTER_VALUE && this.tile.value === 0);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/utils.scss';\n@import '../../style/variables.scss';\n\n$letter-offset: 1px;\n$text-color: rgb(80, 55, 10);\n\n.tile {\n    @include no-select;\n    height: 100%;\n    width: 100%;\n    position: relative;\n    background-position: center !important;\n    background-size: contain !important;\n    background-repeat: no-repeat !important;\n    cursor: pointer;\n\n    p {\n        margin: 0;\n        position: absolute;\n        line-height: 1em;\n    }\n    p.letter {\n        top: calc(50% - #{$letter-offset});\n        left: calc(50% - #{$letter-offset});\n        transform: translate(-50%, -50%);\n        font-size: 1.4em;\n        font-weight: 600;\n        color: $text-color;\n    }\n    p.value {\n        bottom: 3px;\n        right: 4px;\n        color: $text-color;\n        font-size: 0.7em;\n        font-weight: 700;\n    }\n\n    &.hide-value {\n        p.letter {\n            top: 50%;\n            left: 50%;\n        }\n\n        p.value {\n            display: none;\n            visibility: hidden;\n        }\n    }\n    &.blank p {\n        color: tomato !important;\n    }\n\n    &:not(.applied) {\n        filter: hue-rotate(50deg);\n    }\n\n    &.newly-placed {\n        @keyframes flash {\n            0% { transform: scale(1); }\n            60% { transform: scale(1.2); }\n            100% { transform: scale(1); }\n        }\n        \n        filter: brightness(0.875);\n        animation-name: flash;\n        animation-duration: 0.5s;\n    }\n}",
                    "styleUrl": "./tile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n    [ngClass]=\"{ tile: true, 'hide-value': hideValue, blank: tile.isBlank, applied, 'newly-placed': newlyPlaced }\"\n    [style.background]=\"'url(' + backgroundPath + ')'\"\n    [style.fontSize]=\"fontSize\"\n>\n    <p class=\"letter\">{{ tile.playedLetter ? tile.playedLetter : tile.letter === '*' ? '' : tile.letter }}</p>\n    <p class=\"value\">{{ tile.value }}</p>\n</div>\n"
        },
        {
            "name": "TileRackComponent",
            "id": "component-TileRackComponent-42508b425a57f76a04adfb0409bae5b8ce33182711c59695d119c30bde1eb302b52a57cb4fb38646604674cb0c4908d095b0f99877b5a2c05d46aa8de9f4a2ba",
            "file": "src/app/components/tile-rack/tile-rack.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tile-rack",
            "styleUrls": [
                "./tile-rack.component.scss",
                "./tile-rack-2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-rack.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "gameService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isShuffling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selectedTiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RackTile[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TileRackSelectType",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "tileFontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RackTile[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "focusableComponentDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "focusableEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "loseFocusEvent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "canExchangeTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createRackTile",
                    "args": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rackTile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RackTile",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "Tile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rackTile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exchangeTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedTileIndex",
                    "args": [
                        {
                            "name": "tiles",
                            "type": "RackTile[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tiles",
                            "type": "RackTile[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleUsedTiles",
                    "args": [
                        {
                            "name": "usedTilesPayload",
                            "type": "PlaceActionPayload | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "usedTilesPayload",
                            "type": "PlaceActionPayload | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveSelectedTile",
                    "args": [
                        {
                            "name": "direction",
                            "type": "Direction | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "Direction | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusableEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "onLoseFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetUsedTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectTile",
                    "args": [
                        {
                            "name": "selectType",
                            "type": "TileRackSelectType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectType",
                            "type": "TileRackSelectType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTileFromKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTileToExchange",
                    "args": [
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTileToMove",
                    "args": [
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shuffleTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "unselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unselectTile",
                    "args": [
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "RackTile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTileRack",
                    "args": [
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "playerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitFocusableEvent",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "emitLoseFocusEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToFocusableEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "subscribeToLoseFocusEvent",
                    "args": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroy$",
                            "type": "Subject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                },
                {
                    "name": "unsubscribeToFocusableEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "FocusableComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActionType, PlaceActionPayload } from '@app/classes/actions/action-data';\nimport Direction from '@app/classes/board-navigator/direction';\nimport { FocusableComponent } from '@app/classes/focusable-component/focusable-component';\nimport { Tile } from '@app/classes/tile';\nimport { ARROW_LEFT, ARROW_RIGHT, ESCAPE } from '@app/constants/components-constants';\nimport { MAX_TILES_PER_PLAYER } from '@app/constants/game-constants';\nimport { RACK_TILE_DEFAULT_FONT_SIZE } from '@app/constants/tile-font-size-constants';\nimport { TileRackSelectType } from '@app/constants/tile-rack-select-type';\nimport { GameService } from '@app/services';\nimport { ActionService } from '@app/services/action-service/action.service';\nimport { FocusableComponentsService } from '@app/services/focusable-components-service/focusable-components.service';\nimport { GameViewEventManagerService } from '@app/services/game-view-event-manager-service/game-view-event-manager.service';\nimport Delay from '@app/utils/delay/delay';\nimport { nextIndex } from '@app/utils/next-index/next-index';\nimport { preserveArrayOrder } from '@app/utils/preserve-array-order/preserve-array-order';\nimport { Random } from '@app/utils/random/random';\nimport { pipe, Subject } from 'rxjs';\n\nexport type RackTile = Tile & { isUsed: boolean; isSelected: boolean };\nconst SHUFFLE_ANIMATION_DELAY = 250;\n\n@Component({\n    selector: 'app-tile-rack',\n    templateUrl: './tile-rack.component.html',\n    styleUrls: ['./tile-rack.component.scss', './tile-rack-2.component.scss'],\n})\nexport class TileRackComponent extends FocusableComponent<KeyboardEvent> implements OnInit, OnDestroy {\n    tiles: RackTile[];\n    selectedTiles: RackTile[];\n    selectionType: TileRackSelectType;\n    tileFontSize: number;\n    isShuffling: boolean;\n\n    private componentDestroyed$: Subject<boolean>;\n\n    constructor(\n        public gameService: GameService,\n        private readonly focusableComponentService: FocusableComponentsService,\n        private readonly gameViewEventManagerService: GameViewEventManagerService,\n        private readonly actionService: ActionService,\n    ) {\n        super();\n        this.tiles = [];\n        this.selectedTiles = [];\n        this.selectionType = TileRackSelectType.Exchange;\n        this.tileFontSize = RACK_TILE_DEFAULT_FONT_SIZE;\n        this.isShuffling = false;\n        this.componentDestroyed$ = new Subject();\n    }\n\n    ngOnInit(): void {\n        this.subscribeToFocusableEvents();\n        this.updateTileRack(this.gameService.getLocalPlayerId());\n        this.gameViewEventManagerService.subscribeToGameViewEvent('tileRackUpdate', this.componentDestroyed$, (playerId: string) =>\n            this.updateTileRack(playerId),\n        );\n        this.gameViewEventManagerService.subscribeToGameViewEvent('usedTiles', this.componentDestroyed$, (payload) => this.handleUsedTiles(payload));\n        this.gameViewEventManagerService.subscribeToGameViewEvent('resetUsedTiles', this.componentDestroyed$, () => this.resetUsedTiles());\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribeToFocusableEvents();\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    selectTileToExchange(tile: RackTile): boolean {\n        return this.selectTile(TileRackSelectType.Exchange, tile);\n    }\n\n    selectTileToMove(tile: RackTile): boolean {\n        return this.selectTile(TileRackSelectType.Move, tile);\n    }\n\n    unselectAll(): void {\n        this.selectedTiles.forEach((rackTile: RackTile) => (rackTile.isSelected = false));\n        this.selectedTiles = [];\n    }\n\n    focus(): void {\n        this.focusableComponentService.setActiveKeyboardComponent(this);\n    }\n\n    canExchangeTiles(): boolean {\n        return (\n            this.selectionType === TileRackSelectType.Exchange &&\n            this.selectedTiles.length > 0 &&\n            this.gameService.isLocalPlayerPlaying() &&\n            this.gameService.getTotalNumberOfTilesLeft() >= MAX_TILES_PER_PLAYER &&\n            !this.actionService.hasActionBeenPlayed\n        );\n    }\n\n    exchangeTiles(): void {\n        if (!this.canExchangeTiles()) return;\n\n        this.actionService.sendAction(\n            this.gameService.getGameId(),\n            this.gameService.getLocalPlayerId(),\n            this.actionService.createActionData(ActionType.EXCHANGE, this.actionService.createExchangeActionPayload(this.selectedTiles)),\n        );\n        this.selectedTiles.forEach((tile) => (tile.isUsed = true));\n        this.unselectAll();\n    }\n\n    onScroll(event: WheelEvent): void {\n        this.moveSelectedTile(event.deltaY);\n    }\n\n    async shuffleTiles(): Promise<void> {\n        this.isShuffling = true;\n        await Delay.for(SHUFFLE_ANIMATION_DELAY);\n        this.tiles = Random.randomize(this.tiles);\n        await Delay.for(1);\n        this.isShuffling = false;\n    }\n\n    protected onLoseFocusEvent(): void {\n        this.unselectAll();\n    }\n\n    protected onFocusableEvent(event: KeyboardEvent): void {\n        switch (event.key) {\n            case ESCAPE:\n                this.unselectAll();\n                break;\n            case ARROW_LEFT:\n                this.moveSelectedTile(Direction.Left);\n                break;\n            case ARROW_RIGHT:\n                this.moveSelectedTile(Direction.Right);\n                break;\n            default:\n                this.selectTileFromKey(event.key);\n        }\n    }\n\n    private selectTile(selectType: TileRackSelectType, tile: RackTile): boolean {\n        this.focus();\n\n        if (this.selectionType === selectType && tile.isSelected) {\n            this.unselectTile(tile);\n            return false;\n        }\n\n        if (this.selectionType !== selectType || selectType === TileRackSelectType.Move) {\n            this.selectionType = selectType;\n            this.unselectAll();\n        }\n\n        tile.isSelected = true;\n        this.selectedTiles.push(tile);\n\n        return false; // return false so the browser doesn't show the context menu\n    }\n\n    private unselectTile(tile: RackTile): void {\n        tile.isSelected = false;\n        const index = this.selectedTiles.indexOf(tile);\n        if (index >= 0) {\n            this.selectedTiles.splice(index, 1);\n        }\n    }\n\n    private selectTileFromKey(key: string): void {\n        const tiles = this.tiles.filter((tile) => tile.letter.toLowerCase() === key.toLowerCase());\n\n        if (tiles.length === 0) return this.unselectAll();\n\n        pipe(this.getSelectedTileIndex, nextIndex(tiles.length), (index) => tiles[index], this.selectTileToMove.bind(this))(tiles);\n    }\n\n    private moveSelectedTile(direction: Direction | number): void {\n        if (this.selectionType !== TileRackSelectType.Move) return;\n        if (this.selectedTiles.length === 0) return;\n\n        const tile = this.selectedTiles[0];\n        const index = this.tiles.indexOf(tile);\n\n        let newIndex = (index + direction) % this.tiles.length;\n        if (newIndex < 0) newIndex += this.tiles.length;\n\n        this.tiles.splice(index, 1);\n        this.tiles.splice(newIndex, 0, tile);\n    }\n\n    private updateTileRack(playerId?: string): void {\n        const player = this.gameService.getLocalPlayer();\n        if (!player) return;\n        if (playerId !== this.gameService.getLocalPlayerId()) return;\n\n        const previousTiles: RackTile[] = [...this.tiles];\n        const newTiles: Tile[] = [...player.getTiles()];\n        this.tiles = preserveArrayOrder(newTiles, previousTiles, (elem1: Tile, elem2: RackTile) => elem1.letter === elem2.letter).map(\n            (tile: Tile, index: number) => this.createRackTile(tile, this.tiles[index]),\n        );\n    }\n\n    private createRackTile(tile: Tile, rackTile: RackTile): RackTile {\n        return { ...tile, isUsed: false, isSelected: rackTile && rackTile.isSelected };\n    }\n\n    private handleUsedTiles(usedTilesPayload: PlaceActionPayload | undefined): void {\n        if (!usedTilesPayload) return;\n\n        const usedTiles = [...usedTilesPayload.tiles];\n        for (const tile of this.tiles) {\n            const index = usedTiles.findIndex((usedTile) => usedTile.letter === tile.letter);\n            tile.isUsed = index >= 0;\n            if (index >= 0) usedTiles.splice(index, 1);\n        }\n    }\n\n    private resetUsedTiles(): void {\n        this.tiles.forEach((tile) => (tile.isUsed = false));\n    }\n\n    private getSelectedTileIndex(tiles: RackTile[]): number {\n        return tiles.findIndex((tile) => tile.isSelected);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/animations.scss';@import '../../style/icon.scss';$tile-size: 50px;$animation-duration: 0.25s;#rack-grid mat-card #rack-card-container {display: flex;justify-content: center;align-items: center;border: solid 2px rgb(207, 207, 207);border-radius: 8px;padding: 6px;gap: 12px;transition: ease-in-out gap $animation-duration;.rack-tile-container {width: $tile-size;position: relative;transition: ease-in-out transform 0.1s, ease-in-out width $animation-duration;app-tile {display: block;height: $tile-size;width: $tile-size;position: relative;}&:hover {z-index: 1;transform: translateY(-15%) scale(1.05);transition: ease-in-out transform 0.1s;}&.hidden {display: none !important;visibility: hidden !important;}}&.selection-exchange .rack-tile-container.selected app-tile {animation: wiggle 0.25s infinite;filter: hue-rotate(50deg);}&.selection-move .rack-tile-container.selected {z-index: 2;app-tile {transform: translateY(-20%);filter: hue-rotate(175deg);animation: orbit linear 1s infinite;z-index: 2;&:hover {z-index: 2;}&:after,&:before {content: '';position: absolute;font-size: 1.2em;color: rgb(218, 183, 126);text-shadow: 0px 1px 6px rgba(0, 0, 0, 0.15);top: 50%;z-index: 3;}&:before {content: \"◀\";left: 0;transform: translate(-100%, -50%);margin-left: -6px;}&:after {content: \"►\";right: 0;transform: translate(100%, -50%);margin-right: -6px;}}}}",
                    "styleUrl": "./tile-rack.component.scss"
                },
                {
                    "data": "$animation-duration: 0.25s;#rack-grid mat-card {display: grid;grid-template-columns: 1fr 120px;gap: 18px;align-self: center;padding: 12px 16px;#rack-button-container {display: flex;flex-direction: column;justify-content: space-around;&>button,&>div {font-size: 0.95em;&:not(:last-child) {margin-bottom: 6px;}&>button {width: 100%;}}}#rack-card-container {position: relative;.shuffle-button {position: absolute;top: -8px;right: -8px;height: 22px;width: 22px;min-width: 0;border-radius: 15px;display: flex;justify-content: center;align-items: center;padding: 0;font-size: 0.7em;}&.is-shuffling {gap: 0px;transition: ease-in-out gap $animation-duration;.rack-tile-container {width: 0px;transition: ease-in-out width $animation-duration;}}}}",
                    "styleUrl": "./tile-rack-2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "focusableComponentService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "gameService",
                        "type": "GameService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "focusableComponentService",
                        "type": "FocusableComponentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameViewEventManagerService",
                        "type": "GameViewEventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionService",
                        "type": "ActionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FocusableComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"rack-grid\" (click)=\"focus()\">\n    <mat-card>\n        <div id=\"rack-card-container\" [class]=\"'selection-' + selectionType\" [ngClass]=\"{'is-shuffling': isShuffling}\" (wheel)=\"onScroll($event)\">\n            <div class=\"rack-tile-container\" \n                *ngFor=\"let tile of tiles\" [ngClass]=\"{ selected: tile.isSelected, hidden: tile.isUsed }\"\n                (click)=\"selectTileToMove(tile)\"\n                (contextmenu)=\"selectTileToExchange(tile)\"\n            >\n                <app-tile [tile]=\"tile\" [ngStyle]=\"{'fontSize': tileFontSize+'em'}\" class=\"rack-tile\">\n                    {{ tile.letter }}\n                </app-tile>\n            </div>\n\n            <button mat-raised-button color=\"primary\" class=\"shuffle-button\" (click)=\"shuffleTiles()\"><app-icon icon=\"random\"></app-icon></button>\n        </div>\n        <div id=\"rack-button-container\" class=\"rack-card\">\n            <div matTooltip=\"Assurez vous d'avoir des tuiles sélectionnées et que ce soit votre tour\" matTooltipPosition=\"above\" [matTooltipDisabled]=\"canExchangeTiles()\">\n                <button mat-raised-button class=\"btn-rack\" color=\"primary\" [disabled]=\"!canExchangeTiles()\" (click)=\"exchangeTiles()\">\n                    <app-icon icon=\"exchange\"></app-icon> Échanger\n                </button>\n            </div>\n            <div matTooltip=\"Aucune tuile sélectionnée\" matTooltipPosition=\"above\" matTooltipDisabled=\"selectedTiles.length === 0\">\n                <button mat-raised-button class=\"btn-rack\" color=\"primary\" [disabled]=\"selectedTiles.length === 0\" (click)=\"unselectAll()\">\n                    <app-icon icon=\"undo\"></app-icon> Annuler\n                </button>\n            </div>\n        </div>\n    </mat-card>\n</div>\n"
        },
        {
            "name": "TimerSelectionComponent",
            "id": "component-TimerSelectionComponent-9654fe0b9c84cad3b9f92c818b8f2a9513073bc8bf5795af9bf90cf8ecbb9ec3bd67ff3f801e8bc0e845e78f9c2a2fbffd8322ca0b6c82714b95ff434ddc942b",
            "file": "src/app/components/timer-selection/timer-selection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timer-selection",
            "styleUrls": [
                "./timer-selection.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timer-selection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "parentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "timerValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTimerValue",
                    "args": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "delta",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrementTimerValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "incrementTimerValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DEFAULT_TIMER_VALUE, MAXIMUM_TIMER_VALUE, MINIMUM_TIMER_VALUE, TIMER_VALUE_INCREMENTS } from '@app/constants/pages-constants';\n\n@Component({\n    selector: 'app-timer-selection',\n    templateUrl: './timer-selection.component.html',\n    styleUrls: ['./timer-selection.component.scss'],\n})\nexport class TimerSelectionComponent implements OnInit {\n    @Input() parentForm: FormGroup;\n    timerValue: number;\n\n    ngOnInit(): void {\n        this.timerValue = this.parentForm.get('timer')?.value || DEFAULT_TIMER_VALUE;\n    }\n\n    incrementTimerValue(): void {\n        this.changeTimerValue(TIMER_VALUE_INCREMENTS);\n    }\n\n    decrementTimerValue(): void {\n        this.changeTimerValue(-TIMER_VALUE_INCREMENTS);\n    }\n\n    private changeTimerValue(delta: number): void {\n        this.timerValue = Math.min(MAXIMUM_TIMER_VALUE, Math.max(MINIMUM_TIMER_VALUE, this.timerValue + delta));\n        this.parentForm.patchValue({\n            timer: this.timerValue,\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n#timer-selection-container {\n    display: grid;\n    grid-template-columns: 1fr minmax(auto, 45%);\n    gap: 12px;\n\n    #timer-selection-button-container {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 12px;\n        height: 51px;\n        margin-top: 3px;\n        \n        button {\n            font-size: 1.2em;\n            border: solid 1px rgba($primary, 0.1);\n            background-color: rgba($primary, 0.15);\n\n            &:hover {\n                border: solid 2px black;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./timer-selection.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"timer-selection-container\">\n    <mat-form-field appearance=\"outline\" matTooltip=\"Utilisez les boutons +/- pour changer le temps par tour\" matTooltipPosition=\"above\">\n        <mat-label><app-icon icon=\"hourglass-half\"></app-icon> Choisissez le temps par tour</mat-label>\n        <input matInput id=\"time-input\" type=\"text\" autocomplete=\"off\" readonly=\"true\" [value]=\"timerValue * 1000 | date: 'm:ss'\" />\n    </mat-form-field>\n    <span id=\"timer-selection-button-container\">\n        <button mat-flat-button type=\"button\" (click)=\"decrementTimerValue()\"><app-icon icon=\"minus\"></app-icon></button>\n        <button mat-flat-button type=\"button\" (click)=\"incrementTimerValue()\"><app-icon icon=\"plus\"></app-icon></button>\n    </span>\n</div>\n"
        },
        {
            "name": "UpdateVirtualPlayerComponent",
            "id": "component-UpdateVirtualPlayerComponent-b7c3576d5dbb729e2901bac073aeba9926f6f5c62f7ec7e0e1a3253391bcaca26f492004f383685da9042e5bcc1075e7fb2dada79ce3944527e789b413a6adad",
            "file": "src/app/components/update-virtual-player-dialog/update-virtual-player-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update-virtual-player-dialog",
            "styleUrls": [
                "./update-virtual-player-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./update-virtual-player-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpdateVirtualPlayerDialogParameters",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isVirtualPlayerNameValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "virtualPlayerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayerNameChanges",
                    "args": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "[string, boolean]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateVirtualPlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnDestroy } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { VirtualPlayerProfilesService } from '@app/services/virtual-player-profile-service/virtual-player-profile.service';\nimport { Subject } from 'rxjs';\nimport { UpdateVirtualPlayerDialogParameters } from './update-virtual-player.component.types';\n\n@Component({\n    selector: 'app-update-virtual-player-dialog',\n    templateUrl: './update-virtual-player-dialog.component.html',\n    styleUrls: ['./update-virtual-player-dialog.component.scss'],\n})\nexport class UpdateVirtualPlayerComponent implements OnDestroy {\n    isVirtualPlayerNameValid: boolean;\n    virtualPlayerName: string;\n\n    private componentDestroyed$: Subject<boolean>;\n    constructor(\n        private dialogRef: MatDialogRef<UpdateVirtualPlayerComponent>,\n        private virtualPlayerProfilesService: VirtualPlayerProfilesService,\n        @Inject(MAT_DIALOG_DATA) public data: UpdateVirtualPlayerDialogParameters,\n    ) {\n        this.componentDestroyed$ = new Subject();\n        this.isVirtualPlayerNameValid = false;\n        this.virtualPlayerName = data.name;\n    }\n\n    ngOnDestroy(): void {\n        this.componentDestroyed$.next(true);\n        this.componentDestroyed$.complete();\n    }\n\n    onPlayerNameChanges([playerName, valid]: [string, boolean]): void {\n        this.virtualPlayerName = playerName;\n        this.isVirtualPlayerNameValid = valid;\n    }\n\n    updateVirtualPlayer(): void {\n        this.virtualPlayerProfilesService.updateVirtualPlayer({\n            name: this.virtualPlayerName,\n            level: this.data.level,\n            idVirtualPlayer: this.data.idVirtualPlayer,\n        });\n        this.closeDialog();\n    }\n\n    closeDialog(): void {\n        this.dialogRef.close();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.primary {\n    color: $primary;\n}\n\n#container {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n    justify-content: space-evenly;\n    height: 80%;\n}\n\n#buttons-container {\n    text-align: right;\n}\n\n.form-field {\n    width: 80%;\n}\n\n",
                    "styleUrl": "./update-virtual-player-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UpdateVirtualPlayerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "UpdateVirtualPlayerDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UpdateVirtualPlayerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "virtualPlayerProfilesService",
                        "type": "VirtualPlayerProfilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "UpdateVirtualPlayerDialogParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Modifier un joueur virtuel</h2>\n<div id=\"container\">\n    <div>\n        <app-name-field\n        [initialPlayerName]=\"this.virtualPlayerName\"\n        [virtualPlayerName]=\"''\"\n        [mustVerifyVirtualPlayerName]=\"false\"\n        (keydown.enter)=\"$event.preventDefault()\"\n        (playerNameChange)=\"onPlayerNameChanges($event)\"\n    ></app-name-field>\n    </div>\n    <div id=\"buttons-container\">\n        <button mat-flat-button color = \"primary\" (click)=\"updateVirtualPlayer()\" [disabled]=\"!this.isVirtualPlayerNameValid\">\n            <app-icon icon=\"pencil\"></app-icon>\n            Modifier\n        </button>\n        <button mat flat button mat-button color = \"primary\" (click)=\"closeDialog()\">\n            <app-icon icon=\"ban\"></app-icon>\n            Annuler\n        </button> \n    </div>\n</div>\n    \n\n"
        },
        {
            "name": "UploadDictionaryComponent",
            "id": "component-UploadDictionaryComponent-bca488109336e70df8efe968c3f65cf90c4fae5c250a72dbfb36094644c03304f932c94f873ca73c5dd68a970e5d7b2585ff3f8c34cc970dc5314ecf6ef2f856",
            "file": "src/app/components/upload-dictionary/upload-dictionary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upload-dictionary",
            "styleUrls": [
                "upload-dictionary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "upload-dictionary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isDictionaryReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "newDictionary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionaryData",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "state",
                    "defaultValue": "UploadState.Init",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UploadState",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleFileInput",
                    "args": [
                        {
                            "name": "eventTarget",
                            "type": "EventTarget | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventTarget",
                            "type": "EventTarget | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { DictionaryData } from '@app/classes/dictionary/dictionary-data';\nimport { WRONG_FILE_TYPE } from '@app/constants/dictionaries-components';\nimport { DictionaryService } from '@app/services/dictionary-service/dictionary.service';\nimport { UploadEvent, UploadState } from './upload-dictionary.component.types';\n\n@Component({\n    selector: 'app-upload-dictionary',\n    templateUrl: 'upload-dictionary.component.html',\n    styleUrls: ['upload-dictionary.component.scss'],\n})\nexport class UploadDictionaryComponent {\n    errorMessage: string = '';\n    isDictionaryReady: boolean = false;\n    state: UploadState = UploadState.Init;\n    selectedFile: File | null;\n    newDictionary: DictionaryData;\n    constructor(private dialogRef: MatDialogRef<UploadDictionaryComponent>, private dictionariesService: DictionaryService) {}\n\n    handleFileInput(eventTarget: EventTarget | null): void {\n        if (!eventTarget) {\n            return;\n        }\n        this.selectedFile = (eventTarget as UploadEvent).files[0];\n        const fileReader = new FileReader();\n        fileReader.readAsText(this.selectedFile, 'UTF-8');\n        if (this.selectedFile.type === 'application/json') {\n            fileReader.onload = () => {\n                try {\n                    this.newDictionary = JSON.parse(fileReader.result as string) as DictionaryData;\n                    this.isDictionaryReady = true;\n                    this.errorMessage = '';\n                    this.state = UploadState.Ready;\n                } catch (error) {\n                    const newError = error as SyntaxError;\n                    this.errorMessage = newError.message;\n                    this.state = UploadState.Error;\n                }\n            };\n        } else {\n            this.errorMessage = WRONG_FILE_TYPE;\n            this.isDictionaryReady = false;\n            this.state = UploadState.Error;\n        }\n    }\n\n    onUpload(): void {\n        this.dictionariesService.uploadDictionary(this.newDictionary);\n        this.dialogRef.close();\n    }\n\n    closeDialog(): void {\n        this.dialogRef.close();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../style/variables.scss';\n\n.primary {\n    color: $primary;\n}\n\n.secondary {\n    opacity: 0.45;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n}\n\n.input-container {\n    display: flex;\n    flex-direction: row;\n    height: 20px;\n}\n\n.buttons-container {\n    text-align: right;\n}\n\n.select-button {\n    display: flex;\n    width: 45%;\n}\n\n.column-1 {\n    display: flex;\n    width: 20%;\n}\n.column-2 {\n    display: flex;\n    width: 80%;\n}\n\n.feedback-box-1 {\n    display: flex;\n    margin-left: 5px;\n}\n\n.error {\nborder-radius: 4px;\nborder: 2px solid tomato;\npadding: 5px\n}\n\n.ready {\nborder-radius: 4px;\nborder: 2px solid $primary;\npadding: 5px;\n}\n\n.init {\nborder: none;\n}",
                    "styleUrl": "upload-dictionary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UploadDictionaryComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<UploadDictionaryComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dictionariesService",
                        "type": "DictionaryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\n<div class=\"container\">\n  <h2 mat-dialog-title>Ajouter un dictionnaire</h2>\n  <div class=\"input-container\">\n    <div>\n      <input\n      style=\"display: none\"\n      type=\"file\" (change)=\"handleFileInput($event.target)\"\n      accept=\".json\"\n      #fileInput>\n        <button mat-button id=\"select-button\" color=\"primary\" (click)=\"fileInput.click()\" style=\"width: 200px\">\n          <app-icon icon=\"file\"></app-icon>\n          Sélectionner un fichier\n        </button>\n      </div>\n      <div [className]=\"state\" *ngIf=\"selectedFile\" style=\"margin-left: auto; display: inline-table\">\n        <app-icon color=\"primary\" icon=\"file\"></app-icon>\n        {{this.selectedFile.name}}\n      </div>\n  </div>\n  <div [className]=\"state\">\n    <div class=\"feedback\">\n        <div class=\"feedback-box-1\">\n          <div class=\"column-1\">\n            <div *ngIf=\"isDictionaryReady\">\n              <span> Nom: </span>\n            </div>\n            <div *ngIf=\"state==='error'\">\n              Erreur: \n            </div>\n          </div>\n          <div class=\"column-2\">\n            <div *ngIf=\"state==='error'\">\n              {{this.errorMessage}}\n            </div>\n            <div *ngIf=\"isDictionaryReady\">\n              {{this.newDictionary.title}}\n            </div>\n          </div>\n        </div>\n    </div>\n    <div class=\"feedback\">\n      <div class=\"feedback-box-1\">\n        <div class=\"column-1\">\n          <div *ngIf=\"isDictionaryReady\">\n            <span> Description: </span>\n          </div>\n        </div>\n        <div class=\"column-2\">\n          <div *ngIf=\"isDictionaryReady\">\n            {{this.newDictionary.description}}\n          </div>\n        </div>\n      </div>\n    </div> \n  </div>\n  <div class=\"buttons-container\"> \n    <button mat-flat-button color=\"primary\" (click)=\"onUpload()\" [disabled]=\"!isDictionaryReady\">\n      <app-icon icon=\"upload\"></app-icon>\n      Ajouter\n    </button>\n    <button mat-button color=\"primary\" (click)=\"closeDialog()\">\n      <app-icon icon=\"ban\"></app-icon>\n      Annuler\n    </button>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppMaterialModule",
            "id": "module-AppMaterialModule-d7bb73f813c6d51971078d0f2c729606cf6a043e9ffed4491aed61e67f0ffbcdaf3d0918f982757a080ad5c71f62a771aea61d0b6eca815e0693ccbe45e4e5e1",
            "description": "<p>Material module\nIMPORTANT : IMPORT ONLY USED MODULES !!!!!!</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n// import { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\n// import { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\n// import { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\n// import { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\n// import { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n// import { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nconst modules = [\n    // MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    // MatCheckboxModule,\n    // MatCheckboxModule,\n    MatChipsModule,\n    // MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    // MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatSelectModule,\n    // MatSidenavModule,\n    // MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatDividerModule,\n];\n\n/**\n * Material module\n * IMPORTANT : IMPORT ONLY USED MODULES !!!!!!\n */\n@NgModule({\n    imports: [...modules],\n    exports: [...modules],\n    providers: [],\n})\nexport class AppMaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-b3bdc0492fd00114f98ba9e0a73d6f8f17e950869f236cb9f29a903c64039a837dad504d05aa4a42c81cac5e425d39ea6310498f1fb03aacdc5537fb142bd14b",
            "description": "<p>Main module that is used in main.ts.\nAll automatically generated components will appear in this module.\nPlease do not move this module in the module folder.\nOtherwise Angular Cli will not know in which module to put new component</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { registerLocaleData } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport localeFr from '@angular/common/locales/fr';\nimport { APP_INITIALIZER, LOCALE_ID, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BoardComponent } from '@app/components/board/board.component';\nimport { SquareComponent } from '@app/components/square/square.component';\nimport { TileRackComponent } from '@app/components/tile-rack/tile-rack.component';\nimport { TileComponent } from '@app/components/tile/tile.component';\nimport { AppRoutingModule } from '@app/modules/app-routing.module';\nimport { AppMaterialModule } from '@app/modules/material.module';\nimport { AppComponent } from '@app/pages/app/app.component';\nimport { CreateWaitingPageComponent } from '@app/pages/create-waiting-page/create-waiting-page.component';\nimport { GamePageComponent } from '@app/pages/game-page/game-page.component';\nimport { HomePageComponent } from '@app/pages/home-page/home-page.component';\nimport { JoinWaitingPageComponent } from '@app/pages/join-waiting-page/join-waiting-page.component';\nimport { AdminDictionariesComponent } from './components/admin-dictionaries-component/admin-dictionaries.component';\nimport { AdminGameHistoryComponent } from './components/admin-game-history/admin-game-history.component';\nimport { AdminHighScoresComponent } from './components/admin-high-scores/admin-high-scores.component';\nimport { AdminVirtualPlayersComponent } from './components/admin-virtual-players/admin-virtual-players.component';\nimport { ChatBoxComponent } from './components/chatbox/chatbox.component';\nimport { CommunicationBoxComponent } from './components/communication-box/communication-box.component';\nimport { ConvertDialogComponent } from './components/convert-dialog/convert-dialog.component';\nimport { CreateVirtualPlayerComponent } from './components/create-virtual-player-dialog/create-virtual-player-dialog.component';\nimport { DefaultDialogComponent } from './components/default-dialog/default-dialog.component';\nimport { DeleteDictionaryDialogComponent } from './components/delete-dictionary-dialog/delete-dictionary-dialog.component';\nimport { DeleteVirtualPlayerDialogComponent } from './components/delete-virtual-player-dialog/delete-virtual-player-dialog.component';\nimport { HighScoreBoxComponent } from './components/high-score-box/high-score-box.component';\nimport { IconComponent } from './components/icon/icon.component';\nimport { InformationBoxComponent } from './components/information-box/information-box.component';\nimport { LobbyInfoComponent } from './components/lobby-info/lobby-info.component';\nimport { ModifyDictionaryComponent } from './components/modify-dictionary-dialog/modify-dictionary-dialog.component';\nimport { NameFieldComponent } from './components/name-field/name-field.component';\nimport { ObjectiveBoxComponent } from './components/objective-box/objective-box.component';\nimport { ObjectiveComponent } from './components/objective/objective.component';\nimport { PageHeaderComponent } from './components/page-header/page-header.component';\nimport { TimerSelectionComponent } from './components/timer-selection/timer-selection.component';\nimport { UpdateVirtualPlayerComponent } from './components/update-virtual-player-dialog/update-virtual-player-dialog.component';\nimport { UploadDictionaryComponent } from './components/upload-dictionary/upload-dictionary.component';\nimport { AdminPageComponent } from './pages/admin-page/admin-page.component';\nimport { GameCreationPageComponent } from './pages/game-creation-page/game-creation-page.component';\nimport { HighScoresPageComponent } from './pages/high-scores-page/high-scores-page.component';\nimport { LoadingPageComponent } from './pages/loading-page/loading-page.component';\nimport { LobbyPageComponent } from './pages/lobby-page/lobby-page.component';\nimport { DurationPipe } from './pipes/duration/duration.pipe';\nimport { InitializerService } from './services/initializer-service/initializer.service';\nimport { ChatboxContainerComponent } from './components/chatbox-container/chatbox-container.component';\nimport { ChatboxMessageComponent } from './components/chatbox-message/chatbox-message.component';\nimport { IconButtonComponent } from './components/icon-button/icon-button.component';\n\nregisterLocaleData(localeFr);\n\n/**\n * Main module that is used in main.ts.\n * All automatically generated components will appear in this module.\n * Please do not move this module in the module folder.\n * Otherwise Angular Cli will not know in which module to put new component\n */\n@NgModule({\n    declarations: [\n        AppComponent,\n        GamePageComponent,\n        HomePageComponent,\n        SquareComponent,\n        TileComponent,\n        InformationBoxComponent,\n        CommunicationBoxComponent,\n        BoardComponent,\n        TileRackComponent,\n        LobbyPageComponent,\n        LobbyInfoComponent,\n        CreateWaitingPageComponent,\n        JoinWaitingPageComponent,\n        GameCreationPageComponent,\n        DefaultDialogComponent,\n        IconComponent,\n        NameFieldComponent,\n        TimerSelectionComponent,\n        PageHeaderComponent,\n        HighScoresPageComponent,\n        HighScoreBoxComponent,\n        ConvertDialogComponent,\n        AdminPageComponent,\n        AdminVirtualPlayersComponent,\n        CreateVirtualPlayerComponent,\n        UpdateVirtualPlayerComponent,\n        DeleteVirtualPlayerDialogComponent,\n        AdminDictionariesComponent,\n        ModifyDictionaryComponent,\n        UploadDictionaryComponent,\n        DeleteDictionaryDialogComponent,\n        AdminHighScoresComponent,\n        AdminGameHistoryComponent,\n        DurationPipe,\n        ObjectiveComponent,\n        ObjectiveBoxComponent,\n        LoadingPageComponent,\n        ChatBoxComponent,\n        ChatboxContainerComponent,\n        ChatboxMessageComponent,\n        IconButtonComponent,\n    ],\n    imports: [\n        AppMaterialModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        ScrollingModule,\n    ],\n    providers: [\n        InitializerService,\n        {\n            provide: APP_INITIALIZER,\n            useFactory: (initializer: InitializerService) => () => initializer.initialize(),\n            deps: [InitializerService],\n            multi: true,\n        },\n        {\n            provide: LOCALE_ID,\n            useValue: 'fr-CA',\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "InitializerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminDictionariesComponent"
                        },
                        {
                            "name": "AdminGameHistoryComponent"
                        },
                        {
                            "name": "AdminHighScoresComponent"
                        },
                        {
                            "name": "AdminPageComponent"
                        },
                        {
                            "name": "AdminVirtualPlayersComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "ChatBoxComponent"
                        },
                        {
                            "name": "ChatboxContainerComponent"
                        },
                        {
                            "name": "ChatboxMessageComponent"
                        },
                        {
                            "name": "CommunicationBoxComponent"
                        },
                        {
                            "name": "ConvertDialogComponent"
                        },
                        {
                            "name": "CreateVirtualPlayerComponent"
                        },
                        {
                            "name": "CreateWaitingPageComponent"
                        },
                        {
                            "name": "DefaultDialogComponent"
                        },
                        {
                            "name": "DeleteDictionaryDialogComponent"
                        },
                        {
                            "name": "DeleteVirtualPlayerDialogComponent"
                        },
                        {
                            "name": "DurationPipe"
                        },
                        {
                            "name": "GameCreationPageComponent"
                        },
                        {
                            "name": "GamePageComponent"
                        },
                        {
                            "name": "HighScoreBoxComponent"
                        },
                        {
                            "name": "HighScoresPageComponent"
                        },
                        {
                            "name": "HomePageComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InformationBoxComponent"
                        },
                        {
                            "name": "JoinWaitingPageComponent"
                        },
                        {
                            "name": "LoadingPageComponent"
                        },
                        {
                            "name": "LobbyInfoComponent"
                        },
                        {
                            "name": "LobbyPageComponent"
                        },
                        {
                            "name": "ModifyDictionaryComponent"
                        },
                        {
                            "name": "NameFieldComponent"
                        },
                        {
                            "name": "ObjectiveBoxComponent"
                        },
                        {
                            "name": "ObjectiveComponent"
                        },
                        {
                            "name": "PageHeaderComponent"
                        },
                        {
                            "name": "SquareComponent"
                        },
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileRackComponent"
                        },
                        {
                            "name": "TimerSelectionComponent"
                        },
                        {
                            "name": "UpdateVirtualPlayerComponent"
                        },
                        {
                            "name": "UploadDictionaryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppMaterialModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b79d5ef86f02c8ce3aad04cb6cc092cd78173082222bf8b3a5b97966130d0b2da103aec7bd2c80e45d6665de7787660e0f6bda90613b9325e80ca7225df48a83",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminPageComponent } from '@app/pages/admin-page/admin-page.component';\nimport { CreateWaitingPageComponent } from '@app/pages/create-waiting-page/create-waiting-page.component';\nimport { GameCreationPageComponent } from '@app/pages/game-creation-page/game-creation-page.component';\nimport { GamePageComponent } from '@app/pages/game-page/game-page.component';\nimport { HighScoresPageComponent } from '@app/pages/high-scores-page/high-scores-page.component';\nimport { HomePageComponent } from '@app/pages/home-page/home-page.component';\nimport { JoinWaitingPageComponent } from '@app/pages/join-waiting-page/join-waiting-page.component';\nimport { LobbyPageComponent } from '@app/pages/lobby-page/lobby-page.component';\n\nconst routes: Routes = [\n    { path: '', redirectTo: '/home', pathMatch: 'full' },\n    { path: 'home', component: HomePageComponent },\n    { path: 'game', component: GamePageComponent },\n    { path: 'game-creation', component: GameCreationPageComponent },\n    { path: 'lobby', component: LobbyPageComponent },\n    { path: 'waiting-room', component: CreateWaitingPageComponent },\n    { path: 'join-waiting-room', component: JoinWaitingPageComponent },\n    { path: 'high-scores', component: HighScoresPageComponent },\n    { path: 'admin', component: AdminPageComponent },\n    { path: '**', redirectTo: '/home' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ACTION_COMMAND_INDICATOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/actions/action-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'!'"
            },
            {
                "name": "ACTIVE_PLAYER_NOT_FOUND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Aucun joueur actif trouvé'"
            },
            {
                "name": "ADMIN_RESET_DICTIONARY_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Voulez-vous réinitialiser les dictionnaires?'"
            },
            {
                "name": "ADMIN_RESET_HIGH_SCORE_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Voulez-vous réinitialiser les meilleurs scores?'"
            },
            {
                "name": "ADMIN_RESET_HISTORY_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Voulez-vous réinitialiser l'historique de partie?\""
            },
            {
                "name": "ADMIN_RESET_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Cette opération est irréversible.'"
            },
            {
                "name": "ADMIN_RESET_VIRTUAL_PLAYER_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Voulez-vous réinitialiser les joueurs virtuels?'"
            },
            {
                "name": "AMOUNT_OF_TILE_BACKGROUND_IMAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/tile/tile.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "4"
            },
            {
                "name": "ARROW_LEFT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ArrowLeft'"
            },
            {
                "name": "ARROW_RIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ArrowRight'"
            },
            {
                "name": "ASCENDING_COLUMN_SORTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'asc'"
            },
            {
                "name": "ASCII_VALUE_OF_LOWERCASE_A",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/input-parser-service/input-parser.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "97"
            },
            {
                "name": "BACKSPACE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Backspace'"
            },
            {
                "name": "BAD_SYNTAX_MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/command-exception-messages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<ActionType, string>([\n    [ActionType.PLACE, 'La commande placer doit suivre le format _!placer ‹position› ‹lettres›_.'],\n    [ActionType.EXCHANGE, 'La commande échanger doit suivre le format _!échanger ‹lettres›_.'],\n    [ActionType.PASS, 'La commande passer doit suivre le format _!passer_.'],\n    [ActionType.HELP, 'La commande passer doit suivre le format _!aide_.'],\n    [ActionType.HINT, 'La commande passer doit suivre le format _!indice_.'],\n    [ActionType.RESERVE, 'La commande passer doit suivre le format _!réserve_.'],\n])"
            },
            {
                "name": "BLANK_TILE_LETTER_VALUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LetterValue",
                "defaultValue": "'*'"
            },
            {
                "name": "BOARD_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "15"
            },
            {
                "name": "BUTTON_MUST_HAVE_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Les boutons du DefaultDialog doivent avoir un contenu'"
            },
            {
                "name": "CANCEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Annuler'"
            },
            {
                "name": "CANCEL_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IconName",
                "defaultValue": "'ban'"
            },
            {
                "name": "CANNOT_REMOVE_UNUSED_TILE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Impossible de retirer une tuile qui n'est pas utilisée\""
            },
            {
                "name": "CODE_HTML_TAG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'CODE'"
            },
            {
                "name": "COLUMN_INDEX_ADJUSTMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/action-payload-to-string/action-payload-to-string.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CREATE_VIRTUAL_PLAYER_DIALOG_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dialogs-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'315px'"
            },
            {
                "name": "CREATE_VIRTUAL_PLAYER_DIALOG_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dialogs-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'450px'"
            },
            {
                "name": "DB_CONNECTED_ENDPOINT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`${environment.serverUrl}/database/is-connected`"
            },
            {
                "name": "DEFAULT_ADMIN_TAB",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/admin-page/admin-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AdminTabs.GameHistory"
            },
            {
                "name": "DEFAULT_DICTIONARIES_COLUMNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DisplayDictionaryKeys[]",
                "defaultValue": "['title', 'description', 'actions']"
            },
            {
                "name": "DEFAULT_GAME_HISTORY_COLUMNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DisplayGameHistoryKeys[]",
                "defaultValue": "[\n    'startDate',\n    'startTime',\n    'duration',\n    'hasBeenAbandoned',\n    'gameType',\n    'gameMode',\n    'player1Name',\n    'player1Score',\n    'player2Name',\n    'player2Score',\n]"
            },
            {
                "name": "DEFAULT_GAME_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controller-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'42069'"
            },
            {
                "name": "DEFAULT_HIGH_SCORE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SingleHighScore",
                "defaultValue": "{ name: 'player1', gameType: GameType.Classic, score: 0 }"
            },
            {
                "name": "DEFAULT_LEAVER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controller-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'PatLePerdant'"
            },
            {
                "name": "DEFAULT_LOBBY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    lobbyId: '',\n    hostName: 'host',\n    gameType: GameType.Classic,\n    gameMode: GameMode.Multiplayer,\n    maxRoundTime: 60,\n    dictionary: {\n        title: 'Français',\n        description: '',\n        id: '',\n        isDefault: true,\n    },\n}"
            },
            {
                "name": "DEFAULT_OPPONENT_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controller-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'steve'"
            },
            {
                "name": "DEFAULT_ORIENTATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Orientation.Horizontal"
            },
            {
                "name": "DEFAULT_PLAYER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Player(DEFAULT_PLAYER_ID, 'name', [])"
            },
            {
                "name": "DEFAULT_PLAYER_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'id'"
            },
            {
                "name": "DEFAULT_SOCKET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controller-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'IDa'"
            },
            {
                "name": "DEFAULT_SQUARE_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "COLORS.Beige"
            },
            {
                "name": "DEFAULT_SQUARE_VIEW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new SquareView(UNDEFINED_SQUARE, SQUARE_SIZE)"
            },
            {
                "name": "DEFAULT_STATE_VALUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "InitializeState",
                "defaultValue": "InitializeState.Loading"
            },
            {
                "name": "DEFAULT_TIMER_VALUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "DELETE_COMPONENT_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionaries-components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Supprimer un dictionnaire'"
            },
            {
                "name": "DIALOG_ABANDON_BUTTON_CONFIRM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Abandonner la partie'"
            },
            {
                "name": "DIALOG_ABANDON_BUTTON_CONTINUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Continuer la partie'"
            },
            {
                "name": "DIALOG_ABANDON_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Voulez-vous vraiment ABANDONNER?'"
            },
            {
                "name": "DIALOG_ABANDON_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Abandonner la partie'"
            },
            {
                "name": "DIALOG_BUTTON_CONTENT_REJECTED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Retourner en attente.'"
            },
            {
                "name": "DIALOG_BUTTON_CONTENT_RETURN_LOBBY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Retourner à la sélection de parties.'"
            },
            {
                "name": "DIALOG_BUTTONS_MUST_BE_AN_ARRAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Les boutons du DefaultDialog doivent être un tableau'"
            },
            {
                "name": "DIALOG_CANCEL_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' a annulé la partie.'"
            },
            {
                "name": "DIALOG_CANCEL_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Partie annulée'"
            },
            {
                "name": "DIALOG_CANCELED_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'La partie a été annulée'"
            },
            {
                "name": "DIALOG_CANCELED_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Partie annulée'"
            },
            {
                "name": "DIALOG_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\" a quitté le salon. Veuillez patientez le temps qu'un autre joueur veuille vous affronter.\""
            },
            {
                "name": "DIALOG_END_OF_GAME_CLOSE_BUTTON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Rester sur cette page'"
            },
            {
                "name": "DIALOG_END_OF_GAME_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(isLocalPlayerWinner: boolean) =>\n    isLocalPlayerWinner ? 'Bravo pour votre victoire!' : 'Meilleure chance la prochaine fois!'"
            },
            {
                "name": "DIALOG_END_OF_GAME_EXIT_BUTTON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Retourner à l'acceuil\""
            },
            {
                "name": "DIALOG_END_OF_GAME_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(isLocalPlayerWinner: boolean) => `Fin de la partie - ${isLocalPlayerWinner ? 'Victoire' : 'Défaite'}`"
            },
            {
                "name": "DIALOG_FULL_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'La partie est déjà remplie'"
            },
            {
                "name": "DIALOG_FULL_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Partie Remplie'"
            },
            {
                "name": "DIALOG_MUST_HAVE_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Le DefaultDialog doit avoir un titre de type string'"
            },
            {
                "name": "DIALOG_NO_ACTIVE_GAME_BUTTON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Retour à la page d'accueil\""
            },
            {
                "name": "DIALOG_NO_ACTIVE_GAME_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Vous n'avez aucune partie en cours. Veuillez en joindre ou en créer une.\""
            },
            {
                "name": "DIALOG_NO_ACTIVE_GAME_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Aucune partie en cours'"
            },
            {
                "name": "DIALOG_QUIT_BUTTON_CONFIRM",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Quitter la partie'"
            },
            {
                "name": "DIALOG_QUIT_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Voulez-vous vraiment quitter la partie?'"
            },
            {
                "name": "DIALOG_QUIT_STAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Rester dans la partie'"
            },
            {
                "name": "DIALOG_QUIT_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Quitter la partie'"
            },
            {
                "name": "DIALOG_REJECT_CONTENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' vous a rejeté de la partie.'"
            },
            {
                "name": "DIALOG_REJECT_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Rejeté'"
            },
            {
                "name": "DIALOG_TITLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Attention!'"
            },
            {
                "name": "DICTIONARIES_COLUMNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    title: 'Nom',\n    description: 'Description',\n    actions: '',\n}"
            },
            {
                "name": "DICTIONARY_DELETED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Le dictionnaire choisi n'est plus disponible, veuillez en choisir un autre.\""
            },
            {
                "name": "DICTIONARY_DESCRIPTION_VALIDATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    minLength: MIN_DESCRIPTION_LENGTH,\n    maxLength: MAX_DESCRIPTION_LENGTH,\n    rule: VALIDATION_RULE,\n}"
            },
            {
                "name": "DICTIONARY_NAME_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/session-storage-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dictionaryName'"
            },
            {
                "name": "DICTIONARY_NAME_VALIDATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    minLength: MIN_NAME_LENGTH,\n    maxLength: MAX_NAME_LENGTH,\n    rule: VALIDATION_RULE,\n}"
            },
            {
                "name": "DICTIONARY_REQUIRED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Vous devez choisir un dictionnaire pour jouer.'"
            },
            {
                "name": "DOWNLOAD_ELEMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-service-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'a'"
            },
            {
                "name": "EMOJI_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/emoji/emoji.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])+$/"
            },
            {
                "name": "empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "ENTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Enter'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false,\n    serverUrlWebsocket: 'http://localhost:3000/',\n    serverUrl: 'http://localhost:3000/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true,\n    // serverUrl: 'http://ec2-15-222-3-253.ca-central-1.compute.amazonaws.com:3000/api',\n    // serverUrlWebsocket: 'http://ec2-15-222-3-253.ca-central-1.compute.amazonaws.com:3000',\n    serverUrl: 'http://api.scrabble.cfstcyr.com/api',\n    serverUrlWebsocket: 'http://api.scrabble.cfstcyr.com',\n}"
            },
            {
                "name": "ERROR_SNACK_BAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ duration: SNACK_BAR_ERROR_DURATION, panelClass: ['error'] }"
            },
            {
                "name": "ESCAPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Escape'"
            },
            {
                "name": "EXPECTED_COMMAND_WORD_COUNT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<ActionType, number>([\n    [ActionType.PLACE, 3],\n    [ActionType.EXCHANGE, 2],\n    [ActionType.PASS, 1],\n    [ActionType.HINT, 1],\n    [ActionType.HELP, 1],\n    [ActionType.RESERVE, 1],\n])"
            },
            {
                "name": "EXPIRED_COOKIE_AGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'-99999999'"
            },
            {
                "name": "FILE_NOT_DICTIONARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionaries-components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Le fichier ne respecte pas le format {'title', 'description','words'}.\""
            },
            {
                "name": "FUN_FACTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/fun-facts-scrabble-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n    'MONOPRIX, UNIPRIX et PRISUNIC : ces noms déposés de magasins sont considérés comme des noms communs et donc acceptés au Scrabble.',\n\n    'Bien que les mots DROÏDE et CYBORG soient issus de la science-fiction, ils sont tous les deux valables au Scrabble.',\n\n    \"Le scrabble de huit lettres le plus cher est WHISKEYS placé sur deux cases « Mot compte triple » et avec le K placé sur la case \\\n    « Lettre compte double ». Placé ainsi, ce mot rapporte 482 points. Ceci s'appelle un nonuple, car le score du mot est multiplié \\\n    par trois à deux reprises, c'est-à-dire par neuf.\",\n\n    \"En 1931, le nom original de Scrabble était « Lexico ». Elle n'avait pas de plateau et se jouait uniquement avec des tuiles.\",\n\n    \"L'inventeur du Scrabble, Alfred Butts, a décidé de la fréquence et de la distribution des lettres en analysant la première \\\n    page du New York Times.\",\n\n    'Le jeu Scrabble est vendu dans 121 pays et est disponible en 31 langues différentes.',\n\n    'Au Scrabble anglophone, le joueur compétition Benjamin Woo a déjà récolté 1782 en un seul tour. Pour obtenir ces points, il \\\n    a formé le mot OXYPHENBUTAZONE dans le haut du tableau, frappant trois cases « Mot compte triple » tout en faisant sept mots \\\n    croisés vers le bas.',\n\n    \"Les jeux de Scrabble n'ont pas tous le même nombre de tuiles! La plupart des éditions possèdent 100 jetons, comme la \\\n    version anglaise originale. L'édition en français en comporte 102, et celle en arménien en compte 146!\",\n\n    \"La version portugaise du jeu Scrabble n'a pas de K, de W ni de Y, mais possède un Ç.\",\n\n    \"En 1985, deux militaires ont joué au Scrabble pendant cinq jours consécutifs pour passer le temps alors qu'ils étaient tous \\\n    les deux piégés dans une crevasse en Antarctique.\",\n\n    'Dans la version francophone, il y a 81 mots de 2 lettres acceptés : aa, ah, ai, aï, an, as, au, ay, ba, bê, bi, bu, çà, ça, ce, \\\n    ci, da, de, dé, do, du, dû, dû, eh, en, es, ès, et, eu, ex, fa, fi, go, ha, hé, hi, ho, if, il, in, je, ka, la, là, la, le, lé, li, \\\n    lu, ma, me, mi, mu, mû, na, ne, né, né, ni, nô, nu, oc, oh, om, on, or, os, ou, où, pi, pu, qi, ra, ré, ri, ru, sa, se, si, su, ta, \\\n    te, té, to, tô, tu, ud, un, us, ut, va, vé, vs, vu, wu et xi.',\n\n    'Dans la version anglophone du Scrabble, il y a seulement 2 lettres qui valent 10 points : Q et Z. Dans la version francophone, il y en a \\\n    5 : K, W, X, Y et Z.',\n\n    \"Il y a 19 tuiles portant la lettre A dans la version malaisienne du Scrabble. Cela représente près d'un cinquième du nombre total \\\n    de tuiles du jeu!\",\n\n    \"En 1993, le champion du monde anglophone Mark Nyman, du Royaume-Uni, a appris 10 000 mots de l'American Dictionary afin de \\\n    se préparer pour le tournoi à venir.\",\n\n    'Le Québécois Francis Desjardins a été couronné Champion du monde de Scrabble Classique de 2019.',\n\n    'Le champion du monde de Scrabble Classique de 2019, le Québécois Francis Desjardins, conseille de « bien apprendre les mots \\\n    de deux à cinq lettres qui sont formés avec les lettres chères, les fameux J, K, Q, W, X, Y, Z. Il n’y en a pas tant que ça \\\n    et ces mots peuvent permettre de faire beaucoup de points contre l’adversaire. » En effet, des mots comme kyu, dzo ou \\\n    qi (accepté depuis janvier 2020) peuvent rapporter beaucoup, surtout s’ils sont posés sur des cases bonus.',\n\n    \"Le Néo-Zélandais Nigel Richards a remporté plusieurs fois le championnat du monde de Scrabble francophone même s'il ne parle \\\n    pas du tout français! Le secret de sa victoire : il a mémorisé tous les mots de l’Officiel du Scrabble.\",\n\n    'Une bonne connaissance des préfixes et suffixes de la langue française n’est pas à dédaigner. Par exemple, ajouter un « pré » \\\n    en début de mot ou un « eur » à la fin d’un autre peut aider à faire des points rapidement.',\n\n    'Les suffixes verbaux sont particulièrement utiles. En ajoutant un « i », un « it », ou un « ient », on peut allonger aisément \\\n    un verbe à la troisième personne du singulier et engranger de précieux points! C’est vrai aussi pour des temps de verbe comme \\\n    l’imparfait du subjonctif ou d’autres qui ne sont pas tellement utilisés dans la vie de tous les jours, mais qui sont bien \\\n    connus par les scrabbleurs.',\n\n    \"Il est important d'essayer de garder un bon ratio voyelles/consonnes. Avoir trop de consonnes sur son chevalet rend difficile \\\n    la tâche de trouver un mot à placer. Au contraire, avoir seulement des voyelles empêche de faire beaucoup de points.\",\n\n    \"Plusieurs bruits d'animaux sont des mots acceptés au Scrabble : COINCOIN, CUICUI, GRRR, HIHAN, HOP.\",\n\n    'Votre adversaire vient de jouer un vilain coup? Exprimez vos émotions avec ces onomatopées acceptés au Scrabble francophone : \\\n    ARGH, BERK, BEURK, BIGRE, BORDEL, BOUH, CALMOS, CARAMBA, DIANTRE, HOULA, JARNICOTON.',\n\n    'Au Scrabble francophone, 44% des tuiles sont des voyelles.',\n\n    'Les 5 meilleurs mots à jouer au Scrabble francophone sont WHISKEYS, OXYDIEZ, JOCKEYS, JUKEBOX, KWANZAS.',\n]"
            },
            {
                "name": "GAME_HISTORY_COLUMNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DisplayGameHistoryColumns",
                "defaultValue": "{\n    startDate: 'Date de début',\n    startTime: 'Heure de début',\n    endDate: 'Date de fin',\n    endTime: 'Heure de fin',\n    duration: 'Durée',\n    hasBeenAbandoned: 'Partie abandonnée',\n    gameType: 'Type de partie',\n    gameMode: 'Mode de jeu',\n    player1Data: 'Joueur 1',\n    player1Name: 'Nom joueur 1',\n    player1Score: 'Pointage joueur 1',\n    player2Data: 'Joueur 2',\n    player2Name: 'Nom joueur 2',\n    player2Score: 'Pointage joueur 2',\n}"
            },
            {
                "name": "GAME_ID_COOKIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'gameId'"
            },
            {
                "name": "getRandomFact",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/fun-facts-scrabble-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n    return Random.getRandomElementsFromArray(FUN_FACTS, 1)[0];\n}"
            },
            {
                "name": "HOST_WAITING_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"En attente d'un adversaire\""
            },
            {
                "name": "HOURS_IN_DAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "24"
            },
            {
                "name": "HTTP_ABORT_ERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controllers-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "ILLEGAL_TIMER_PARAMETERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/round/timer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'The arguments passed to create the timer are not valid (minute < 0 or seconds < 0)'"
            },
            {
                "name": "INITIAL_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controller-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Omit<Message, gameId>",
                "defaultValue": "{\n    content: 'Début de la partie',\n    senderId: SYSTEM_ID,\n}"
            },
            {
                "name": "INVALID_DICTIONARY_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controllers-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"L'identificateur (ID) du dictionanaire est invalide\""
            },
            {
                "name": "INVALID_MULTIPLIER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/classes-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Le multiplicateur de score fourni ne fait pas partie des mulitplicateurs valides'"
            },
            {
                "name": "INVALID_PAYLOAD_FOR_ACTION_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Payload invalide pour ce type de commande'"
            },
            {
                "name": "INVALID_ROUND_DATA_PLAYER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Impossible de convertir le round data avec ce joueur'"
            },
            {
                "name": "INVERSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/game-history/game-histories-converter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "-1"
            },
            {
                "name": "IS_CLICKABLE_CLASS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'isClickable'"
            },
            {
                "name": "IS_NOT_BEHAVIOR_OBJECT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Le Subject n'est pas un BehaviourSubject et n'a donc pas de valeur\""
            },
            {
                "name": "isKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/isKey/is-key.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(key: PropertyKey, obj: T): key is keyof T => {\n    return key in obj;\n}"
            },
            {
                "name": "isNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/isNumber/is-number.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(char: string) => !isNaN(parseInt(char, 10))"
            },
            {
                "name": "KEEP_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "KEYDOWN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'keydown'"
            },
            {
                "name": "LETTER_MULTIPLIER_COLOR_MAP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/square/square-multiplier-to-color-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<number, COLORS>",
                "defaultValue": "new Map([\n    [2, COLORS.Letter2x],\n    [3, COLORS.Letter3x],\n])"
            },
            {
                "name": "LETTER_VALUES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LetterValue[]",
                "defaultValue": "[\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    '*',\n]"
            },
            {
                "name": "LOCAL_PLAYER_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IconName[]",
                "defaultValue": "['user-astronaut', 'user-cowboy', 'user-ninja', 'user-crown']"
            },
            {
                "name": "LOCAL_PLAYER_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'me'"
            },
            {
                "name": "MARGIN_COLUMN_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "MAX_COL_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "14"
            },
            {
                "name": "MAX_CONFETTI_COUNT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "150"
            },
            {
                "name": "MAX_DESCRIPTION_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "80"
            },
            {
                "name": "MAX_INPUT_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "512"
            },
            {
                "name": "MAX_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "MAX_LOCATION_COMMAND_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3"
            },
            {
                "name": "MAX_NAME_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "30"
            },
            {
                "name": "MAX_NAME_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/virtual-player-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "MAX_ROW_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "14"
            },
            {
                "name": "MAX_TILES_PER_PLAYER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "7"
            },
            {
                "name": "MAXIMUM_TIME_UNITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "MAXIMUM_TIMER_VALUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "300"
            },
            {
                "name": "MESSAGE_STORAGE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/session-storage-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'localGameMessages'"
            },
            {
                "name": "MIN_COL_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "MIN_CONFETTI_COUNT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "100"
            },
            {
                "name": "MIN_DESCRIPTION_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "MIN_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "MIN_LOCATION_COMMAND_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "MIN_NAME_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "MIN_NAME_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/virtual-player-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "MIN_ROW_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "MINIMUM_TIME_UNITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "MINIMUM_TIMER_TIME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.01"
            },
            {
                "name": "MINIMUM_TIMER_VALUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "30"
            },
            {
                "name": "MINUTES_IN_HOUR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "MISSING_PLAYER_DATA_TO_INITIALIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Certaines informations sont manquantes pour créer le joueur'"
            },
            {
                "name": "MOCK_PLAYER_PROFILE_MAP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/service-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<VirtualPlayerLevel, string[]>",
                "defaultValue": "new Map([\n    [VirtualPlayerLevel.Beginner, [MOCK_PLAYER_PROFILES[0].name, MOCK_PLAYER_PROFILES[1].name]],\n    [VirtualPlayerLevel.Expert, [MOCK_PLAYER_PROFILES[2].name]],\n])"
            },
            {
                "name": "MOCK_PLAYER_PROFILES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/service-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "VirtualPlayer[]",
                "defaultValue": "[\n    {\n        name: 'Jean Charest',\n        idVirtualPlayer: 1,\n        level: VirtualPlayerLevel.Beginner,\n        isDefault: false,\n    },\n    {\n        name: 'Jean Charest Jr',\n        idVirtualPlayer: 2,\n        level: VirtualPlayerLevel.Beginner,\n        isDefault: false,\n    },\n    {\n        name: 'Thomas \"The best\" Trépanier',\n        idVirtualPlayer: 3,\n        level: VirtualPlayerLevel.Expert,\n        isDefault: false,\n    },\n]"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    // MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    // MatCheckboxModule,\n    // MatCheckboxModule,\n    MatChipsModule,\n    // MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    // MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatSelectModule,\n    // MatSidenavModule,\n    // MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatDividerModule,\n]"
            },
            {
                "name": "MULTIPLIER_COLOR_MAP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/square/square-multiplier-to-color-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<MultiplierEffect, Map<number, COLORS>>",
                "defaultValue": "new Map([\n    [MultiplierEffect.LETTER, LETTER_MULTIPLIER_COLOR_MAP],\n    [MultiplierEffect.WORD, WORD_MULTIPLIER_COLOR_MAP],\n])"
            },
            {
                "name": "NAME_NO_MATCH_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Votre nom ne peut pas contenir de caractères spéciaux.'"
            },
            {
                "name": "NAME_REQUIRED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Vous devez entrer un nom pour jouer'"
            },
            {
                "name": "NAME_SAME_AS_VIRTUAL_PLAYER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Votre nom ne peut pas être le même que celui de votre adversaire virtuel.'"
            },
            {
                "name": "NAME_TOO_LONG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Votre nom doit contenir au plus 20 caractères.'"
            },
            {
                "name": "NAME_TOO_SHORT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Votre nom doit contenir au moins 2 caractères.'"
            },
            {
                "name": "NAME_VALIDATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    minLength: MIN_LENGTH,\n    maxLength: MAX_LENGTH,\n    rule: VALIDATION_RULE,\n}"
            },
            {
                "name": "nextIndex",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/next-index/next-index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(length: number) => (index: number) => (index + 1) % length"
            },
            {
                "name": "NO_COLOR_FOR_MULTIPLIER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/classes-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Le multiplicateur de score fourni n'a aucune couleur associée\""
            },
            {
                "name": "NO_CURRENT_ROUND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Aucune round n'est active présentement\""
            },
            {
                "name": "NO_LOBBY_CAN_BE_JOINED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Aucun lobby ne peut être rejoint'"
            },
            {
                "name": "NO_LOCAL_PLAYER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Aucun joueur local n'a encore été défini\""
            },
            {
                "name": "NO_SQUARE_FOR_SQUARE_VIEW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/classes-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"La propriété du SquareView: Square est n'est pas définie\""
            },
            {
                "name": "NO_START_GAME_TIME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"La partie n'et pas encore commencée, alors il n'y a pas encore de temps de départ\""
            },
            {
                "name": "NO_SUBJECT_FOR_EVENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Il n'y a aucun Subject associé à l'événement demandé\""
            },
            {
                "name": "NOT_FOUND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "-1"
            },
            {
                "name": "NOT_FOUND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/preserve-array-order/preserve-array-order.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "-1"
            },
            {
                "name": "ON_YOUR_TURN_ACTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ActionType.PLACE, ActionType.EXCHANGE, ActionType.PASS, ActionType.HINT]"
            },
            {
                "name": "onlyHasEmoji",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/emoji/emoji.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(str: string): boolean => {\n    return EMOJI_REGEX.test(str);\n}"
            },
            {
                "name": "OPPONENT_COMPLETED_THIS_OBJECTIVE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(isPublic: boolean) =>\n    isPublic ? 'Votre adversaire a complété cet objectif avant vous' : 'Votre adversaire a complété cet objectif'"
            },
            {
                "name": "OPPONENT_FOUND_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "' a rejoint votre partie.'"
            },
            {
                "name": "OPPONENT_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'opponent'"
            },
            {
                "name": "ORIENTATION_HORIZONTAL_LETTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/actions/orientation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'h'"
            },
            {
                "name": "ORIENTATION_VERTICAL_LETTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/actions/orientation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'v'"
            },
            {
                "name": "PERCENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "100"
            },
            {
                "name": "PLAYER_1_INDEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "PLAYER_2_INDEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "PLAYER_NAME_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/session-storage-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'playerName'"
            },
            {
                "name": "PLAYER_NOT_FOUND",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/command-exception-messages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Current player could not be found'"
            },
            {
                "name": "PLAYER_NUMBER_INVALID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(playerNumber: number) => `Il n'y a pas de joueur #${playerNumber} dans la partie`"
            },
            {
                "name": "preserveArrayOrder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/preserve-array-order/preserve-array-order.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T, S = T>(array: T[], originalArray: S[], equals: (a: T, b: S) => boolean): T[] => {\n    const output: T[] = [];\n\n    array = [...array];\n\n    originalArray.forEach((original) => {\n        const index = array.findIndex((i) => equals(i, original));\n        if (index === NOT_FOUND) return;\n\n        const item = array.splice(index, 1).pop();\n        if (item) output.push(item);\n    });\n\n    return output.concat(array);\n}"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox/chatbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "RACK_FONT_SIZE_INCREMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.1"
            },
            {
                "name": "RACK_TILE_DEFAULT_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1.3"
            },
            {
                "name": "RACK_TILE_MAX_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1.5"
            },
            {
                "name": "RACK_TILE_MIN_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1.1"
            },
            {
                "name": "randomizeArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/randomize-array/randomize-array.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(array: T[]): T[] => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const randomIndex = Math.floor(Math.random() * (i + 1));\n        const temp = array[i];\n        array[i] = array[randomIndex];\n        array[randomIndex] = temp;\n    }\n    return array;\n}"
            },
            {
                "name": "REINITIALIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Réinitialiser'"
            },
            {
                "name": "REINITIALIZE_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IconName",
                "defaultValue": "'history'"
            },
            {
                "name": "removeAccents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/remove-accents/remove-accents.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(word: string): string => word.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "SECONDS_IN_DAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "HOURS_IN_DAY * MINUTES_IN_HOUR * SECONDS_IN_MINUTE"
            },
            {
                "name": "SECONDS_IN_HOUR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MINUTES_IN_HOUR * SECONDS_IN_MINUTE"
            },
            {
                "name": "SECONDS_IN_MINUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/round/timer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "SECONDS_IN_MINUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "60"
            },
            {
                "name": "SECONDS_TO_MILLISECONDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1000"
            },
            {
                "name": "SHUFFLE_ANIMATION_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/tile-rack/tile-rack.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "250"
            },
            {
                "name": "SNACK_BAR_ERROR_DURATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionaries-components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "100000"
            },
            {
                "name": "SNACK_BAR_ERROR_DURATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionaries-component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "100000"
            },
            {
                "name": "SNACK_BAR_SUCCESS_DURATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionaries-components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2000"
            },
            {
                "name": "SOCKET_ID_COOKIE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'socketId'"
            },
            {
                "name": "SOCKET_ID_UNDEFINED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"L'identifiant du socket n'est pas défini\""
            },
            {
                "name": "SQUARE_FONT_SIZE_INCREMENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.06"
            },
            {
                "name": "SQUARE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Vec2",
                "defaultValue": "{ x: 1, y: 1 }"
            },
            {
                "name": "SQUARE_TILE_DEFAULT_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.94"
            },
            {
                "name": "SQUARE_TILE_MAX_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1.06"
            },
            {
                "name": "SQUARE_TILE_MIN_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/tile-font-size-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0.82"
            },
            {
                "name": "SQUARE_VIEW_COLOR_UNDEFINED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/component-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Impossible d'initialiser la taille de la case\""
            },
            {
                "name": "SUCCESS_SNACK_BAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ duration: SNACK_BAR_SUCCESS_DURATION, panelClass: ['success'] }"
            },
            {
                "name": "SYSTEM_ERROR_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'system-error'"
            },
            {
                "name": "SYSTEM_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'system'"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChatboxMessageComponent>",
                "defaultValue": "(args: ChatboxMessageComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox/chatbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChatBoxComponent>",
                "defaultValue": "(args: ChatBoxComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChatboxContainerComponent>",
                "defaultValue": "(args: ChatboxContainerComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IconComponent>",
                "defaultValue": "(args: IconComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "TEST_DICTIONARY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/controller-test-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DictionarySummary",
                "defaultValue": "{ id: 'id', title: 'title', description: 'description', isDefault: false }"
            },
            {
                "name": "TIME_TO_RECONNECT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5"
            },
            {
                "name": "TIMER_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/session-storage-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'timer'"
            },
            {
                "name": "TIMER_VALUE_INCREMENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/pages-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "30"
            },
            {
                "name": "UNDEFINED_GRID_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Vec2",
                "defaultValue": "{ x: -1, y: -1 }"
            },
            {
                "name": "UNDEFINED_SQUARE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Square",
                "defaultValue": "{\n    tile: null,\n    position: { row: -1, column: -1 },\n    scoreMultiplier: null,\n    wasMultiplierUsed: false,\n    isCenter: false,\n}"
            },
            {
                "name": "UNDEFINED_SQUARE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Vec2",
                "defaultValue": "{ x: -1, y: -1 }"
            },
            {
                "name": "UNDEFINED_TILE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{ letter: '?', value: -1 }"
            },
            {
                "name": "UPDATE_VIRTUAL_PLAYER_DIALOG_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dialogs-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'300px'"
            },
            {
                "name": "UPDATE_VIRTUAL_PLAYER_DIALOG_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dialogs-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'450px'"
            },
            {
                "name": "VALID_MULTIPLIERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/game-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number[]",
                "defaultValue": "[2, 3]"
            },
            {
                "name": "VALIDATION_RULE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionary-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"^([0-9A-Za-zÀ-ÖØ-öø-ÿ]+[ '\\\\-_]{0,1})*$\""
            },
            {
                "name": "VALIDATION_RULE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"^([0-9A-Za-zÀ-ÖØ-öø-ÿ]+[ '\\\\-_]{0,1})*$\""
            },
            {
                "name": "VALIDATION_RULE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/virtual-player-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"^([0-9A-Za-zÀ-ÖØ-öø-ÿ]+[ '\\\\-_]{0,1})*$\""
            },
            {
                "name": "VIRTUAL_PLAYER_NAME_VALIDATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/virtual-player-name-validation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    minLength: MIN_NAME_LENGTH,\n    maxLength: MAX_NAME_LENGTH,\n    rule: VALIDATION_RULE,\n}"
            },
            {
                "name": "VIRTUAL_PLAYERS_COLUMNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    name: 'Nom',\n    actions: '',\n}"
            },
            {
                "name": "WAIT_FOR_COMMAND_CONFIRMATION_MESSAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/services-errors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(gameId: string): Message => {\n    return {\n        content: \"Veuillez attendre la confirmation de votre commande précédente avant d'en envoyer une autre.\",\n        senderId: SYSTEM_ID,\n        gameId,\n    };\n}"
            },
            {
                "name": "withVeryLongName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "template.bind({})"
            },
            {
                "name": "WORD_MULTIPLIER_COLOR_MAP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/classes/square/square-multiplier-to-color-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Map<number, COLORS>",
                "defaultValue": "new Map([\n    [2, COLORS.Word2x],\n    [3, COLORS.Word3x],\n])"
            },
            {
                "name": "WRONG_FILE_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/dictionaries-components.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Le fichier n'est pas un fichier JSON.\""
            },
            {
                "name": "YOU_COMPLETED_THIS_OBJECTIVE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/constants/components-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Vous avez complété cet objectif!'"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "DisplayDictionaryColumns",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/classes/admin/dictionaries.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "DisplayDictionaryColumnsIteratorItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/classes/admin/dictionaries.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DisplayDictionaryKeys",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | \"title\" | \"description\" | \"actions\"",
                "file": "src/app/classes/admin/dictionaries.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DisplayGameHistoryColumns",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/classes/admin/admin-game-history.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "DisplayGameHistoryColumnsIteratorItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/classes/admin/admin-game-history.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DisplayGameHistoryKeys",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | \"player1Data\" | \"player1Name\" | \"player1Score\" | \"player2Data\" | \"player2Name\" | \"player2Score\" | \"startDate\" | \"endDate\" | \"duration\"",
                "file": "src/app/classes/admin/admin-game-history.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DisplayVirtualPlayersColumns",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "DisplayVirtualPlayersColumnsIteratorItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "DisplayVirtualPlayersKeys",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | \"name\" | \"actions\"",
                "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "DurationTime",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[, , ]",
                "file": "src/app/pipes/duration/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "FontSizeChangeOperations",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"smaller\" | \"larger\"",
                "file": "src/app/constants/font-size-operations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "GameHistoryData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/classes/communication/game-histories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "GenericEventClass",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/services/game-view-event-manager-service/event-types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "IconAnimation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"spin\" | \"pulse\"",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"abacus\" | \"acorn\" | \"ad\" | \"address-book\" | \"address-card\" | \"adjust\" | \"air-conditioner\" | \"air-freshener\" | \"alarm-clock\" | \"alarm-exclamation\" | \"alarm-plus\" | \"alarm-snooze\" | \"album\" | \"album-collection\" | \"alicorn\" | \"alien\" | \"alien-monster\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"align-slash\" | \"allergies\" | \"ambulance\" | \"american-sign-language-interpreting\" | \"amp-guitar\" | \"analytics\" | \"anchor\" | \"angel\" | \"angle-double-down\" | \"angle-double-left\" | \"angle-double-right\" | \"angle-double-up\" | \"angle-down\" | \"angle-left\" | \"angle-right\" | \"angle-up\" | \"angry\" | \"ankh\" | \"apple-alt\" | \"apple-crate\" | \"archive\" | \"archway\" | \"arrow-alt-circle-down\" | \"arrow-alt-circle-left\" | \"arrow-alt-circle-right\" | \"arrow-alt-circle-up\" | \"arrow-alt-down\" | \"arrow-alt-from-bottom\" | \"arrow-alt-from-left\" | \"arrow-alt-from-right\" | \"arrow-alt-from-top\" | \"arrow-alt-left\" | \"arrow-alt-right\" | \"arrow-alt-square-down\" | \"arrow-alt-square-left\" | \"arrow-alt-square-right\" | \"arrow-alt-square-up\" | \"arrow-alt-to-bottom\" | \"arrow-alt-to-left\" | \"arrow-alt-to-right\" | \"arrow-alt-to-top\" | \"arrow-alt-up\" | \"arrow-circle-down\" | \"arrow-circle-left\" | \"arrow-circle-right\" | \"arrow-circle-up\" | \"arrow-down\" | \"arrow-from-bottom\" | \"arrow-from-left\" | \"arrow-from-right\" | \"arrow-from-top\" | \"arrow-left\" | \"arrow-right\" | \"arrow-square-down\" | \"arrow-square-left\" | \"arrow-square-right\" | \"arrow-square-up\" | \"arrow-to-bottom\" | \"arrow-to-left\" | \"arrow-to-right\" | \"arrow-to-top\" | \"arrow-up\" | \"arrows\" | \"arrows-alt\" | \"arrows-alt-h\" | \"arrows-alt-v\" | \"arrows-h\" | \"arrows-v\" | \"assistive-listening-systems\" | \"asterisk\" | \"at\" | \"atlas\" | \"atom\" | \"atom-alt\" | \"audio-description\" | \"award\" | \"axe\" | \"axe-battle\" | \"baby\" | \"baby-carriage\" | \"backpack\" | \"backspace\" | \"backward\" | \"bacon\" | \"bacteria\" | \"bacterium\" | \"badge\" | \"badge-check\" | \"badge-dollar\" | \"badge-percent\" | \"badge-sheriff\" | \"badger-honey\" | \"bags-shopping\" | \"bahai\" | \"balance-scale\" | \"balance-scale-left\" | \"balance-scale-right\" | \"ball-pile\" | \"ballot\" | \"ballot-check\" | \"ban\" | \"band-aid\" | \"banjo\" | \"barcode\" | \"barcode-alt\" | \"barcode-read\" | \"barcode-scan\" | \"bars\" | \"baseball\" | \"baseball-ball\" | \"basketball-ball\" | \"basketball-hoop\" | \"bat\" | \"bath\" | \"battery-bolt\" | \"battery-empty\" | \"battery-full\" | \"battery-half\" | \"battery-quarter\" | \"battery-slash\" | \"battery-three-quarters\" | \"bed\" | \"bed-alt\" | \"bed-bunk\" | \"bed-empty\" | \"beer\" | \"bell\" | \"bell-exclamation\" | \"bell-on\" | \"bell-plus\" | \"bell-school\" | \"bell-school-slash\" | \"bell-slash\" | \"bells\" | \"betamax\" | \"bezier-curve\" | \"bible\" | \"bicycle\" | \"biking\" | \"biking-mountain\" | \"binoculars\" | \"biohazard\" | \"birthday-cake\" | \"blanket\" | \"blender\" | \"blender-phone\" | \"blind\" | \"blinds\" | \"blinds-open\" | \"blinds-raised\" | \"blog\" | \"bold\" | \"bolt\" | \"bomb\" | \"bone\" | \"bone-break\" | \"bong\" | \"book\" | \"book-alt\" | \"book-dead\" | \"book-heart\" | \"book-medical\" | \"book-open\" | \"book-reader\" | \"book-spells\" | \"book-user\" | \"bookmark\" | \"books\" | \"books-medical\" | \"boombox\" | \"boot\" | \"booth-curtain\" | \"border-all\" | \"border-bottom\" | \"border-center-h\" | \"border-center-v\" | \"border-inner\" | \"border-left\" | \"border-none\" | \"border-outer\" | \"border-right\" | \"border-style\" | \"border-style-alt\" | \"border-top\" | \"bow-arrow\" | \"bowling-ball\" | \"bowling-pins\" | \"box\" | \"box-alt\" | \"box-ballot\" | \"box-check\" | \"box-fragile\" | \"box-full\" | \"box-heart\" | \"box-open\" | \"box-tissue\" | \"box-up\" | \"box-usd\" | \"boxes\" | \"boxes-alt\" | \"boxing-glove\" | \"brackets\" | \"brackets-curly\" | \"braille\" | \"brain\" | \"bread-loaf\" | \"bread-slice\" | \"briefcase\" | \"briefcase-medical\" | \"bring-forward\" | \"bring-front\" | \"broadcast-tower\" | \"broom\" | \"browser\" | \"brush\" | \"bug\" | \"building\" | \"bullhorn\" | \"bullseye\" | \"bullseye-arrow\" | \"bullseye-pointer\" | \"burger-soda\" | \"burn\" | \"burrito\" | \"bus\" | \"bus-alt\" | \"bus-school\" | \"business-time\" | \"cabinet-filing\" | \"cactus\" | \"calculator\" | \"calculator-alt\" | \"calendar\" | \"calendar-alt\" | \"calendar-check\" | \"calendar-day\" | \"calendar-edit\" | \"calendar-exclamation\" | \"calendar-minus\" | \"calendar-plus\" | \"calendar-star\" | \"calendar-times\" | \"calendar-week\" | \"camcorder\" | \"camera\" | \"camera-alt\" | \"camera-home\" | \"camera-movie\" | \"camera-polaroid\" | \"camera-retro\" | \"campfire\" | \"campground\" | \"candle-holder\" | \"candy-cane\" | \"candy-corn\" | \"cannabis\" | \"capsules\" | \"car\" | \"car-alt\" | \"car-battery\" | \"car-building\" | \"car-bump\" | \"car-bus\" | \"car-crash\" | \"car-garage\" | \"car-mechanic\" | \"car-side\" | \"car-tilt\" | \"car-wash\" | \"caravan\" | \"caravan-alt\" | \"caret-circle-down\" | \"caret-circle-left\" | \"caret-circle-right\" | \"caret-circle-up\" | \"caret-down\" | \"caret-left\" | \"caret-right\" | \"caret-square-down\" | \"caret-square-left\" | \"caret-square-right\" | \"caret-square-up\" | \"caret-up\" | \"carrot\" | \"cars\" | \"cart-arrow-down\" | \"cart-plus\" | \"cash-register\" | \"cassette-tape\" | \"cat\" | \"cat-space\" | \"cauldron\" | \"cctv\" | \"certificate\" | \"chair\" | \"chair-office\" | \"chalkboard\" | \"chalkboard-teacher\" | \"charging-station\" | \"chart-area\" | \"chart-bar\" | \"chart-line\" | \"chart-line-down\" | \"chart-network\" | \"chart-pie\" | \"chart-pie-alt\" | \"chart-scatter\" | \"check\" | \"check-circle\" | \"check-double\" | \"check-square\" | \"cheese\" | \"cheese-swiss\" | \"cheeseburger\" | \"chess\" | \"chess-bishop\" | \"chess-bishop-alt\" | \"chess-board\" | \"chess-clock\" | \"chess-clock-alt\" | \"chess-king\" | \"chess-king-alt\" | \"chess-knight\" | \"chess-knight-alt\" | \"chess-pawn\" | \"chess-pawn-alt\" | \"chess-queen\" | \"chess-queen-alt\" | \"chess-rook\" | \"chess-rook-alt\" | \"chevron-circle-down\" | \"chevron-circle-left\" | \"chevron-circle-right\" | \"chevron-circle-up\" | \"chevron-double-down\" | \"chevron-double-left\" | \"chevron-double-right\" | \"chevron-double-up\" | \"chevron-down\" | \"chevron-left\" | \"chevron-right\" | \"chevron-square-down\" | \"chevron-square-left\" | \"chevron-square-right\" | \"chevron-square-up\" | \"chevron-up\" | \"child\" | \"chimney\" | \"church\" | \"circle\" | \"circle-notch\" | \"city\" | \"clarinet\" | \"claw-marks\" | \"clinic-medical\" | \"clipboard\" | \"clipboard-check\" | \"clipboard-list\" | \"clipboard-list-check\" | \"clipboard-prescription\" | \"clipboard-user\" | \"clock\" | \"clone\" | \"closed-captioning\" | \"cloud\" | \"cloud-download\" | \"cloud-download-alt\" | \"cloud-drizzle\" | \"cloud-hail\" | \"cloud-hail-mixed\" | \"cloud-meatball\" | \"cloud-moon\" | \"cloud-moon-rain\" | \"cloud-music\" | \"cloud-rain\" | \"cloud-rainbow\" | \"cloud-showers\" | \"cloud-showers-heavy\" | \"cloud-sleet\" | \"cloud-snow\" | \"cloud-sun\" | \"cloud-sun-rain\" | \"cloud-upload\" | \"cloud-upload-alt\" | \"clouds\" | \"clouds-moon\" | \"clouds-sun\" | \"club\" | \"cocktail\" | \"code\" | \"code-branch\" | \"code-commit\" | \"code-merge\" | \"coffee\" | \"coffee-pot\" | \"coffee-togo\" | \"coffin\" | \"coffin-cross\" | \"cog\" | \"cogs\" | \"coin\" | \"coins\" | \"columns\" | \"comet\" | \"comment\" | \"comment-alt\" | \"comment-alt-check\" | \"comment-alt-dollar\" | \"comment-alt-dots\" | \"comment-alt-edit\" | \"comment-alt-exclamation\" | \"comment-alt-lines\" | \"comment-alt-medical\" | \"comment-alt-minus\" | \"comment-alt-music\" | \"comment-alt-plus\" | \"comment-alt-slash\" | \"comment-alt-smile\" | \"comment-alt-times\" | \"comment-check\" | \"comment-dollar\" | \"comment-dots\" | \"comment-edit\" | \"comment-exclamation\" | \"comment-lines\" | \"comment-medical\" | \"comment-minus\" | \"comment-music\" | \"comment-plus\" | \"comment-slash\" | \"comment-smile\" | \"comment-times\" | \"comments\" | \"comments-alt\" | \"comments-alt-dollar\" | \"comments-dollar\" | \"compact-disc\" | \"compass\" | \"compass-slash\" | \"compress\" | \"compress-alt\" | \"compress-arrows-alt\" | \"compress-wide\" | \"computer-classic\" | \"computer-speaker\" | \"concierge-bell\" | \"construction\" | \"container-storage\" | \"conveyor-belt\" | \"conveyor-belt-alt\" | \"cookie\" | \"cookie-bite\" | \"copy\" | \"copyright\" | \"corn\" | \"couch\" | \"cow\" | \"cowbell\" | \"cowbell-more\" | \"credit-card\" | \"credit-card-blank\" | \"credit-card-front\" | \"cricket\" | \"croissant\" | \"crop\" | \"crop-alt\" | \"cross\" | \"crosshairs\" | \"crow\" | \"crown\" | \"crutch\" | \"crutches\" | \"cube\" | \"cubes\" | \"curling\" | \"cut\" | \"dagger\" | \"database\" | \"deaf\" | \"debug\" | \"deer\" | \"deer-rudolph\" | \"democrat\" | \"desktop\" | \"desktop-alt\" | \"dewpoint\" | \"dharmachakra\" | \"diagnoses\" | \"diamond\" | \"dice\" | \"dice-d10\" | \"dice-d12\" | \"dice-d20\" | \"dice-d4\" | \"dice-d6\" | \"dice-d8\" | \"dice-five\" | \"dice-four\" | \"dice-one\" | \"dice-six\" | \"dice-three\" | \"dice-two\" | \"digging\" | \"digital-tachograph\" | \"diploma\" | \"directions\" | \"disc-drive\" | \"disease\" | \"divide\" | \"dizzy\" | \"dna\" | \"do-not-enter\" | \"dog\" | \"dog-leashed\" | \"dollar-sign\" | \"dolly\" | \"dolly-empty\" | \"dolly-flatbed\" | \"dolly-flatbed-alt\" | \"dolly-flatbed-empty\" | \"donate\" | \"door-closed\" | \"door-open\" | \"dot-circle\" | \"dove\" | \"download\" | \"drafting-compass\" | \"dragon\" | \"draw-circle\" | \"draw-polygon\" | \"draw-square\" | \"dreidel\" | \"drone\" | \"drone-alt\" | \"drum\" | \"drum-steelpan\" | \"drumstick\" | \"drumstick-bite\" | \"dryer\" | \"dryer-alt\" | \"duck\" | \"dumbbell\" | \"dumpster\" | \"dumpster-fire\" | \"dungeon\" | \"ear\" | \"ear-muffs\" | \"eclipse\" | \"eclipse-alt\" | \"edit\" | \"egg\" | \"egg-fried\" | \"eject\" | \"elephant\" | \"ellipsis-h\" | \"ellipsis-h-alt\" | \"ellipsis-v\" | \"ellipsis-v-alt\" | \"empty-set\" | \"engine-warning\" | \"envelope\" | \"envelope-open\" | \"envelope-open-dollar\" | \"envelope-open-text\" | \"envelope-square\" | \"equals\" | \"eraser\" | \"ethernet\" | \"euro-sign\" | \"exchange\" | \"exchange-alt\" | \"exclamation\" | \"exclamation-circle\" | \"exclamation-square\" | \"exclamation-triangle\" | \"expand\" | \"expand-alt\" | \"expand-arrows\" | \"expand-arrows-alt\" | \"expand-wide\" | \"external-link\" | \"external-link-alt\" | \"external-link-square\" | \"external-link-square-alt\" | \"eye\" | \"eye-dropper\" | \"eye-evil\" | \"eye-slash\" | \"fan\" | \"fan-table\" | \"farm\" | \"fast-backward\" | \"fast-forward\" | \"faucet\" | \"faucet-drip\" | \"fax\" | \"feather\" | \"feather-alt\" | \"female\" | \"field-hockey\" | \"fighter-jet\" | \"file\" | \"file-alt\" | \"file-archive\" | \"file-audio\" | \"file-certificate\" | \"file-chart-line\" | \"file-chart-pie\" | \"file-check\" | \"file-code\" | \"file-contract\" | \"file-csv\" | \"file-download\" | \"file-edit\" | \"file-excel\" | \"file-exclamation\" | \"file-export\" | \"file-image\" | \"file-import\" | \"file-invoice\" | \"file-invoice-dollar\" | \"file-medical\" | \"file-medical-alt\" | \"file-minus\" | \"file-music\" | \"file-pdf\" | \"file-plus\" | \"file-powerpoint\" | \"file-prescription\" | \"file-search\" | \"file-signature\" | \"file-spreadsheet\" | \"file-times\" | \"file-upload\" | \"file-user\" | \"file-video\" | \"file-word\" | \"files-medical\" | \"fill\" | \"fill-drip\" | \"film\" | \"film-alt\" | \"film-canister\" | \"filter\" | \"fingerprint\" | \"fire\" | \"fire-alt\" | \"fire-extinguisher\" | \"fire-smoke\" | \"fireplace\" | \"first-aid\" | \"fish\" | \"fish-cooked\" | \"fist-raised\" | \"flag\" | \"flag-alt\" | \"flag-checkered\" | \"flag-usa\" | \"flame\" | \"flashlight\" | \"flask\" | \"flask-poison\" | \"flask-potion\" | \"flower\" | \"flower-daffodil\" | \"flower-tulip\" | \"flushed\" | \"flute\" | \"flux-capacitor\" | \"fog\" | \"folder\" | \"folder-download\" | \"folder-minus\" | \"folder-open\" | \"folder-plus\" | \"folder-times\" | \"folder-tree\" | \"folder-upload\" | \"folders\" | \"font\" | \"font-case\" | \"football-ball\" | \"football-helmet\" | \"forklift\" | \"forward\" | \"fragile\" | \"french-fries\" | \"frog\" | \"frosty-head\" | \"frown\" | \"frown-open\" | \"function\" | \"funnel-dollar\" | \"futbol\" | \"galaxy\" | \"game-board\" | \"game-board-alt\" | \"game-console-handheld\" | \"gamepad\" | \"gamepad-alt\" | \"garage\" | \"garage-car\" | \"garage-open\" | \"gas-pump\" | \"gas-pump-slash\" | \"gavel\" | \"gem\" | \"genderless\" | \"ghost\" | \"gift\" | \"gift-card\" | \"gifts\" | \"gingerbread-man\" | \"glass\" | \"glass-champagne\" | \"glass-cheers\" | \"glass-citrus\" | \"glass-martini\" | \"glass-martini-alt\" | \"glass-whiskey\" | \"glass-whiskey-rocks\" | \"glasses\" | \"glasses-alt\" | \"globe\" | \"globe-africa\" | \"globe-americas\" | \"globe-asia\" | \"globe-europe\" | \"globe-snow\" | \"globe-stand\" | \"golf-ball\" | \"golf-club\" | \"gopuram\" | \"graduation-cap\" | \"gramophone\" | \"greater-than\" | \"greater-than-equal\" | \"grimace\" | \"grin\" | \"grin-alt\" | \"grin-beam\" | \"grin-beam-sweat\" | \"grin-hearts\" | \"grin-squint\" | \"grin-squint-tears\" | \"grin-stars\" | \"grin-tears\" | \"grin-tongue\" | \"grin-tongue-squint\" | \"grin-tongue-wink\" | \"grin-wink\" | \"grip-horizontal\" | \"grip-lines\" | \"grip-lines-vertical\" | \"grip-vertical\" | \"guitar\" | \"guitar-electric\" | \"guitars\" | \"h-square\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"hamburger\" | \"hammer\" | \"hammer-war\" | \"hamsa\" | \"hand-heart\" | \"hand-holding\" | \"hand-holding-box\" | \"hand-holding-heart\" | \"hand-holding-magic\" | \"hand-holding-medical\" | \"hand-holding-seedling\" | \"hand-holding-usd\" | \"hand-holding-water\" | \"hand-lizard\" | \"hand-middle-finger\" | \"hand-paper\" | \"hand-peace\" | \"hand-point-down\" | \"hand-point-left\" | \"hand-point-right\" | \"hand-point-up\" | \"hand-pointer\" | \"hand-receiving\" | \"hand-rock\" | \"hand-scissors\" | \"hand-sparkles\" | \"hand-spock\" | \"hands\" | \"hands-heart\" | \"hands-helping\" | \"hands-usd\" | \"hands-wash\" | \"handshake\" | \"handshake-alt\" | \"handshake-alt-slash\" | \"handshake-slash\" | \"hanukiah\" | \"hard-hat\" | \"hashtag\" | \"hat-chef\" | \"hat-cowboy\" | \"hat-cowboy-side\" | \"hat-santa\" | \"hat-winter\" | \"hat-witch\" | \"hat-wizard\" | \"hdd\" | \"head-side\" | \"head-side-brain\" | \"head-side-cough\" | \"head-side-cough-slash\" | \"head-side-headphones\" | \"head-side-mask\" | \"head-side-medical\" | \"head-side-virus\" | \"head-vr\" | \"heading\" | \"headphones\" | \"headphones-alt\" | \"headset\" | \"heart\" | \"heart-broken\" | \"heart-circle\" | \"heart-rate\" | \"heart-square\" | \"heartbeat\" | \"heat\" | \"helicopter\" | \"helmet-battle\" | \"hexagon\" | \"highlighter\" | \"hiking\" | \"hippo\" | \"history\" | \"hockey-mask\" | \"hockey-puck\" | \"hockey-sticks\" | \"holly-berry\" | \"home\" | \"home-alt\" | \"home-heart\" | \"home-lg\" | \"home-lg-alt\" | \"hood-cloak\" | \"horizontal-rule\" | \"horse\" | \"horse-head\" | \"horse-saddle\" | \"hospital\" | \"hospital-alt\" | \"hospital-symbol\" | \"hospital-user\" | \"hospitals\" | \"hot-tub\" | \"hotdog\" | \"hotel\" | \"hourglass\" | \"hourglass-end\" | \"hourglass-half\" | \"hourglass-start\" | \"house\" | \"house-damage\" | \"house-day\" | \"house-flood\" | \"house-leave\" | \"house-night\" | \"house-return\" | \"house-signal\" | \"house-user\" | \"hryvnia\" | \"humidity\" | \"hurricane\" | \"i-cursor\" | \"ice-cream\" | \"ice-skate\" | \"icicles\" | \"icons\" | \"icons-alt\" | \"id-badge\" | \"id-card\" | \"id-card-alt\" | \"igloo\" | \"image\" | \"image-polaroid\" | \"images\" | \"inbox\" | \"inbox-in\" | \"inbox-out\" | \"indent\" | \"industry\" | \"industry-alt\" | \"infinity\" | \"info\" | \"info-circle\" | \"info-square\" | \"inhaler\" | \"integral\" | \"intersection\" | \"inventory\" | \"island-tropical\" | \"italic\" | \"jack-o-lantern\" | \"jedi\" | \"joint\" | \"journal-whills\" | \"joystick\" | \"jug\" | \"kaaba\" | \"kazoo\" | \"kerning\" | \"key\" | \"key-skeleton\" | \"keyboard\" | \"keynote\" | \"khanda\" | \"kidneys\" | \"kiss\" | \"kiss-beam\" | \"kiss-wink-heart\" | \"kite\" | \"kiwi-bird\" | \"knife-kitchen\" | \"lambda\" | \"lamp\" | \"lamp-desk\" | \"lamp-floor\" | \"landmark\" | \"landmark-alt\" | \"language\" | \"laptop\" | \"laptop-code\" | \"laptop-house\" | \"laptop-medical\" | \"lasso\" | \"laugh\" | \"laugh-beam\" | \"laugh-squint\" | \"laugh-wink\" | \"layer-group\" | \"layer-minus\" | \"layer-plus\" | \"leaf\" | \"leaf-heart\" | \"leaf-maple\" | \"leaf-oak\" | \"lemon\" | \"less-than\" | \"less-than-equal\" | \"level-down\" | \"level-down-alt\" | \"level-up\" | \"level-up-alt\" | \"life-ring\" | \"light-ceiling\" | \"light-switch\" | \"light-switch-off\" | \"light-switch-on\" | \"lightbulb\" | \"lightbulb-dollar\" | \"lightbulb-exclamation\" | \"lightbulb-on\" | \"lightbulb-slash\" | \"lights-holiday\" | \"line-columns\" | \"line-height\" | \"link\" | \"lips\" | \"lira-sign\" | \"list\" | \"list-alt\" | \"list-music\" | \"list-ol\" | \"list-ul\" | \"location\" | \"location-arrow\" | \"location-circle\" | \"location-slash\" | \"lock\" | \"lock-alt\" | \"lock-open\" | \"lock-open-alt\" | \"long-arrow-alt-down\" | \"long-arrow-alt-left\" | \"long-arrow-alt-right\" | \"long-arrow-alt-up\" | \"long-arrow-down\" | \"long-arrow-left\" | \"long-arrow-right\" | \"long-arrow-up\" | \"loveseat\" | \"low-vision\" | \"luchador\" | \"luggage-cart\" | \"lungs\" | \"lungs-virus\" | \"mace\" | \"magic\" | \"magnet\" | \"mail-bulk\" | \"mailbox\" | \"male\" | \"mandolin\" | \"map\" | \"map-marked\" | \"map-marked-alt\" | \"map-marker\" | \"map-marker-alt\" | \"map-marker-alt-slash\" | \"map-marker-check\" | \"map-marker-edit\" | \"map-marker-exclamation\" | \"map-marker-minus\" | \"map-marker-plus\" | \"map-marker-question\" | \"map-marker-slash\" | \"map-marker-smile\" | \"map-marker-times\" | \"map-pin\" | \"map-signs\" | \"marker\" | \"mars\" | \"mars-double\" | \"mars-stroke\" | \"mars-stroke-h\" | \"mars-stroke-v\" | \"mask\" | \"meat\" | \"medal\" | \"medkit\" | \"megaphone\" | \"meh\" | \"meh-blank\" | \"meh-rolling-eyes\" | \"memory\" | \"menorah\" | \"mercury\" | \"meteor\" | \"microchip\" | \"microphone\" | \"microphone-alt\" | \"microphone-alt-slash\" | \"microphone-slash\" | \"microphone-stand\" | \"microscope\" | \"microwave\" | \"mind-share\" | \"minus\" | \"minus-circle\" | \"minus-hexagon\" | \"minus-octagon\" | \"minus-square\" | \"mistletoe\" | \"mitten\" | \"mobile\" | \"mobile-alt\" | \"mobile-android\" | \"mobile-android-alt\" | \"money-bill\" | \"money-bill-alt\" | \"money-bill-wave\" | \"money-bill-wave-alt\" | \"money-check\" | \"money-check-alt\" | \"money-check-edit\" | \"money-check-edit-alt\" | \"monitor-heart-rate\" | \"monkey\" | \"monument\" | \"moon\" | \"moon-cloud\" | \"moon-stars\" | \"mortar-pestle\" | \"mosque\" | \"motorcycle\" | \"mountain\" | \"mountains\" | \"mouse\" | \"mouse-alt\" | \"mouse-pointer\" | \"mp3-player\" | \"mug\" | \"mug-hot\" | \"mug-marshmallows\" | \"mug-tea\" | \"music\" | \"music-alt\" | \"music-alt-slash\" | \"music-slash\" | \"narwhal\" | \"network-wired\" | \"neuter\" | \"newspaper\" | \"not-equal\" | \"notes-medical\" | \"object-group\" | \"object-ungroup\" | \"octagon\" | \"oil-can\" | \"oil-temp\" | \"om\" | \"omega\" | \"ornament\" | \"otter\" | \"outdent\" | \"outlet\" | \"oven\" | \"overline\" | \"page-break\" | \"pager\" | \"paint-brush\" | \"paint-brush-alt\" | \"paint-roller\" | \"palette\" | \"pallet\" | \"pallet-alt\" | \"paper-plane\" | \"paperclip\" | \"parachute-box\" | \"paragraph\" | \"paragraph-rtl\" | \"parking\" | \"parking-circle\" | \"parking-circle-slash\" | \"parking-slash\" | \"passport\" | \"pastafarianism\" | \"paste\" | \"pause\" | \"pause-circle\" | \"paw\" | \"paw-alt\" | \"paw-claws\" | \"peace\" | \"pegasus\" | \"pen\" | \"pen-alt\" | \"pen-fancy\" | \"pen-nib\" | \"pen-square\" | \"pencil\" | \"pencil-alt\" | \"pencil-paintbrush\" | \"pencil-ruler\" | \"pennant\" | \"people-arrows\" | \"people-carry\" | \"pepper-hot\" | \"percent\" | \"percentage\" | \"person-booth\" | \"person-carry\" | \"person-dolly\" | \"person-dolly-empty\" | \"person-sign\" | \"phone\" | \"phone-alt\" | \"phone-laptop\" | \"phone-office\" | \"phone-plus\" | \"phone-rotary\" | \"phone-slash\" | \"phone-square\" | \"phone-square-alt\" | \"phone-volume\" | \"photo-video\" | \"pi\" | \"piano\" | \"piano-keyboard\" | \"pie\" | \"pig\" | \"piggy-bank\" | \"pills\" | \"pizza\" | \"pizza-slice\" | \"place-of-worship\" | \"plane\" | \"plane-alt\" | \"plane-arrival\" | \"plane-departure\" | \"plane-slash\" | \"planet-moon\" | \"planet-ringed\" | \"play\" | \"play-circle\" | \"plug\" | \"plus\" | \"plus-circle\" | \"plus-hexagon\" | \"plus-octagon\" | \"plus-square\" | \"podcast\" | \"podium\" | \"podium-star\" | \"police-box\" | \"poll\" | \"poll-h\" | \"poll-people\" | \"poo\" | \"poo-storm\" | \"poop\" | \"popcorn\" | \"portal-enter\" | \"portal-exit\" | \"portrait\" | \"pound-sign\" | \"power-off\" | \"pray\" | \"praying-hands\" | \"prescription\" | \"prescription-bottle\" | \"prescription-bottle-alt\" | \"presentation\" | \"print\" | \"print-search\" | \"print-slash\" | \"procedures\" | \"project-diagram\" | \"projector\" | \"pump-medical\" | \"pump-soap\" | \"pumpkin\" | \"puzzle-piece\" | \"qrcode\" | \"question\" | \"question-circle\" | \"question-square\" | \"quidditch\" | \"quote-left\" | \"quote-right\" | \"quran\" | \"rabbit\" | \"rabbit-fast\" | \"racquet\" | \"radar\" | \"radiation\" | \"radiation-alt\" | \"radio\" | \"radio-alt\" | \"rainbow\" | \"raindrops\" | \"ram\" | \"ramp-loading\" | \"random\" | \"raygun\" | \"receipt\" | \"record-vinyl\" | \"rectangle-landscape\" | \"rectangle-portrait\" | \"rectangle-wide\" | \"recycle\" | \"redo\" | \"redo-alt\" | \"refrigerator\" | \"registered\" | \"remove-format\" | \"repeat\" | \"repeat-1\" | \"repeat-1-alt\" | \"repeat-alt\" | \"reply\" | \"reply-all\" | \"republican\" | \"restroom\" | \"retweet\" | \"retweet-alt\" | \"ribbon\" | \"ring\" | \"rings-wedding\" | \"road\" | \"robot\" | \"rocket\" | \"rocket-launch\" | \"route\" | \"route-highway\" | \"route-interstate\" | \"router\" | \"rss\" | \"rss-square\" | \"ruble-sign\" | \"ruler\" | \"ruler-combined\" | \"ruler-horizontal\" | \"ruler-triangle\" | \"ruler-vertical\" | \"running\" | \"rupee-sign\" | \"rv\" | \"sack\" | \"sack-dollar\" | \"sad-cry\" | \"sad-tear\" | \"salad\" | \"sandwich\" | \"satellite\" | \"satellite-dish\" | \"sausage\" | \"save\" | \"sax-hot\" | \"saxophone\" | \"scalpel\" | \"scalpel-path\" | \"scanner\" | \"scanner-image\" | \"scanner-keyboard\" | \"scanner-touchscreen\" | \"scarecrow\" | \"scarf\" | \"school\" | \"screwdriver\" | \"scroll\" | \"scroll-old\" | \"scrubber\" | \"scythe\" | \"sd-card\" | \"search\" | \"search-dollar\" | \"search-location\" | \"search-minus\" | \"search-plus\" | \"seedling\" | \"send-back\" | \"send-backward\" | \"sensor\" | \"sensor-alert\" | \"sensor-fire\" | \"sensor-on\" | \"sensor-smoke\" | \"server\" | \"shapes\" | \"share\" | \"share-all\" | \"share-alt\" | \"share-alt-square\" | \"share-square\" | \"sheep\" | \"shekel-sign\" | \"shield\" | \"shield-alt\" | \"shield-check\" | \"shield-cross\" | \"shield-virus\" | \"ship\" | \"shipping-fast\" | \"shipping-timed\" | \"shish-kebab\" | \"shoe-prints\" | \"shopping-bag\" | \"shopping-basket\" | \"shopping-cart\" | \"shovel\" | \"shovel-snow\" | \"shower\" | \"shredder\" | \"shuttle-van\" | \"shuttlecock\" | \"sickle\" | \"sigma\" | \"sign\" | \"sign-in\" | \"sign-in-alt\" | \"sign-language\" | \"sign-out\" | \"sign-out-alt\" | \"signal\" | \"signal-1\" | \"signal-2\" | \"signal-3\" | \"signal-4\" | \"signal-alt\" | \"signal-alt-1\" | \"signal-alt-2\" | \"signal-alt-3\" | \"signal-alt-slash\" | \"signal-slash\" | \"signal-stream\" | \"signature\" | \"sim-card\" | \"sink\" | \"siren\" | \"siren-on\" | \"sitemap\" | \"skating\" | \"skeleton\" | \"ski-jump\" | \"ski-lift\" | \"skiing\" | \"skiing-nordic\" | \"skull\" | \"skull-cow\" | \"skull-crossbones\" | \"slash\" | \"sledding\" | \"sleigh\" | \"sliders-h\" | \"sliders-h-square\" | \"sliders-v\" | \"sliders-v-square\" | \"smile\" | \"smile-beam\" | \"smile-plus\" | \"smile-wink\" | \"smog\" | \"smoke\" | \"smoking\" | \"smoking-ban\" | \"sms\" | \"snake\" | \"snooze\" | \"snow-blowing\" | \"snowboarding\" | \"snowflake\" | \"snowflakes\" | \"snowman\" | \"snowmobile\" | \"snowplow\" | \"soap\" | \"socks\" | \"solar-panel\" | \"solar-system\" | \"sort\" | \"sort-alpha-down\" | \"sort-alpha-down-alt\" | \"sort-alpha-up\" | \"sort-alpha-up-alt\" | \"sort-alt\" | \"sort-amount-down\" | \"sort-amount-down-alt\" | \"sort-amount-up\" | \"sort-amount-up-alt\" | \"sort-circle\" | \"sort-circle-down\" | \"sort-circle-up\" | \"sort-down\" | \"sort-numeric-down\" | \"sort-numeric-down-alt\" | \"sort-numeric-up\" | \"sort-numeric-up-alt\" | \"sort-shapes-down\" | \"sort-shapes-down-alt\" | \"sort-shapes-up\" | \"sort-shapes-up-alt\" | \"sort-size-down\" | \"sort-size-down-alt\" | \"sort-size-up\" | \"sort-size-up-alt\" | \"sort-up\" | \"soup\" | \"spa\" | \"space-shuttle\" | \"space-station-moon\" | \"space-station-moon-alt\" | \"spade\" | \"sparkles\" | \"speaker\" | \"speakers\" | \"spell-check\" | \"spider\" | \"spider-black-widow\" | \"spider-web\" | \"spinner\" | \"spinner-third\" | \"splotch\" | \"spray-can\" | \"sprinkler\" | \"square\" | \"square-full\" | \"square-root\" | \"square-root-alt\" | \"squirrel\" | \"staff\" | \"stamp\" | \"star\" | \"star-and-crescent\" | \"star-christmas\" | \"star-exclamation\" | \"star-half\" | \"star-half-alt\" | \"star-of-david\" | \"star-of-life\" | \"star-shooting\" | \"starfighter\" | \"starfighter-alt\" | \"stars\" | \"starship\" | \"starship-freighter\" | \"steak\" | \"steering-wheel\" | \"step-backward\" | \"step-forward\" | \"stethoscope\" | \"sticky-note\" | \"stocking\" | \"stomach\" | \"stop\" | \"stop-circle\" | \"stopwatch\" | \"stopwatch-20\" | \"store\" | \"store-alt\" | \"store-alt-slash\" | \"store-slash\" | \"stream\" | \"street-view\" | \"stretcher\" | \"strikethrough\" | \"stroopwafel\" | \"subscript\" | \"subway\" | \"suitcase\" | \"suitcase-rolling\" | \"sun\" | \"sun-cloud\" | \"sun-dust\" | \"sun-haze\" | \"sunglasses\" | \"sunrise\" | \"sunset\" | \"superscript\" | \"surprise\" | \"swatchbook\" | \"swimmer\" | \"swimming-pool\" | \"sword\" | \"sword-laser\" | \"sword-laser-alt\" | \"swords\" | \"swords-laser\" | \"synagogue\" | \"sync\" | \"sync-alt\" | \"syringe\" | \"table\" | \"table-tennis\" | \"tablet\" | \"tablet-alt\" | \"tablet-android\" | \"tablet-android-alt\" | \"tablet-rugged\" | \"tablets\" | \"tachometer\" | \"tachometer-alt\" | \"tachometer-alt-average\" | \"tachometer-alt-fast\" | \"tachometer-alt-fastest\" | \"tachometer-alt-slow\" | \"tachometer-alt-slowest\" | \"tachometer-average\" | \"tachometer-fast\" | \"tachometer-fastest\" | \"tachometer-slow\" | \"tachometer-slowest\" | \"taco\" | \"tag\" | \"tags\" | \"tally\" | \"tanakh\" | \"tape\" | \"tasks\" | \"tasks-alt\" | \"taxi\" | \"teeth\" | \"teeth-open\" | \"telescope\" | \"temperature-down\" | \"temperature-frigid\" | \"temperature-high\" | \"temperature-hot\" | \"temperature-low\" | \"temperature-up\" | \"tenge\" | \"tennis-ball\" | \"terminal\" | \"text\" | \"text-height\" | \"text-size\" | \"text-width\" | \"th\" | \"th-large\" | \"th-list\" | \"theater-masks\" | \"thermometer\" | \"thermometer-empty\" | \"thermometer-full\" | \"thermometer-half\" | \"thermometer-quarter\" | \"thermometer-three-quarters\" | \"theta\" | \"thumbs-down\" | \"thumbs-up\" | \"thumbtack\" | \"thunderstorm\" | \"thunderstorm-moon\" | \"thunderstorm-sun\" | \"ticket\" | \"ticket-alt\" | \"tilde\" | \"times\" | \"times-circle\" | \"times-hexagon\" | \"times-octagon\" | \"times-square\" | \"tint\" | \"tint-slash\" | \"tire\" | \"tire-flat\" | \"tire-pressure-warning\" | \"tire-rugged\" | \"tired\" | \"toggle-off\" | \"toggle-on\" | \"toilet\" | \"toilet-paper\" | \"toilet-paper-alt\" | \"toilet-paper-slash\" | \"tombstone\" | \"tombstone-alt\" | \"toolbox\" | \"tools\" | \"tooth\" | \"toothbrush\" | \"torah\" | \"torii-gate\" | \"tornado\" | \"tractor\" | \"trademark\" | \"traffic-cone\" | \"traffic-light\" | \"traffic-light-go\" | \"traffic-light-slow\" | \"traffic-light-stop\" | \"trailer\" | \"train\" | \"tram\" | \"transgender\" | \"transgender-alt\" | \"transporter\" | \"transporter-1\" | \"transporter-2\" | \"transporter-3\" | \"transporter-empty\" | \"trash\" | \"trash-alt\" | \"trash-restore\" | \"trash-restore-alt\" | \"trash-undo\" | \"trash-undo-alt\" | \"treasure-chest\" | \"tree\" | \"tree-alt\" | \"tree-christmas\" | \"tree-decorated\" | \"tree-large\" | \"tree-palm\" | \"trees\" | \"triangle\" | \"triangle-music\" | \"trophy\" | \"trophy-alt\" | \"truck\" | \"truck-container\" | \"truck-couch\" | \"truck-loading\" | \"truck-monster\" | \"truck-moving\" | \"truck-pickup\" | \"truck-plow\" | \"truck-ramp\" | \"trumpet\" | \"tshirt\" | \"tty\" | \"turkey\" | \"turntable\" | \"turtle\" | \"tv\" | \"tv-alt\" | \"tv-music\" | \"tv-retro\" | \"typewriter\" | \"ufo\" | \"ufo-beam\" | \"umbrella\" | \"umbrella-beach\" | \"underline\" | \"undo\" | \"undo-alt\" | \"unicorn\" | \"union\" | \"universal-access\" | \"university\" | \"unlink\" | \"unlock\" | \"unlock-alt\" | \"upload\" | \"usb-drive\" | \"usd-circle\" | \"usd-square\" | \"user\" | \"user-alien\" | \"user-alt\" | \"user-alt-slash\" | \"user-astronaut\" | \"user-chart\" | \"user-check\" | \"user-circle\" | \"user-clock\" | \"user-cog\" | \"user-cowboy\" | \"user-crown\" | \"user-edit\" | \"user-friends\" | \"user-graduate\" | \"user-hard-hat\" | \"user-headset\" | \"user-injured\" | \"user-lock\" | \"user-md\" | \"user-md-chat\" | \"user-minus\" | \"user-music\" | \"user-ninja\" | \"user-nurse\" | \"user-plus\" | \"user-robot\" | \"user-secret\" | \"user-shield\" | \"user-slash\" | \"user-tag\" | \"user-tie\" | \"user-times\" | \"user-unlock\" | \"user-visor\" | \"users\" | \"users-class\" | \"users-cog\" | \"users-crown\" | \"users-medical\" | \"users-slash\" | \"utensil-fork\" | \"utensil-knife\" | \"utensil-spoon\" | \"utensils\" | \"utensils-alt\" | \"vacuum\" | \"vacuum-robot\" | \"value-absolute\" | \"vector-square\" | \"venus\" | \"venus-double\" | \"venus-mars\" | \"vest\" | \"vest-patches\" | \"vhs\" | \"vial\" | \"vials\" | \"video\" | \"video-plus\" | \"video-slash\" | \"vihara\" | \"violin\" | \"virus\" | \"virus-slash\" | \"viruses\" | \"voicemail\" | \"volcano\" | \"volleyball-ball\" | \"volume\" | \"volume-down\" | \"volume-mute\" | \"volume-off\" | \"volume-slash\" | \"volume-up\" | \"vote-nay\" | \"vote-yea\" | \"vr-cardboard\" | \"wagon-covered\" | \"walker\" | \"walkie-talkie\" | \"walking\" | \"wallet\" | \"wand\" | \"wand-magic\" | \"warehouse\" | \"warehouse-alt\" | \"washer\" | \"watch\" | \"watch-calculator\" | \"watch-fitness\" | \"water\" | \"water-lower\" | \"water-rise\" | \"wave-sine\" | \"wave-square\" | \"wave-triangle\" | \"waveform\" | \"waveform-path\" | \"webcam\" | \"webcam-slash\" | \"weight\" | \"weight-hanging\" | \"whale\" | \"wheat\" | \"wheelchair\" | \"whistle\" | \"wifi\" | \"wifi-1\" | \"wifi-2\" | \"wifi-slash\" | \"wind\" | \"wind-turbine\" | \"wind-warning\" | \"window\" | \"window-alt\" | \"window-close\" | \"window-frame\" | \"window-frame-open\" | \"window-maximize\" | \"window-minimize\" | \"window-restore\" | \"windsock\" | \"wine-bottle\" | \"wine-glass\" | \"wine-glass-alt\" | \"won-sign\" | \"wreath\" | \"wrench\" | \"x-ray\" | \"yen-sign\" | \"yin-yang\"",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconPrefix",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"far\" | \"fal\" | \"fas\" | \"fad\"",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconRotation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"rotate-90\" | \"rotate-180\" | \"rotate-270\" | \"flip-horizontal\" | \"flip-vertical\" | \"flip-both\"",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"lg\" | \"2x\" | \"3x\" | \"5x\" | \"7x\" | \"10x\"",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconStyle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"solid\" | \"regular\" | \"light\" | \"duotone\"",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IconName | IconInputs",
                "file": "src/app/components/icon/icon.component.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "LetterValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"*\"",
                "file": "src/app/classes/tile/tile.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Multiplier",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ScoreMultiplier | null",
                "file": "src/app/classes/square/square.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "MultiplierValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"2\" | \"3\"",
                "file": "src/app/classes/square/score-multiplier.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RackTile",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/components/tile-rack/tile-rack.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "UpdateVirtualPlayerDialogParameters",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<VirtualPlayer | isDefault>",
                "file": "src/app/components/update-virtual-player-dialog/update-virtual-player.component.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "UpdateVirtualPlayersDialogParameters",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<VirtualPlayer | isDefault>",
                "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "ActionType",
                "childs": [
                    {
                        "name": "PLACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "placer"
                    },
                    {
                        "name": "EXCHANGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "échanger"
                    },
                    {
                        "name": "PASS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "passer"
                    },
                    {
                        "name": "RESERVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "réserve"
                    },
                    {
                        "name": "HELP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "aide"
                    },
                    {
                        "name": "HINT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "indice"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/actions/action-data.ts"
            },
            {
                "name": "AdminTabs",
                "childs": [
                    {
                        "name": "GameHistory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "Dictionary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "VirtualPlayer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "HighScores",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/pages/admin-page/admin-page.component.ts"
            },
            {
                "name": "COLORS",
                "childs": [
                    {
                        "name": "Red",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "#ff0000"
                    },
                    {
                        "name": "Blue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "#0000ff"
                    },
                    {
                        "name": "Gray",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rgb(214, 216, 214)"
                    },
                    {
                        "name": "Beige",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "#fff8e7"
                    },
                    {
                        "name": "Letter2x",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rgb(160, 213, 243)"
                    },
                    {
                        "name": "Word2x",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rgb(245, 173, 170)"
                    },
                    {
                        "name": "Letter3x",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rgb(34, 162, 236)"
                    },
                    {
                        "name": "Word3x",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rgb(248, 100, 95)"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/colors-constants.ts"
            },
            {
                "name": "CommandExceptionMessages",
                "childs": [
                    {
                        "name": "BadSyntax",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "La commande ne respecte pas la syntaxe requise."
                    },
                    {
                        "name": "InvalidEntry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Cette commande n'est pas reconnue. Entrez !aide pour connaitre les commandes valides."
                    },
                    {
                        "name": "ImpossibleCommand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Cette commande est impossible à réaliser."
                    },
                    {
                        "name": "DontHaveTiles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Vous n'avez pas les tuiles requises."
                    },
                    {
                        "name": "PositionFormat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "La position doit être de format _‹a-o›‹1-15›‹h/v›_."
                    },
                    {
                        "name": "NotYourTurn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Ce n'est pas votre tour de jouer."
                    },
                    {
                        "name": "GameOver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "La commande est impossible car la partie est terminée."
                    },
                    {
                        "name": "ExchangeRequireLowercaseLetters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Les lettres à échanger doivent être en minuscule."
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/command-exception-messages.ts"
            },
            {
                "name": "ConnectionState",
                "childs": [
                    {
                        "name": "Loading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Loading"
                    },
                    {
                        "name": "Connected",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Connected"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/connection-state-service/connection-state.ts"
            },
            {
                "name": "DictionariesState",
                "childs": [
                    {
                        "name": "Ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ready"
                    },
                    {
                        "name": "Loading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "loading"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/admin/dictionaries.ts"
            },
            {
                "name": "Direction",
                "childs": [
                    {
                        "name": "Forward",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Backward",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/board-navigator/direction.ts"
            },
            {
                "name": "GameHistoryState",
                "childs": [
                    {
                        "name": "Ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ready"
                    },
                    {
                        "name": "Loading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "loading"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/admin/admin-game-history.ts"
            },
            {
                "name": "GameMode",
                "childs": [
                    {
                        "name": "Solo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Solo"
                    },
                    {
                        "name": "Multiplayer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Multijoueur"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/game-mode.ts"
            },
            {
                "name": "GameType",
                "childs": [
                    {
                        "name": "Classic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Classique"
                    },
                    {
                        "name": "LOG2990",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LOG2990"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/game-type.ts"
            },
            {
                "name": "InitializeState",
                "childs": [
                    {
                        "name": "Loading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Chargement de l'application"
                    },
                    {
                        "name": "Ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "L'application est prête"
                    },
                    {
                        "name": "ServerNotReachable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Impossible d'établir une connexion avec le serveur"
                    },
                    {
                        "name": "DatabaseNotReachable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Impossible d'établir une connexion avec la base de donnée"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/connection-state-service/connection-state.ts"
            },
            {
                "name": "ModifyDictionaryComponentIcons",
                "childs": [
                    {
                        "name": "SuccessIcon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "check"
                    },
                    {
                        "name": "ErrorIcon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times"
                    },
                    {
                        "name": "NoIcon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types.ts"
            },
            {
                "name": "MultiplierEffect",
                "childs": [
                    {
                        "name": "LETTER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Lettre"
                    },
                    {
                        "name": "WORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Mot"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/square/score-multiplier.ts"
            },
            {
                "name": "ObjectiveState",
                "childs": [
                    {
                        "name": "NotCompleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NotCompleted"
                    },
                    {
                        "name": "Completed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Completed"
                    },
                    {
                        "name": "CompletedByOpponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CompletedByOpponent"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/objectives/objective-state.ts"
            },
            {
                "name": "Orientation",
                "childs": [
                    {
                        "name": "Horizontal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Vertical",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/actions/orientation.ts"
            },
            {
                "name": "PositiveFeedback",
                "childs": [
                    {
                        "name": "DictionaryUpdated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Le dictionnaire a été mis à jour."
                    },
                    {
                        "name": "DictionaryAdded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Le dictionnaire a été ajouté avec succès."
                    },
                    {
                        "name": "DictionaryDeleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Le dictionnaire a été supprimé avec succès."
                    },
                    {
                        "name": "DictionariesDeleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "La liste de dictionnaires a été réinitialisée."
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/dictionaries-components.ts"
            },
            {
                "name": "PositiveFeedback",
                "childs": [
                    {
                        "name": "VirtualPlayerUpdated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Le joueur a été mis à jour."
                    },
                    {
                        "name": "VirtualPlayerCreated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Le joueur a été ajouté avec succès."
                    },
                    {
                        "name": "VirtualPlayerDeleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Le joueur a été supprimé avec succès."
                    },
                    {
                        "name": "VirtualPlayersDeleted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "La liste de joueurs a été réinitialisée."
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/virtual-players-components-constants.ts"
            },
            {
                "name": "TileRackSelectType",
                "childs": [
                    {
                        "name": "Exchange",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exchange"
                    },
                    {
                        "name": "Move",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "move"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/constants/tile-rack-select-type.ts"
            },
            {
                "name": "UpdateDictionaryComponentIcons",
                "childs": [
                    {
                        "name": "SuccessIcon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "check"
                    },
                    {
                        "name": "ErrorIcon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times"
                    },
                    {
                        "name": "NoIcon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/update-virtual-player-dialog/update-virtual-player.component.types.ts"
            },
            {
                "name": "UploadState",
                "childs": [
                    {
                        "name": "Ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ready"
                    },
                    {
                        "name": "Init",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "init"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/upload-dictionary/upload-dictionary.component.types.ts"
            },
            {
                "name": "VirtualPlayerLevel",
                "childs": [
                    {
                        "name": "Beginner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Débutant"
                    },
                    {
                        "name": "Expert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Expert"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/classes/player/virtual-player-level.ts"
            },
            {
                "name": "VirtualPlayersComponentState",
                "childs": [
                    {
                        "name": "Ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ready"
                    },
                    {
                        "name": "Loading",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "loading"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts"
            }
        ],
        "groupedVariables": {
            "src/app/classes/actions/action-data.ts": [
                {
                    "name": "ACTION_COMMAND_INDICATOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/actions/action-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'!'"
                }
            ],
            "src/app/constants/services-errors.ts": [
                {
                    "name": "ACTIVE_PLAYER_NOT_FOUND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Aucun joueur actif trouvé'"
                },
                {
                    "name": "DB_CONNECTED_ENDPOINT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`${environment.serverUrl}/database/is-connected`"
                },
                {
                    "name": "DEFAULT_STATE_VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InitializeState",
                    "defaultValue": "InitializeState.Loading"
                },
                {
                    "name": "EXPIRED_COOKIE_AGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'-99999999'"
                },
                {
                    "name": "INVALID_PAYLOAD_FOR_ACTION_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Payload invalide pour ce type de commande'"
                },
                {
                    "name": "INVALID_ROUND_DATA_PLAYER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Impossible de convertir le round data avec ce joueur'"
                },
                {
                    "name": "IS_NOT_BEHAVIOR_OBJECT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Le Subject n'est pas un BehaviourSubject et n'a donc pas de valeur\""
                },
                {
                    "name": "MISSING_PLAYER_DATA_TO_INITIALIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Certaines informations sont manquantes pour créer le joueur'"
                },
                {
                    "name": "NO_CURRENT_ROUND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Aucune round n'est active présentement\""
                },
                {
                    "name": "NO_LOCAL_PLAYER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Aucun joueur local n'a encore été défini\""
                },
                {
                    "name": "NO_START_GAME_TIME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"La partie n'et pas encore commencée, alors il n'y a pas encore de temps de départ\""
                },
                {
                    "name": "NO_SUBJECT_FOR_EVENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Il n'y a aucun Subject associé à l'événement demandé\""
                },
                {
                    "name": "PLAYER_NUMBER_INVALID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(playerNumber: number) => `Il n'y a pas de joueur #${playerNumber} dans la partie`"
                },
                {
                    "name": "SOCKET_ID_UNDEFINED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"L'identifiant du socket n'est pas défini\""
                },
                {
                    "name": "WAIT_FOR_COMMAND_CONFIRMATION_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/services-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(gameId: string): Message => {\n    return {\n        content: \"Veuillez attendre la confirmation de votre commande précédente avant d'en envoyer une autre.\",\n        senderId: SYSTEM_ID,\n        gameId,\n    };\n}"
                }
            ],
            "src/app/constants/components-constants.ts": [
                {
                    "name": "ADMIN_RESET_DICTIONARY_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Voulez-vous réinitialiser les dictionnaires?'"
                },
                {
                    "name": "ADMIN_RESET_HIGH_SCORE_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Voulez-vous réinitialiser les meilleurs scores?'"
                },
                {
                    "name": "ADMIN_RESET_HISTORY_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Voulez-vous réinitialiser l'historique de partie?\""
                },
                {
                    "name": "ADMIN_RESET_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Cette opération est irréversible.'"
                },
                {
                    "name": "ADMIN_RESET_VIRTUAL_PLAYER_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Voulez-vous réinitialiser les joueurs virtuels?'"
                },
                {
                    "name": "ARROW_LEFT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ArrowLeft'"
                },
                {
                    "name": "ARROW_RIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ArrowRight'"
                },
                {
                    "name": "ASCENDING_COLUMN_SORTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'asc'"
                },
                {
                    "name": "BACKSPACE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Backspace'"
                },
                {
                    "name": "CANCEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Annuler'"
                },
                {
                    "name": "CANCEL_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "defaultValue": "'ban'"
                },
                {
                    "name": "CODE_HTML_TAG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'CODE'"
                },
                {
                    "name": "DEFAULT_DICTIONARIES_COLUMNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayDictionaryKeys[]",
                    "defaultValue": "['title', 'description', 'actions']"
                },
                {
                    "name": "DEFAULT_GAME_HISTORY_COLUMNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayGameHistoryKeys[]",
                    "defaultValue": "[\n    'startDate',\n    'startTime',\n    'duration',\n    'hasBeenAbandoned',\n    'gameType',\n    'gameMode',\n    'player1Name',\n    'player1Score',\n    'player2Name',\n    'player2Score',\n]"
                },
                {
                    "name": "DEFAULT_HIGH_SCORE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleHighScore",
                    "defaultValue": "{ name: 'player1', gameType: GameType.Classic, score: 0 }"
                },
                {
                    "name": "DICTIONARIES_COLUMNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    title: 'Nom',\n    description: 'Description',\n    actions: '',\n}"
                },
                {
                    "name": "ENTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Enter'"
                },
                {
                    "name": "ERROR_SNACK_BAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ duration: SNACK_BAR_ERROR_DURATION, panelClass: ['error'] }"
                },
                {
                    "name": "ESCAPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Escape'"
                },
                {
                    "name": "GAME_HISTORY_COLUMNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayGameHistoryColumns",
                    "defaultValue": "{\n    startDate: 'Date de début',\n    startTime: 'Heure de début',\n    endDate: 'Date de fin',\n    endTime: 'Heure de fin',\n    duration: 'Durée',\n    hasBeenAbandoned: 'Partie abandonnée',\n    gameType: 'Type de partie',\n    gameMode: 'Mode de jeu',\n    player1Data: 'Joueur 1',\n    player1Name: 'Nom joueur 1',\n    player1Score: 'Pointage joueur 1',\n    player2Data: 'Joueur 2',\n    player2Name: 'Nom joueur 2',\n    player2Score: 'Pointage joueur 2',\n}"
                },
                {
                    "name": "IS_CLICKABLE_CLASS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'isClickable'"
                },
                {
                    "name": "KEYDOWN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'keydown'"
                },
                {
                    "name": "LOCAL_PLAYER_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName[]",
                    "defaultValue": "['user-astronaut', 'user-cowboy', 'user-ninja', 'user-crown']"
                },
                {
                    "name": "NOT_FOUND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "-1"
                },
                {
                    "name": "OPPONENT_COMPLETED_THIS_OBJECTIVE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(isPublic: boolean) =>\n    isPublic ? 'Votre adversaire a complété cet objectif avant vous' : 'Votre adversaire a complété cet objectif'"
                },
                {
                    "name": "PERCENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "100"
                },
                {
                    "name": "REINITIALIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Réinitialiser'"
                },
                {
                    "name": "REINITIALIZE_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "defaultValue": "'history'"
                },
                {
                    "name": "SUCCESS_SNACK_BAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ duration: SNACK_BAR_SUCCESS_DURATION, panelClass: ['success'] }"
                },
                {
                    "name": "VIRTUAL_PLAYERS_COLUMNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    name: 'Nom',\n    actions: '',\n}"
                },
                {
                    "name": "YOU_COMPLETED_THIS_OBJECTIVE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/components-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Vous avez complété cet objectif!'"
                }
            ],
            "src/app/components/tile/tile.component.ts": [
                {
                    "name": "AMOUNT_OF_TILE_BACKGROUND_IMAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/tile/tile.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "4"
                }
            ],
            "src/app/services/input-parser-service/input-parser.service.ts": [
                {
                    "name": "ASCII_VALUE_OF_LOWERCASE_A",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/input-parser-service/input-parser.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "97"
                }
            ],
            "src/app/constants/command-exception-messages.ts": [
                {
                    "name": "BAD_SYNTAX_MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/command-exception-messages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<ActionType, string>([\n    [ActionType.PLACE, 'La commande placer doit suivre le format _!placer ‹position› ‹lettres›_.'],\n    [ActionType.EXCHANGE, 'La commande échanger doit suivre le format _!échanger ‹lettres›_.'],\n    [ActionType.PASS, 'La commande passer doit suivre le format _!passer_.'],\n    [ActionType.HELP, 'La commande passer doit suivre le format _!aide_.'],\n    [ActionType.HINT, 'La commande passer doit suivre le format _!indice_.'],\n    [ActionType.RESERVE, 'La commande passer doit suivre le format _!réserve_.'],\n])"
                },
                {
                    "name": "PLAYER_NOT_FOUND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/command-exception-messages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Current player could not be found'"
                }
            ],
            "src/app/constants/game-constants.ts": [
                {
                    "name": "BLANK_TILE_LETTER_VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue",
                    "defaultValue": "'*'"
                },
                {
                    "name": "BOARD_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "15"
                },
                {
                    "name": "DEFAULT_ORIENTATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Orientation.Horizontal"
                },
                {
                    "name": "DEFAULT_PLAYER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Player(DEFAULT_PLAYER_ID, 'name', [])"
                },
                {
                    "name": "DEFAULT_PLAYER_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'id'"
                },
                {
                    "name": "DEFAULT_SQUARE_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "COLORS.Beige"
                },
                {
                    "name": "DEFAULT_SQUARE_VIEW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new SquareView(UNDEFINED_SQUARE, SQUARE_SIZE)"
                },
                {
                    "name": "EXPECTED_COMMAND_WORD_COUNT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<ActionType, number>([\n    [ActionType.PLACE, 3],\n    [ActionType.EXCHANGE, 2],\n    [ActionType.PASS, 1],\n    [ActionType.HINT, 1],\n    [ActionType.HELP, 1],\n    [ActionType.RESERVE, 1],\n])"
                },
                {
                    "name": "GAME_ID_COOKIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'gameId'"
                },
                {
                    "name": "LETTER_VALUES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetterValue[]",
                    "defaultValue": "[\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    '*',\n]"
                },
                {
                    "name": "LOCAL_PLAYER_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'me'"
                },
                {
                    "name": "MARGIN_COLUMN_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "MAX_COL_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "14"
                },
                {
                    "name": "MAX_INPUT_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "512"
                },
                {
                    "name": "MAX_LOCATION_COMMAND_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3"
                },
                {
                    "name": "MAX_ROW_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "14"
                },
                {
                    "name": "MAX_TILES_PER_PLAYER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "7"
                },
                {
                    "name": "MIN_COL_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "MIN_LOCATION_COMMAND_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "MIN_ROW_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "MINIMUM_TIMER_TIME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.01"
                },
                {
                    "name": "ON_YOUR_TURN_ACTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ActionType.PLACE, ActionType.EXCHANGE, ActionType.PASS, ActionType.HINT]"
                },
                {
                    "name": "OPPONENT_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'opponent'"
                },
                {
                    "name": "PLAYER_1_INDEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "PLAYER_2_INDEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "SECONDS_TO_MILLISECONDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1000"
                },
                {
                    "name": "SOCKET_ID_COOKIE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'socketId'"
                },
                {
                    "name": "SQUARE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vec2",
                    "defaultValue": "{ x: 1, y: 1 }"
                },
                {
                    "name": "SYSTEM_ERROR_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'system-error'"
                },
                {
                    "name": "SYSTEM_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'system'"
                },
                {
                    "name": "TIME_TO_RECONNECT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5"
                },
                {
                    "name": "UNDEFINED_GRID_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vec2",
                    "defaultValue": "{ x: -1, y: -1 }"
                },
                {
                    "name": "UNDEFINED_SQUARE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Square",
                    "defaultValue": "{\n    tile: null,\n    position: { row: -1, column: -1 },\n    scoreMultiplier: null,\n    wasMultiplierUsed: false,\n    isCenter: false,\n}"
                },
                {
                    "name": "UNDEFINED_SQUARE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vec2",
                    "defaultValue": "{ x: -1, y: -1 }"
                },
                {
                    "name": "UNDEFINED_TILE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{ letter: '?', value: -1 }"
                },
                {
                    "name": "VALID_MULTIPLIERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/game-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "defaultValue": "[2, 3]"
                }
            ],
            "src/app/constants/component-errors.ts": [
                {
                    "name": "BUTTON_MUST_HAVE_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Les boutons du DefaultDialog doivent avoir un contenu'"
                },
                {
                    "name": "CANNOT_REMOVE_UNUSED_TILE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Impossible de retirer une tuile qui n'est pas utilisée\""
                },
                {
                    "name": "DIALOG_BUTTONS_MUST_BE_AN_ARRAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Les boutons du DefaultDialog doivent être un tableau'"
                },
                {
                    "name": "DIALOG_MUST_HAVE_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Le DefaultDialog doit avoir un titre de type string'"
                },
                {
                    "name": "DICTIONARY_DELETED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Le dictionnaire choisi n'est plus disponible, veuillez en choisir un autre.\""
                },
                {
                    "name": "DICTIONARY_REQUIRED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Vous devez choisir un dictionnaire pour jouer.'"
                },
                {
                    "name": "NO_LOBBY_CAN_BE_JOINED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Aucun lobby ne peut être rejoint'"
                },
                {
                    "name": "SQUARE_VIEW_COLOR_UNDEFINED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/component-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Impossible d'initialiser la taille de la case\""
                }
            ],
            "src/app/utils/action-payload-to-string/action-payload-to-string.ts": [
                {
                    "name": "COLUMN_INDEX_ADJUSTMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/action-payload-to-string/action-payload-to-string.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/constants/dialogs-constants.ts": [
                {
                    "name": "CREATE_VIRTUAL_PLAYER_DIALOG_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dialogs-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'315px'"
                },
                {
                    "name": "CREATE_VIRTUAL_PLAYER_DIALOG_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dialogs-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'450px'"
                },
                {
                    "name": "UPDATE_VIRTUAL_PLAYER_DIALOG_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dialogs-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'300px'"
                },
                {
                    "name": "UPDATE_VIRTUAL_PLAYER_DIALOG_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dialogs-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'450px'"
                }
            ],
            "src/app/pages/admin-page/admin-page.component.ts": [
                {
                    "name": "DEFAULT_ADMIN_TAB",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/admin-page/admin-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AdminTabs.GameHistory"
                }
            ],
            "src/app/constants/controller-test-constants.ts": [
                {
                    "name": "DEFAULT_GAME_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controller-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'42069'"
                },
                {
                    "name": "DEFAULT_LEAVER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controller-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'PatLePerdant'"
                },
                {
                    "name": "DEFAULT_OPPONENT_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controller-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'steve'"
                },
                {
                    "name": "DEFAULT_SOCKET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controller-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'IDa'"
                },
                {
                    "name": "TEST_DICTIONARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controller-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictionarySummary",
                    "defaultValue": "{ id: 'id', title: 'title', description: 'description', isDefault: false }"
                }
            ],
            "src/app/constants/pages-constants.ts": [
                {
                    "name": "DEFAULT_LOBBY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    lobbyId: '',\n    hostName: 'host',\n    gameType: GameType.Classic,\n    gameMode: GameMode.Multiplayer,\n    maxRoundTime: 60,\n    dictionary: {\n        title: 'Français',\n        description: '',\n        id: '',\n        isDefault: true,\n    },\n}"
                },
                {
                    "name": "DEFAULT_TIMER_VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                },
                {
                    "name": "DIALOG_ABANDON_BUTTON_CONFIRM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Abandonner la partie'"
                },
                {
                    "name": "DIALOG_ABANDON_BUTTON_CONTINUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Continuer la partie'"
                },
                {
                    "name": "DIALOG_ABANDON_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Voulez-vous vraiment ABANDONNER?'"
                },
                {
                    "name": "DIALOG_ABANDON_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Abandonner la partie'"
                },
                {
                    "name": "DIALOG_BUTTON_CONTENT_REJECTED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Retourner en attente.'"
                },
                {
                    "name": "DIALOG_BUTTON_CONTENT_RETURN_LOBBY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Retourner à la sélection de parties.'"
                },
                {
                    "name": "DIALOG_CANCEL_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' a annulé la partie.'"
                },
                {
                    "name": "DIALOG_CANCEL_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Partie annulée'"
                },
                {
                    "name": "DIALOG_CANCELED_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'La partie a été annulée'"
                },
                {
                    "name": "DIALOG_CANCELED_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Partie annulée'"
                },
                {
                    "name": "DIALOG_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\" a quitté le salon. Veuillez patientez le temps qu'un autre joueur veuille vous affronter.\""
                },
                {
                    "name": "DIALOG_END_OF_GAME_CLOSE_BUTTON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Rester sur cette page'"
                },
                {
                    "name": "DIALOG_END_OF_GAME_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(isLocalPlayerWinner: boolean) =>\n    isLocalPlayerWinner ? 'Bravo pour votre victoire!' : 'Meilleure chance la prochaine fois!'"
                },
                {
                    "name": "DIALOG_END_OF_GAME_EXIT_BUTTON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Retourner à l'acceuil\""
                },
                {
                    "name": "DIALOG_END_OF_GAME_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(isLocalPlayerWinner: boolean) => `Fin de la partie - ${isLocalPlayerWinner ? 'Victoire' : 'Défaite'}`"
                },
                {
                    "name": "DIALOG_FULL_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'La partie est déjà remplie'"
                },
                {
                    "name": "DIALOG_FULL_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Partie Remplie'"
                },
                {
                    "name": "DIALOG_NO_ACTIVE_GAME_BUTTON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Retour à la page d'accueil\""
                },
                {
                    "name": "DIALOG_NO_ACTIVE_GAME_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Vous n'avez aucune partie en cours. Veuillez en joindre ou en créer une.\""
                },
                {
                    "name": "DIALOG_NO_ACTIVE_GAME_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Aucune partie en cours'"
                },
                {
                    "name": "DIALOG_QUIT_BUTTON_CONFIRM",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Quitter la partie'"
                },
                {
                    "name": "DIALOG_QUIT_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Voulez-vous vraiment quitter la partie?'"
                },
                {
                    "name": "DIALOG_QUIT_STAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Rester dans la partie'"
                },
                {
                    "name": "DIALOG_QUIT_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Quitter la partie'"
                },
                {
                    "name": "DIALOG_REJECT_CONTENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' vous a rejeté de la partie.'"
                },
                {
                    "name": "DIALOG_REJECT_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Rejeté'"
                },
                {
                    "name": "DIALOG_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Attention!'"
                },
                {
                    "name": "HOST_WAITING_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"En attente d'un adversaire\""
                },
                {
                    "name": "KEEP_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "MAX_CONFETTI_COUNT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "150"
                },
                {
                    "name": "MAXIMUM_TIMER_VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "300"
                },
                {
                    "name": "MIN_CONFETTI_COUNT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "100"
                },
                {
                    "name": "MINIMUM_TIMER_VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "30"
                },
                {
                    "name": "OPPONENT_FOUND_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "' a rejoint votre partie.'"
                },
                {
                    "name": "TIMER_VALUE_INCREMENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/pages-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "30"
                }
            ],
            "src/app/constants/dictionaries-components.ts": [
                {
                    "name": "DELETE_COMPONENT_TITLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionaries-components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Supprimer un dictionnaire'"
                },
                {
                    "name": "FILE_NOT_DICTIONARY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionaries-components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Le fichier ne respecte pas le format {'title', 'description','words'}.\""
                },
                {
                    "name": "SNACK_BAR_ERROR_DURATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionaries-components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "100000"
                },
                {
                    "name": "SNACK_BAR_SUCCESS_DURATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionaries-components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2000"
                },
                {
                    "name": "WRONG_FILE_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionaries-components.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Le fichier n'est pas un fichier JSON.\""
                }
            ],
            "src/app/constants/dictionary-name-validation.ts": [
                {
                    "name": "DICTIONARY_DESCRIPTION_VALIDATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    minLength: MIN_DESCRIPTION_LENGTH,\n    maxLength: MAX_DESCRIPTION_LENGTH,\n    rule: VALIDATION_RULE,\n}"
                },
                {
                    "name": "DICTIONARY_NAME_VALIDATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    minLength: MIN_NAME_LENGTH,\n    maxLength: MAX_NAME_LENGTH,\n    rule: VALIDATION_RULE,\n}"
                },
                {
                    "name": "MAX_DESCRIPTION_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "80"
                },
                {
                    "name": "MAX_NAME_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "30"
                },
                {
                    "name": "MIN_DESCRIPTION_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "MIN_NAME_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "VALIDATION_RULE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"^([0-9A-Za-zÀ-ÖØ-öø-ÿ]+[ '\\\\-_]{0,1})*$\""
                }
            ],
            "src/app/constants/session-storage-constants.ts": [
                {
                    "name": "DICTIONARY_NAME_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/session-storage-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dictionaryName'"
                },
                {
                    "name": "MESSAGE_STORAGE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/session-storage-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'localGameMessages'"
                },
                {
                    "name": "PLAYER_NAME_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/session-storage-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'playerName'"
                },
                {
                    "name": "TIMER_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/session-storage-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'timer'"
                }
            ],
            "src/app/constants/dictionary-service-constants.ts": [
                {
                    "name": "DOWNLOAD_ELEMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionary-service-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'a'"
                }
            ],
            "src/app/utils/emoji/emoji.ts": [
                {
                    "name": "EMOJI_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/emoji/emoji.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])+$/"
                },
                {
                    "name": "onlyHasEmoji",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/emoji/emoji.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(str: string): boolean => {\n    return EMOJI_REGEX.test(str);\n}"
                }
            ],
            "src/app/components/chatbox-message/chatbox-message.component.stories.ts": [
                {
                    "name": "empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChatboxMessageComponent>",
                    "defaultValue": "(args: ChatboxMessageComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n    serverUrlWebsocket: 'http://localhost:3000/',\n    serverUrl: 'http://localhost:3000/api',\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n    // serverUrl: 'http://ec2-15-222-3-253.ca-central-1.compute.amazonaws.com:3000/api',\n    // serverUrlWebsocket: 'http://ec2-15-222-3-253.ca-central-1.compute.amazonaws.com:3000',\n    serverUrl: 'http://api.scrabble.cfstcyr.com/api',\n    serverUrlWebsocket: 'http://api.scrabble.cfstcyr.com',\n}"
                }
            ],
            "src/app/constants/fun-facts-scrabble-constants.ts": [
                {
                    "name": "FUN_FACTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/fun-facts-scrabble-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n    'MONOPRIX, UNIPRIX et PRISUNIC : ces noms déposés de magasins sont considérés comme des noms communs et donc acceptés au Scrabble.',\n\n    'Bien que les mots DROÏDE et CYBORG soient issus de la science-fiction, ils sont tous les deux valables au Scrabble.',\n\n    \"Le scrabble de huit lettres le plus cher est WHISKEYS placé sur deux cases « Mot compte triple » et avec le K placé sur la case \\\n    « Lettre compte double ». Placé ainsi, ce mot rapporte 482 points. Ceci s'appelle un nonuple, car le score du mot est multiplié \\\n    par trois à deux reprises, c'est-à-dire par neuf.\",\n\n    \"En 1931, le nom original de Scrabble était « Lexico ». Elle n'avait pas de plateau et se jouait uniquement avec des tuiles.\",\n\n    \"L'inventeur du Scrabble, Alfred Butts, a décidé de la fréquence et de la distribution des lettres en analysant la première \\\n    page du New York Times.\",\n\n    'Le jeu Scrabble est vendu dans 121 pays et est disponible en 31 langues différentes.',\n\n    'Au Scrabble anglophone, le joueur compétition Benjamin Woo a déjà récolté 1782 en un seul tour. Pour obtenir ces points, il \\\n    a formé le mot OXYPHENBUTAZONE dans le haut du tableau, frappant trois cases « Mot compte triple » tout en faisant sept mots \\\n    croisés vers le bas.',\n\n    \"Les jeux de Scrabble n'ont pas tous le même nombre de tuiles! La plupart des éditions possèdent 100 jetons, comme la \\\n    version anglaise originale. L'édition en français en comporte 102, et celle en arménien en compte 146!\",\n\n    \"La version portugaise du jeu Scrabble n'a pas de K, de W ni de Y, mais possède un Ç.\",\n\n    \"En 1985, deux militaires ont joué au Scrabble pendant cinq jours consécutifs pour passer le temps alors qu'ils étaient tous \\\n    les deux piégés dans une crevasse en Antarctique.\",\n\n    'Dans la version francophone, il y a 81 mots de 2 lettres acceptés : aa, ah, ai, aï, an, as, au, ay, ba, bê, bi, bu, çà, ça, ce, \\\n    ci, da, de, dé, do, du, dû, dû, eh, en, es, ès, et, eu, ex, fa, fi, go, ha, hé, hi, ho, if, il, in, je, ka, la, là, la, le, lé, li, \\\n    lu, ma, me, mi, mu, mû, na, ne, né, né, ni, nô, nu, oc, oh, om, on, or, os, ou, où, pi, pu, qi, ra, ré, ri, ru, sa, se, si, su, ta, \\\n    te, té, to, tô, tu, ud, un, us, ut, va, vé, vs, vu, wu et xi.',\n\n    'Dans la version anglophone du Scrabble, il y a seulement 2 lettres qui valent 10 points : Q et Z. Dans la version francophone, il y en a \\\n    5 : K, W, X, Y et Z.',\n\n    \"Il y a 19 tuiles portant la lettre A dans la version malaisienne du Scrabble. Cela représente près d'un cinquième du nombre total \\\n    de tuiles du jeu!\",\n\n    \"En 1993, le champion du monde anglophone Mark Nyman, du Royaume-Uni, a appris 10 000 mots de l'American Dictionary afin de \\\n    se préparer pour le tournoi à venir.\",\n\n    'Le Québécois Francis Desjardins a été couronné Champion du monde de Scrabble Classique de 2019.',\n\n    'Le champion du monde de Scrabble Classique de 2019, le Québécois Francis Desjardins, conseille de « bien apprendre les mots \\\n    de deux à cinq lettres qui sont formés avec les lettres chères, les fameux J, K, Q, W, X, Y, Z. Il n’y en a pas tant que ça \\\n    et ces mots peuvent permettre de faire beaucoup de points contre l’adversaire. » En effet, des mots comme kyu, dzo ou \\\n    qi (accepté depuis janvier 2020) peuvent rapporter beaucoup, surtout s’ils sont posés sur des cases bonus.',\n\n    \"Le Néo-Zélandais Nigel Richards a remporté plusieurs fois le championnat du monde de Scrabble francophone même s'il ne parle \\\n    pas du tout français! Le secret de sa victoire : il a mémorisé tous les mots de l’Officiel du Scrabble.\",\n\n    'Une bonne connaissance des préfixes et suffixes de la langue française n’est pas à dédaigner. Par exemple, ajouter un « pré » \\\n    en début de mot ou un « eur » à la fin d’un autre peut aider à faire des points rapidement.',\n\n    'Les suffixes verbaux sont particulièrement utiles. En ajoutant un « i », un « it », ou un « ient », on peut allonger aisément \\\n    un verbe à la troisième personne du singulier et engranger de précieux points! C’est vrai aussi pour des temps de verbe comme \\\n    l’imparfait du subjonctif ou d’autres qui ne sont pas tellement utilisés dans la vie de tous les jours, mais qui sont bien \\\n    connus par les scrabbleurs.',\n\n    \"Il est important d'essayer de garder un bon ratio voyelles/consonnes. Avoir trop de consonnes sur son chevalet rend difficile \\\n    la tâche de trouver un mot à placer. Au contraire, avoir seulement des voyelles empêche de faire beaucoup de points.\",\n\n    \"Plusieurs bruits d'animaux sont des mots acceptés au Scrabble : COINCOIN, CUICUI, GRRR, HIHAN, HOP.\",\n\n    'Votre adversaire vient de jouer un vilain coup? Exprimez vos émotions avec ces onomatopées acceptés au Scrabble francophone : \\\n    ARGH, BERK, BEURK, BIGRE, BORDEL, BOUH, CALMOS, CARAMBA, DIANTRE, HOULA, JARNICOTON.',\n\n    'Au Scrabble francophone, 44% des tuiles sont des voyelles.',\n\n    'Les 5 meilleurs mots à jouer au Scrabble francophone sont WHISKEYS, OXYDIEZ, JOCKEYS, JUKEBOX, KWANZAS.',\n]"
                },
                {
                    "name": "getRandomFact",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/fun-facts-scrabble-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n    return Random.getRandomElementsFromArray(FUN_FACTS, 1)[0];\n}"
                }
            ],
            "src/app/pipes/duration/duration.pipe.ts": [
                {
                    "name": "HOURS_IN_DAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "24"
                },
                {
                    "name": "MAXIMUM_TIME_UNITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "MINIMUM_TIME_UNITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "MINUTES_IN_HOUR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                },
                {
                    "name": "SECONDS_IN_DAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "HOURS_IN_DAY * MINUTES_IN_HOUR * SECONDS_IN_MINUTE"
                },
                {
                    "name": "SECONDS_IN_HOUR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MINUTES_IN_HOUR * SECONDS_IN_MINUTE"
                },
                {
                    "name": "SECONDS_IN_MINUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                }
            ],
            "src/app/constants/controllers-errors.ts": [
                {
                    "name": "HTTP_ABORT_ERROR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controllers-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "INVALID_DICTIONARY_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controllers-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"L'identificateur (ID) du dictionanaire est invalide\""
                }
            ],
            "src/app/classes/round/timer.ts": [
                {
                    "name": "ILLEGAL_TIMER_PARAMETERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/round/timer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'The arguments passed to create the timer are not valid (minute < 0 or seconds < 0)'"
                },
                {
                    "name": "SECONDS_IN_MINUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/round/timer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "60"
                }
            ],
            "src/app/constants/controller-constants.ts": [
                {
                    "name": "INITIAL_MESSAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/controller-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Omit<Message, gameId>",
                    "defaultValue": "{\n    content: 'Début de la partie',\n    senderId: SYSTEM_ID,\n}"
                }
            ],
            "src/app/constants/classes-errors.ts": [
                {
                    "name": "INVALID_MULTIPLIER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/classes-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Le multiplicateur de score fourni ne fait pas partie des mulitplicateurs valides'"
                },
                {
                    "name": "NO_COLOR_FOR_MULTIPLIER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/classes-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Le multiplicateur de score fourni n'a aucune couleur associée\""
                },
                {
                    "name": "NO_SQUARE_FOR_SQUARE_VIEW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/classes-errors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"La propriété du SquareView: Square est n'est pas définie\""
                }
            ],
            "src/app/classes/game-history/game-histories-converter.ts": [
                {
                    "name": "INVERSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/game-history/game-histories-converter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "-1"
                }
            ],
            "src/app/utils/isKey/is-key.ts": [
                {
                    "name": "isKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/isKey/is-key.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(key: PropertyKey, obj: T): key is keyof T => {\n    return key in obj;\n}"
                }
            ],
            "src/app/utils/isNumber/is-number.ts": [
                {
                    "name": "isNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/isNumber/is-number.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(char: string) => !isNaN(parseInt(char, 10))"
                }
            ],
            "src/app/classes/square/square-multiplier-to-color-map.ts": [
                {
                    "name": "LETTER_MULTIPLIER_COLOR_MAP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/square/square-multiplier-to-color-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number, COLORS>",
                    "defaultValue": "new Map([\n    [2, COLORS.Letter2x],\n    [3, COLORS.Letter3x],\n])"
                },
                {
                    "name": "MULTIPLIER_COLOR_MAP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/square/square-multiplier-to-color-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<MultiplierEffect, Map<number, COLORS>>",
                    "defaultValue": "new Map([\n    [MultiplierEffect.LETTER, LETTER_MULTIPLIER_COLOR_MAP],\n    [MultiplierEffect.WORD, WORD_MULTIPLIER_COLOR_MAP],\n])"
                },
                {
                    "name": "WORD_MULTIPLIER_COLOR_MAP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/square/square-multiplier-to-color-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number, COLORS>",
                    "defaultValue": "new Map([\n    [2, COLORS.Word2x],\n    [3, COLORS.Word3x],\n])"
                }
            ],
            "src/app/constants/name-validation.ts": [
                {
                    "name": "MAX_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                },
                {
                    "name": "MIN_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "NAME_VALIDATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    minLength: MIN_LENGTH,\n    maxLength: MAX_LENGTH,\n    rule: VALIDATION_RULE,\n}"
                },
                {
                    "name": "VALIDATION_RULE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"^([0-9A-Za-zÀ-ÖØ-öø-ÿ]+[ '\\\\-_]{0,1})*$\""
                }
            ],
            "src/app/constants/virtual-player-name-validation.ts": [
                {
                    "name": "MAX_NAME_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/virtual-player-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                },
                {
                    "name": "MIN_NAME_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/virtual-player-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "VALIDATION_RULE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/virtual-player-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"^([0-9A-Za-zÀ-ÖØ-öø-ÿ]+[ '\\\\-_]{0,1})*$\""
                },
                {
                    "name": "VIRTUAL_PLAYER_NAME_VALIDATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/virtual-player-name-validation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    minLength: MIN_NAME_LENGTH,\n    maxLength: MAX_NAME_LENGTH,\n    rule: VALIDATION_RULE,\n}"
                }
            ],
            "src/app/constants/service-test-constants.ts": [
                {
                    "name": "MOCK_PLAYER_PROFILE_MAP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/service-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<VirtualPlayerLevel, string[]>",
                    "defaultValue": "new Map([\n    [VirtualPlayerLevel.Beginner, [MOCK_PLAYER_PROFILES[0].name, MOCK_PLAYER_PROFILES[1].name]],\n    [VirtualPlayerLevel.Expert, [MOCK_PLAYER_PROFILES[2].name]],\n])"
                },
                {
                    "name": "MOCK_PLAYER_PROFILES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/service-test-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VirtualPlayer[]",
                    "defaultValue": "[\n    {\n        name: 'Jean Charest',\n        idVirtualPlayer: 1,\n        level: VirtualPlayerLevel.Beginner,\n        isDefault: false,\n    },\n    {\n        name: 'Jean Charest Jr',\n        idVirtualPlayer: 2,\n        level: VirtualPlayerLevel.Beginner,\n        isDefault: false,\n    },\n    {\n        name: 'Thomas \"The best\" Trépanier',\n        idVirtualPlayer: 3,\n        level: VirtualPlayerLevel.Expert,\n        isDefault: false,\n    },\n]"
                }
            ],
            "src/app/modules/material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    // MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    // MatCheckboxModule,\n    // MatCheckboxModule,\n    MatChipsModule,\n    // MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    // MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatSelectModule,\n    // MatSidenavModule,\n    // MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatDividerModule,\n]"
                }
            ],
            "src/app/constants/name-field.ts": [
                {
                    "name": "NAME_NO_MATCH_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Votre nom ne peut pas contenir de caractères spéciaux.'"
                },
                {
                    "name": "NAME_REQUIRED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Vous devez entrer un nom pour jouer'"
                },
                {
                    "name": "NAME_SAME_AS_VIRTUAL_PLAYER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Votre nom ne peut pas être le même que celui de votre adversaire virtuel.'"
                },
                {
                    "name": "NAME_TOO_LONG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Votre nom doit contenir au plus 20 caractères.'"
                },
                {
                    "name": "NAME_TOO_SHORT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/name-field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Votre nom doit contenir au moins 2 caractères.'"
                }
            ],
            "src/app/utils/next-index/next-index.ts": [
                {
                    "name": "nextIndex",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/next-index/next-index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(length: number) => (index: number) => (index + 1) % length"
                }
            ],
            "src/app/utils/preserve-array-order/preserve-array-order.ts": [
                {
                    "name": "NOT_FOUND",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/preserve-array-order/preserve-array-order.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "-1"
                },
                {
                    "name": "preserveArrayOrder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/preserve-array-order/preserve-array-order.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T, S = T>(array: T[], originalArray: S[], equals: (a: T, b: S) => boolean): T[] => {\n    const output: T[] = [];\n\n    array = [...array];\n\n    originalArray.forEach((original) => {\n        const index = array.findIndex((i) => equals(i, original));\n        if (index === NOT_FOUND) return;\n\n        const item = array.splice(index, 1).pop();\n        if (item) output.push(item);\n    });\n\n    return output.concat(array);\n}"
                }
            ],
            "src/app/classes/actions/orientation.ts": [
                {
                    "name": "ORIENTATION_HORIZONTAL_LETTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/actions/orientation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'h'"
                },
                {
                    "name": "ORIENTATION_VERTICAL_LETTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/classes/actions/orientation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'v'"
                }
            ],
            "src/app/components/chatbox/chatbox.component.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox/chatbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox/chatbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChatBoxComponent>",
                    "defaultValue": "(args: ChatBoxComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/components/chatbox-container/chatbox-container.component.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChatboxContainerComponent>",
                    "defaultValue": "(args: ChatboxContainerComponent) => ({\n    props: args,\n})"
                },
                {
                    "name": "withVeryLongName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                }
            ],
            "src/app/components/icon/icon.component.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "template.bind({})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IconComponent>",
                    "defaultValue": "(args: IconComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/constants/tile-font-size-constants.ts": [
                {
                    "name": "RACK_FONT_SIZE_INCREMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.1"
                },
                {
                    "name": "RACK_TILE_DEFAULT_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1.3"
                },
                {
                    "name": "RACK_TILE_MAX_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1.5"
                },
                {
                    "name": "RACK_TILE_MIN_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1.1"
                },
                {
                    "name": "SQUARE_FONT_SIZE_INCREMENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.06"
                },
                {
                    "name": "SQUARE_TILE_DEFAULT_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.94"
                },
                {
                    "name": "SQUARE_TILE_MAX_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1.06"
                },
                {
                    "name": "SQUARE_TILE_MIN_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/tile-font-size-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0.82"
                }
            ],
            "src/app/utils/randomize-array/randomize-array.ts": [
                {
                    "name": "randomizeArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/randomize-array/randomize-array.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(array: T[]): T[] => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const randomIndex = Math.floor(Math.random() * (i + 1));\n        const temp = array[i];\n        array[i] = array[randomIndex];\n        array[randomIndex] = temp;\n    }\n    return array;\n}"
                }
            ],
            "src/app/utils/remove-accents/remove-accents.ts": [
                {
                    "name": "removeAccents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/remove-accents/remove-accents.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(word: string): string => word.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')"
                }
            ],
            "src/app/components/tile-rack/tile-rack.component.ts": [
                {
                    "name": "SHUFFLE_ANIMATION_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/tile-rack/tile-rack.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "250"
                }
            ],
            "src/app/constants/dictionaries-component.ts": [
                {
                    "name": "SNACK_BAR_ERROR_DURATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/constants/dictionaries-component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "100000"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/classes/actions/action-data.ts": [
                {
                    "name": "ActionType",
                    "childs": [
                        {
                            "name": "PLACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "placer"
                        },
                        {
                            "name": "EXCHANGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "échanger"
                        },
                        {
                            "name": "PASS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "passer"
                        },
                        {
                            "name": "RESERVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "réserve"
                        },
                        {
                            "name": "HELP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "aide"
                        },
                        {
                            "name": "HINT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "indice"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/actions/action-data.ts"
                }
            ],
            "src/app/pages/admin-page/admin-page.component.ts": [
                {
                    "name": "AdminTabs",
                    "childs": [
                        {
                            "name": "GameHistory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "Dictionary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "VirtualPlayer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "HighScores",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/pages/admin-page/admin-page.component.ts"
                }
            ],
            "src/app/constants/colors-constants.ts": [
                {
                    "name": "COLORS",
                    "childs": [
                        {
                            "name": "Red",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "#ff0000"
                        },
                        {
                            "name": "Blue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "#0000ff"
                        },
                        {
                            "name": "Gray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rgb(214, 216, 214)"
                        },
                        {
                            "name": "Beige",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "#fff8e7"
                        },
                        {
                            "name": "Letter2x",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rgb(160, 213, 243)"
                        },
                        {
                            "name": "Word2x",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rgb(245, 173, 170)"
                        },
                        {
                            "name": "Letter3x",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rgb(34, 162, 236)"
                        },
                        {
                            "name": "Word3x",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rgb(248, 100, 95)"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/colors-constants.ts"
                }
            ],
            "src/app/constants/command-exception-messages.ts": [
                {
                    "name": "CommandExceptionMessages",
                    "childs": [
                        {
                            "name": "BadSyntax",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "La commande ne respecte pas la syntaxe requise."
                        },
                        {
                            "name": "InvalidEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Cette commande n'est pas reconnue. Entrez !aide pour connaitre les commandes valides."
                        },
                        {
                            "name": "ImpossibleCommand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Cette commande est impossible à réaliser."
                        },
                        {
                            "name": "DontHaveTiles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Vous n'avez pas les tuiles requises."
                        },
                        {
                            "name": "PositionFormat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "La position doit être de format _‹a-o›‹1-15›‹h/v›_."
                        },
                        {
                            "name": "NotYourTurn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Ce n'est pas votre tour de jouer."
                        },
                        {
                            "name": "GameOver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "La commande est impossible car la partie est terminée."
                        },
                        {
                            "name": "ExchangeRequireLowercaseLetters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Les lettres à échanger doivent être en minuscule."
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/command-exception-messages.ts"
                }
            ],
            "src/app/classes/connection-state-service/connection-state.ts": [
                {
                    "name": "ConnectionState",
                    "childs": [
                        {
                            "name": "Loading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Loading"
                        },
                        {
                            "name": "Connected",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Connected"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/connection-state-service/connection-state.ts"
                },
                {
                    "name": "InitializeState",
                    "childs": [
                        {
                            "name": "Loading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Chargement de l'application"
                        },
                        {
                            "name": "Ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "L'application est prête"
                        },
                        {
                            "name": "ServerNotReachable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Impossible d'établir une connexion avec le serveur"
                        },
                        {
                            "name": "DatabaseNotReachable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Impossible d'établir une connexion avec la base de donnée"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/connection-state-service/connection-state.ts"
                }
            ],
            "src/app/classes/admin/dictionaries.ts": [
                {
                    "name": "DictionariesState",
                    "childs": [
                        {
                            "name": "Ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ready"
                        },
                        {
                            "name": "Loading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "loading"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/admin/dictionaries.ts"
                }
            ],
            "src/app/classes/board-navigator/direction.ts": [
                {
                    "name": "Direction",
                    "childs": [
                        {
                            "name": "Forward",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Backward",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/board-navigator/direction.ts"
                }
            ],
            "src/app/classes/admin/admin-game-history.ts": [
                {
                    "name": "GameHistoryState",
                    "childs": [
                        {
                            "name": "Ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ready"
                        },
                        {
                            "name": "Loading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "loading"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/admin/admin-game-history.ts"
                }
            ],
            "src/app/constants/game-mode.ts": [
                {
                    "name": "GameMode",
                    "childs": [
                        {
                            "name": "Solo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Solo"
                        },
                        {
                            "name": "Multiplayer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Multijoueur"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/game-mode.ts"
                }
            ],
            "src/app/constants/game-type.ts": [
                {
                    "name": "GameType",
                    "childs": [
                        {
                            "name": "Classic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Classique"
                        },
                        {
                            "name": "LOG2990",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LOG2990"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/game-type.ts"
                }
            ],
            "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types.ts": [
                {
                    "name": "ModifyDictionaryComponentIcons",
                    "childs": [
                        {
                            "name": "SuccessIcon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "check"
                        },
                        {
                            "name": "ErrorIcon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times"
                        },
                        {
                            "name": "NoIcon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types.ts"
                }
            ],
            "src/app/classes/square/score-multiplier.ts": [
                {
                    "name": "MultiplierEffect",
                    "childs": [
                        {
                            "name": "LETTER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Lettre"
                        },
                        {
                            "name": "WORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Mot"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/square/score-multiplier.ts"
                }
            ],
            "src/app/classes/objectives/objective-state.ts": [
                {
                    "name": "ObjectiveState",
                    "childs": [
                        {
                            "name": "NotCompleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NotCompleted"
                        },
                        {
                            "name": "Completed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Completed"
                        },
                        {
                            "name": "CompletedByOpponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CompletedByOpponent"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/objectives/objective-state.ts"
                }
            ],
            "src/app/classes/actions/orientation.ts": [
                {
                    "name": "Orientation",
                    "childs": [
                        {
                            "name": "Horizontal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Vertical",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/actions/orientation.ts"
                }
            ],
            "src/app/constants/dictionaries-components.ts": [
                {
                    "name": "PositiveFeedback",
                    "childs": [
                        {
                            "name": "DictionaryUpdated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Le dictionnaire a été mis à jour."
                        },
                        {
                            "name": "DictionaryAdded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Le dictionnaire a été ajouté avec succès."
                        },
                        {
                            "name": "DictionaryDeleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Le dictionnaire a été supprimé avec succès."
                        },
                        {
                            "name": "DictionariesDeleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "La liste de dictionnaires a été réinitialisée."
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/dictionaries-components.ts"
                }
            ],
            "src/app/constants/virtual-players-components-constants.ts": [
                {
                    "name": "PositiveFeedback",
                    "childs": [
                        {
                            "name": "VirtualPlayerUpdated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Le joueur a été mis à jour."
                        },
                        {
                            "name": "VirtualPlayerCreated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Le joueur a été ajouté avec succès."
                        },
                        {
                            "name": "VirtualPlayerDeleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Le joueur a été supprimé avec succès."
                        },
                        {
                            "name": "VirtualPlayersDeleted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "La liste de joueurs a été réinitialisée."
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/virtual-players-components-constants.ts"
                }
            ],
            "src/app/constants/tile-rack-select-type.ts": [
                {
                    "name": "TileRackSelectType",
                    "childs": [
                        {
                            "name": "Exchange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exchange"
                        },
                        {
                            "name": "Move",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "move"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/constants/tile-rack-select-type.ts"
                }
            ],
            "src/app/components/update-virtual-player-dialog/update-virtual-player.component.types.ts": [
                {
                    "name": "UpdateDictionaryComponentIcons",
                    "childs": [
                        {
                            "name": "SuccessIcon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "check"
                        },
                        {
                            "name": "ErrorIcon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times"
                        },
                        {
                            "name": "NoIcon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/update-virtual-player-dialog/update-virtual-player.component.types.ts"
                }
            ],
            "src/app/components/upload-dictionary/upload-dictionary.component.types.ts": [
                {
                    "name": "UploadState",
                    "childs": [
                        {
                            "name": "Ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ready"
                        },
                        {
                            "name": "Init",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "init"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/upload-dictionary/upload-dictionary.component.types.ts"
                }
            ],
            "src/app/classes/player/virtual-player-level.ts": [
                {
                    "name": "VirtualPlayerLevel",
                    "childs": [
                        {
                            "name": "Beginner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Débutant"
                        },
                        {
                            "name": "Expert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Expert"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/classes/player/virtual-player-level.ts"
                }
            ],
            "src/app/components/admin-virtual-players/admin-virtual-players.types.ts": [
                {
                    "name": "VirtualPlayersComponentState",
                    "childs": [
                        {
                            "name": "Ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ready"
                        },
                        {
                            "name": "Loading",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "loading"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/classes/admin/dictionaries.ts": [
                {
                    "name": "DisplayDictionaryColumns",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/classes/admin/dictionaries.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "DisplayDictionaryColumnsIteratorItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/classes/admin/dictionaries.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DisplayDictionaryKeys",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | \"title\" | \"description\" | \"actions\"",
                    "file": "src/app/classes/admin/dictionaries.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/classes/admin/admin-game-history.ts": [
                {
                    "name": "DisplayGameHistoryColumns",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/classes/admin/admin-game-history.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "DisplayGameHistoryColumnsIteratorItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/classes/admin/admin-game-history.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DisplayGameHistoryKeys",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | \"player1Data\" | \"player1Name\" | \"player1Score\" | \"player2Data\" | \"player2Name\" | \"player2Score\" | \"startDate\" | \"endDate\" | \"duration\"",
                    "file": "src/app/classes/admin/admin-game-history.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/components/admin-virtual-players/admin-virtual-players.types.ts": [
                {
                    "name": "DisplayVirtualPlayersColumns",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "DisplayVirtualPlayersColumnsIteratorItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "DisplayVirtualPlayersKeys",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | \"name\" | \"actions\"",
                    "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "UpdateVirtualPlayersDialogParameters",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<VirtualPlayer | isDefault>",
                    "file": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/pipes/duration/duration.pipe.ts": [
                {
                    "name": "DurationTime",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[, , ]",
                    "file": "src/app/pipes/duration/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/constants/font-size-operations.ts": [
                {
                    "name": "FontSizeChangeOperations",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"smaller\" | \"larger\"",
                    "file": "src/app/constants/font-size-operations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/classes/communication/game-histories.ts": [
                {
                    "name": "GameHistoryData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/classes/communication/game-histories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/services/game-view-event-manager-service/event-types.ts": [
                {
                    "name": "GenericEventClass",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/services/game-view-event-manager-service/event-types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                }
            ],
            "src/app/components/icon/icon.component.type.ts": [
                {
                    "name": "IconAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"spin\" | \"pulse\"",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"abacus\" | \"acorn\" | \"ad\" | \"address-book\" | \"address-card\" | \"adjust\" | \"air-conditioner\" | \"air-freshener\" | \"alarm-clock\" | \"alarm-exclamation\" | \"alarm-plus\" | \"alarm-snooze\" | \"album\" | \"album-collection\" | \"alicorn\" | \"alien\" | \"alien-monster\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"align-slash\" | \"allergies\" | \"ambulance\" | \"american-sign-language-interpreting\" | \"amp-guitar\" | \"analytics\" | \"anchor\" | \"angel\" | \"angle-double-down\" | \"angle-double-left\" | \"angle-double-right\" | \"angle-double-up\" | \"angle-down\" | \"angle-left\" | \"angle-right\" | \"angle-up\" | \"angry\" | \"ankh\" | \"apple-alt\" | \"apple-crate\" | \"archive\" | \"archway\" | \"arrow-alt-circle-down\" | \"arrow-alt-circle-left\" | \"arrow-alt-circle-right\" | \"arrow-alt-circle-up\" | \"arrow-alt-down\" | \"arrow-alt-from-bottom\" | \"arrow-alt-from-left\" | \"arrow-alt-from-right\" | \"arrow-alt-from-top\" | \"arrow-alt-left\" | \"arrow-alt-right\" | \"arrow-alt-square-down\" | \"arrow-alt-square-left\" | \"arrow-alt-square-right\" | \"arrow-alt-square-up\" | \"arrow-alt-to-bottom\" | \"arrow-alt-to-left\" | \"arrow-alt-to-right\" | \"arrow-alt-to-top\" | \"arrow-alt-up\" | \"arrow-circle-down\" | \"arrow-circle-left\" | \"arrow-circle-right\" | \"arrow-circle-up\" | \"arrow-down\" | \"arrow-from-bottom\" | \"arrow-from-left\" | \"arrow-from-right\" | \"arrow-from-top\" | \"arrow-left\" | \"arrow-right\" | \"arrow-square-down\" | \"arrow-square-left\" | \"arrow-square-right\" | \"arrow-square-up\" | \"arrow-to-bottom\" | \"arrow-to-left\" | \"arrow-to-right\" | \"arrow-to-top\" | \"arrow-up\" | \"arrows\" | \"arrows-alt\" | \"arrows-alt-h\" | \"arrows-alt-v\" | \"arrows-h\" | \"arrows-v\" | \"assistive-listening-systems\" | \"asterisk\" | \"at\" | \"atlas\" | \"atom\" | \"atom-alt\" | \"audio-description\" | \"award\" | \"axe\" | \"axe-battle\" | \"baby\" | \"baby-carriage\" | \"backpack\" | \"backspace\" | \"backward\" | \"bacon\" | \"bacteria\" | \"bacterium\" | \"badge\" | \"badge-check\" | \"badge-dollar\" | \"badge-percent\" | \"badge-sheriff\" | \"badger-honey\" | \"bags-shopping\" | \"bahai\" | \"balance-scale\" | \"balance-scale-left\" | \"balance-scale-right\" | \"ball-pile\" | \"ballot\" | \"ballot-check\" | \"ban\" | \"band-aid\" | \"banjo\" | \"barcode\" | \"barcode-alt\" | \"barcode-read\" | \"barcode-scan\" | \"bars\" | \"baseball\" | \"baseball-ball\" | \"basketball-ball\" | \"basketball-hoop\" | \"bat\" | \"bath\" | \"battery-bolt\" | \"battery-empty\" | \"battery-full\" | \"battery-half\" | \"battery-quarter\" | \"battery-slash\" | \"battery-three-quarters\" | \"bed\" | \"bed-alt\" | \"bed-bunk\" | \"bed-empty\" | \"beer\" | \"bell\" | \"bell-exclamation\" | \"bell-on\" | \"bell-plus\" | \"bell-school\" | \"bell-school-slash\" | \"bell-slash\" | \"bells\" | \"betamax\" | \"bezier-curve\" | \"bible\" | \"bicycle\" | \"biking\" | \"biking-mountain\" | \"binoculars\" | \"biohazard\" | \"birthday-cake\" | \"blanket\" | \"blender\" | \"blender-phone\" | \"blind\" | \"blinds\" | \"blinds-open\" | \"blinds-raised\" | \"blog\" | \"bold\" | \"bolt\" | \"bomb\" | \"bone\" | \"bone-break\" | \"bong\" | \"book\" | \"book-alt\" | \"book-dead\" | \"book-heart\" | \"book-medical\" | \"book-open\" | \"book-reader\" | \"book-spells\" | \"book-user\" | \"bookmark\" | \"books\" | \"books-medical\" | \"boombox\" | \"boot\" | \"booth-curtain\" | \"border-all\" | \"border-bottom\" | \"border-center-h\" | \"border-center-v\" | \"border-inner\" | \"border-left\" | \"border-none\" | \"border-outer\" | \"border-right\" | \"border-style\" | \"border-style-alt\" | \"border-top\" | \"bow-arrow\" | \"bowling-ball\" | \"bowling-pins\" | \"box\" | \"box-alt\" | \"box-ballot\" | \"box-check\" | \"box-fragile\" | \"box-full\" | \"box-heart\" | \"box-open\" | \"box-tissue\" | \"box-up\" | \"box-usd\" | \"boxes\" | \"boxes-alt\" | \"boxing-glove\" | \"brackets\" | \"brackets-curly\" | \"braille\" | \"brain\" | \"bread-loaf\" | \"bread-slice\" | \"briefcase\" | \"briefcase-medical\" | \"bring-forward\" | \"bring-front\" | \"broadcast-tower\" | \"broom\" | \"browser\" | \"brush\" | \"bug\" | \"building\" | \"bullhorn\" | \"bullseye\" | \"bullseye-arrow\" | \"bullseye-pointer\" | \"burger-soda\" | \"burn\" | \"burrito\" | \"bus\" | \"bus-alt\" | \"bus-school\" | \"business-time\" | \"cabinet-filing\" | \"cactus\" | \"calculator\" | \"calculator-alt\" | \"calendar\" | \"calendar-alt\" | \"calendar-check\" | \"calendar-day\" | \"calendar-edit\" | \"calendar-exclamation\" | \"calendar-minus\" | \"calendar-plus\" | \"calendar-star\" | \"calendar-times\" | \"calendar-week\" | \"camcorder\" | \"camera\" | \"camera-alt\" | \"camera-home\" | \"camera-movie\" | \"camera-polaroid\" | \"camera-retro\" | \"campfire\" | \"campground\" | \"candle-holder\" | \"candy-cane\" | \"candy-corn\" | \"cannabis\" | \"capsules\" | \"car\" | \"car-alt\" | \"car-battery\" | \"car-building\" | \"car-bump\" | \"car-bus\" | \"car-crash\" | \"car-garage\" | \"car-mechanic\" | \"car-side\" | \"car-tilt\" | \"car-wash\" | \"caravan\" | \"caravan-alt\" | \"caret-circle-down\" | \"caret-circle-left\" | \"caret-circle-right\" | \"caret-circle-up\" | \"caret-down\" | \"caret-left\" | \"caret-right\" | \"caret-square-down\" | \"caret-square-left\" | \"caret-square-right\" | \"caret-square-up\" | \"caret-up\" | \"carrot\" | \"cars\" | \"cart-arrow-down\" | \"cart-plus\" | \"cash-register\" | \"cassette-tape\" | \"cat\" | \"cat-space\" | \"cauldron\" | \"cctv\" | \"certificate\" | \"chair\" | \"chair-office\" | \"chalkboard\" | \"chalkboard-teacher\" | \"charging-station\" | \"chart-area\" | \"chart-bar\" | \"chart-line\" | \"chart-line-down\" | \"chart-network\" | \"chart-pie\" | \"chart-pie-alt\" | \"chart-scatter\" | \"check\" | \"check-circle\" | \"check-double\" | \"check-square\" | \"cheese\" | \"cheese-swiss\" | \"cheeseburger\" | \"chess\" | \"chess-bishop\" | \"chess-bishop-alt\" | \"chess-board\" | \"chess-clock\" | \"chess-clock-alt\" | \"chess-king\" | \"chess-king-alt\" | \"chess-knight\" | \"chess-knight-alt\" | \"chess-pawn\" | \"chess-pawn-alt\" | \"chess-queen\" | \"chess-queen-alt\" | \"chess-rook\" | \"chess-rook-alt\" | \"chevron-circle-down\" | \"chevron-circle-left\" | \"chevron-circle-right\" | \"chevron-circle-up\" | \"chevron-double-down\" | \"chevron-double-left\" | \"chevron-double-right\" | \"chevron-double-up\" | \"chevron-down\" | \"chevron-left\" | \"chevron-right\" | \"chevron-square-down\" | \"chevron-square-left\" | \"chevron-square-right\" | \"chevron-square-up\" | \"chevron-up\" | \"child\" | \"chimney\" | \"church\" | \"circle\" | \"circle-notch\" | \"city\" | \"clarinet\" | \"claw-marks\" | \"clinic-medical\" | \"clipboard\" | \"clipboard-check\" | \"clipboard-list\" | \"clipboard-list-check\" | \"clipboard-prescription\" | \"clipboard-user\" | \"clock\" | \"clone\" | \"closed-captioning\" | \"cloud\" | \"cloud-download\" | \"cloud-download-alt\" | \"cloud-drizzle\" | \"cloud-hail\" | \"cloud-hail-mixed\" | \"cloud-meatball\" | \"cloud-moon\" | \"cloud-moon-rain\" | \"cloud-music\" | \"cloud-rain\" | \"cloud-rainbow\" | \"cloud-showers\" | \"cloud-showers-heavy\" | \"cloud-sleet\" | \"cloud-snow\" | \"cloud-sun\" | \"cloud-sun-rain\" | \"cloud-upload\" | \"cloud-upload-alt\" | \"clouds\" | \"clouds-moon\" | \"clouds-sun\" | \"club\" | \"cocktail\" | \"code\" | \"code-branch\" | \"code-commit\" | \"code-merge\" | \"coffee\" | \"coffee-pot\" | \"coffee-togo\" | \"coffin\" | \"coffin-cross\" | \"cog\" | \"cogs\" | \"coin\" | \"coins\" | \"columns\" | \"comet\" | \"comment\" | \"comment-alt\" | \"comment-alt-check\" | \"comment-alt-dollar\" | \"comment-alt-dots\" | \"comment-alt-edit\" | \"comment-alt-exclamation\" | \"comment-alt-lines\" | \"comment-alt-medical\" | \"comment-alt-minus\" | \"comment-alt-music\" | \"comment-alt-plus\" | \"comment-alt-slash\" | \"comment-alt-smile\" | \"comment-alt-times\" | \"comment-check\" | \"comment-dollar\" | \"comment-dots\" | \"comment-edit\" | \"comment-exclamation\" | \"comment-lines\" | \"comment-medical\" | \"comment-minus\" | \"comment-music\" | \"comment-plus\" | \"comment-slash\" | \"comment-smile\" | \"comment-times\" | \"comments\" | \"comments-alt\" | \"comments-alt-dollar\" | \"comments-dollar\" | \"compact-disc\" | \"compass\" | \"compass-slash\" | \"compress\" | \"compress-alt\" | \"compress-arrows-alt\" | \"compress-wide\" | \"computer-classic\" | \"computer-speaker\" | \"concierge-bell\" | \"construction\" | \"container-storage\" | \"conveyor-belt\" | \"conveyor-belt-alt\" | \"cookie\" | \"cookie-bite\" | \"copy\" | \"copyright\" | \"corn\" | \"couch\" | \"cow\" | \"cowbell\" | \"cowbell-more\" | \"credit-card\" | \"credit-card-blank\" | \"credit-card-front\" | \"cricket\" | \"croissant\" | \"crop\" | \"crop-alt\" | \"cross\" | \"crosshairs\" | \"crow\" | \"crown\" | \"crutch\" | \"crutches\" | \"cube\" | \"cubes\" | \"curling\" | \"cut\" | \"dagger\" | \"database\" | \"deaf\" | \"debug\" | \"deer\" | \"deer-rudolph\" | \"democrat\" | \"desktop\" | \"desktop-alt\" | \"dewpoint\" | \"dharmachakra\" | \"diagnoses\" | \"diamond\" | \"dice\" | \"dice-d10\" | \"dice-d12\" | \"dice-d20\" | \"dice-d4\" | \"dice-d6\" | \"dice-d8\" | \"dice-five\" | \"dice-four\" | \"dice-one\" | \"dice-six\" | \"dice-three\" | \"dice-two\" | \"digging\" | \"digital-tachograph\" | \"diploma\" | \"directions\" | \"disc-drive\" | \"disease\" | \"divide\" | \"dizzy\" | \"dna\" | \"do-not-enter\" | \"dog\" | \"dog-leashed\" | \"dollar-sign\" | \"dolly\" | \"dolly-empty\" | \"dolly-flatbed\" | \"dolly-flatbed-alt\" | \"dolly-flatbed-empty\" | \"donate\" | \"door-closed\" | \"door-open\" | \"dot-circle\" | \"dove\" | \"download\" | \"drafting-compass\" | \"dragon\" | \"draw-circle\" | \"draw-polygon\" | \"draw-square\" | \"dreidel\" | \"drone\" | \"drone-alt\" | \"drum\" | \"drum-steelpan\" | \"drumstick\" | \"drumstick-bite\" | \"dryer\" | \"dryer-alt\" | \"duck\" | \"dumbbell\" | \"dumpster\" | \"dumpster-fire\" | \"dungeon\" | \"ear\" | \"ear-muffs\" | \"eclipse\" | \"eclipse-alt\" | \"edit\" | \"egg\" | \"egg-fried\" | \"eject\" | \"elephant\" | \"ellipsis-h\" | \"ellipsis-h-alt\" | \"ellipsis-v\" | \"ellipsis-v-alt\" | \"empty-set\" | \"engine-warning\" | \"envelope\" | \"envelope-open\" | \"envelope-open-dollar\" | \"envelope-open-text\" | \"envelope-square\" | \"equals\" | \"eraser\" | \"ethernet\" | \"euro-sign\" | \"exchange\" | \"exchange-alt\" | \"exclamation\" | \"exclamation-circle\" | \"exclamation-square\" | \"exclamation-triangle\" | \"expand\" | \"expand-alt\" | \"expand-arrows\" | \"expand-arrows-alt\" | \"expand-wide\" | \"external-link\" | \"external-link-alt\" | \"external-link-square\" | \"external-link-square-alt\" | \"eye\" | \"eye-dropper\" | \"eye-evil\" | \"eye-slash\" | \"fan\" | \"fan-table\" | \"farm\" | \"fast-backward\" | \"fast-forward\" | \"faucet\" | \"faucet-drip\" | \"fax\" | \"feather\" | \"feather-alt\" | \"female\" | \"field-hockey\" | \"fighter-jet\" | \"file\" | \"file-alt\" | \"file-archive\" | \"file-audio\" | \"file-certificate\" | \"file-chart-line\" | \"file-chart-pie\" | \"file-check\" | \"file-code\" | \"file-contract\" | \"file-csv\" | \"file-download\" | \"file-edit\" | \"file-excel\" | \"file-exclamation\" | \"file-export\" | \"file-image\" | \"file-import\" | \"file-invoice\" | \"file-invoice-dollar\" | \"file-medical\" | \"file-medical-alt\" | \"file-minus\" | \"file-music\" | \"file-pdf\" | \"file-plus\" | \"file-powerpoint\" | \"file-prescription\" | \"file-search\" | \"file-signature\" | \"file-spreadsheet\" | \"file-times\" | \"file-upload\" | \"file-user\" | \"file-video\" | \"file-word\" | \"files-medical\" | \"fill\" | \"fill-drip\" | \"film\" | \"film-alt\" | \"film-canister\" | \"filter\" | \"fingerprint\" | \"fire\" | \"fire-alt\" | \"fire-extinguisher\" | \"fire-smoke\" | \"fireplace\" | \"first-aid\" | \"fish\" | \"fish-cooked\" | \"fist-raised\" | \"flag\" | \"flag-alt\" | \"flag-checkered\" | \"flag-usa\" | \"flame\" | \"flashlight\" | \"flask\" | \"flask-poison\" | \"flask-potion\" | \"flower\" | \"flower-daffodil\" | \"flower-tulip\" | \"flushed\" | \"flute\" | \"flux-capacitor\" | \"fog\" | \"folder\" | \"folder-download\" | \"folder-minus\" | \"folder-open\" | \"folder-plus\" | \"folder-times\" | \"folder-tree\" | \"folder-upload\" | \"folders\" | \"font\" | \"font-case\" | \"football-ball\" | \"football-helmet\" | \"forklift\" | \"forward\" | \"fragile\" | \"french-fries\" | \"frog\" | \"frosty-head\" | \"frown\" | \"frown-open\" | \"function\" | \"funnel-dollar\" | \"futbol\" | \"galaxy\" | \"game-board\" | \"game-board-alt\" | \"game-console-handheld\" | \"gamepad\" | \"gamepad-alt\" | \"garage\" | \"garage-car\" | \"garage-open\" | \"gas-pump\" | \"gas-pump-slash\" | \"gavel\" | \"gem\" | \"genderless\" | \"ghost\" | \"gift\" | \"gift-card\" | \"gifts\" | \"gingerbread-man\" | \"glass\" | \"glass-champagne\" | \"glass-cheers\" | \"glass-citrus\" | \"glass-martini\" | \"glass-martini-alt\" | \"glass-whiskey\" | \"glass-whiskey-rocks\" | \"glasses\" | \"glasses-alt\" | \"globe\" | \"globe-africa\" | \"globe-americas\" | \"globe-asia\" | \"globe-europe\" | \"globe-snow\" | \"globe-stand\" | \"golf-ball\" | \"golf-club\" | \"gopuram\" | \"graduation-cap\" | \"gramophone\" | \"greater-than\" | \"greater-than-equal\" | \"grimace\" | \"grin\" | \"grin-alt\" | \"grin-beam\" | \"grin-beam-sweat\" | \"grin-hearts\" | \"grin-squint\" | \"grin-squint-tears\" | \"grin-stars\" | \"grin-tears\" | \"grin-tongue\" | \"grin-tongue-squint\" | \"grin-tongue-wink\" | \"grin-wink\" | \"grip-horizontal\" | \"grip-lines\" | \"grip-lines-vertical\" | \"grip-vertical\" | \"guitar\" | \"guitar-electric\" | \"guitars\" | \"h-square\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"hamburger\" | \"hammer\" | \"hammer-war\" | \"hamsa\" | \"hand-heart\" | \"hand-holding\" | \"hand-holding-box\" | \"hand-holding-heart\" | \"hand-holding-magic\" | \"hand-holding-medical\" | \"hand-holding-seedling\" | \"hand-holding-usd\" | \"hand-holding-water\" | \"hand-lizard\" | \"hand-middle-finger\" | \"hand-paper\" | \"hand-peace\" | \"hand-point-down\" | \"hand-point-left\" | \"hand-point-right\" | \"hand-point-up\" | \"hand-pointer\" | \"hand-receiving\" | \"hand-rock\" | \"hand-scissors\" | \"hand-sparkles\" | \"hand-spock\" | \"hands\" | \"hands-heart\" | \"hands-helping\" | \"hands-usd\" | \"hands-wash\" | \"handshake\" | \"handshake-alt\" | \"handshake-alt-slash\" | \"handshake-slash\" | \"hanukiah\" | \"hard-hat\" | \"hashtag\" | \"hat-chef\" | \"hat-cowboy\" | \"hat-cowboy-side\" | \"hat-santa\" | \"hat-winter\" | \"hat-witch\" | \"hat-wizard\" | \"hdd\" | \"head-side\" | \"head-side-brain\" | \"head-side-cough\" | \"head-side-cough-slash\" | \"head-side-headphones\" | \"head-side-mask\" | \"head-side-medical\" | \"head-side-virus\" | \"head-vr\" | \"heading\" | \"headphones\" | \"headphones-alt\" | \"headset\" | \"heart\" | \"heart-broken\" | \"heart-circle\" | \"heart-rate\" | \"heart-square\" | \"heartbeat\" | \"heat\" | \"helicopter\" | \"helmet-battle\" | \"hexagon\" | \"highlighter\" | \"hiking\" | \"hippo\" | \"history\" | \"hockey-mask\" | \"hockey-puck\" | \"hockey-sticks\" | \"holly-berry\" | \"home\" | \"home-alt\" | \"home-heart\" | \"home-lg\" | \"home-lg-alt\" | \"hood-cloak\" | \"horizontal-rule\" | \"horse\" | \"horse-head\" | \"horse-saddle\" | \"hospital\" | \"hospital-alt\" | \"hospital-symbol\" | \"hospital-user\" | \"hospitals\" | \"hot-tub\" | \"hotdog\" | \"hotel\" | \"hourglass\" | \"hourglass-end\" | \"hourglass-half\" | \"hourglass-start\" | \"house\" | \"house-damage\" | \"house-day\" | \"house-flood\" | \"house-leave\" | \"house-night\" | \"house-return\" | \"house-signal\" | \"house-user\" | \"hryvnia\" | \"humidity\" | \"hurricane\" | \"i-cursor\" | \"ice-cream\" | \"ice-skate\" | \"icicles\" | \"icons\" | \"icons-alt\" | \"id-badge\" | \"id-card\" | \"id-card-alt\" | \"igloo\" | \"image\" | \"image-polaroid\" | \"images\" | \"inbox\" | \"inbox-in\" | \"inbox-out\" | \"indent\" | \"industry\" | \"industry-alt\" | \"infinity\" | \"info\" | \"info-circle\" | \"info-square\" | \"inhaler\" | \"integral\" | \"intersection\" | \"inventory\" | \"island-tropical\" | \"italic\" | \"jack-o-lantern\" | \"jedi\" | \"joint\" | \"journal-whills\" | \"joystick\" | \"jug\" | \"kaaba\" | \"kazoo\" | \"kerning\" | \"key\" | \"key-skeleton\" | \"keyboard\" | \"keynote\" | \"khanda\" | \"kidneys\" | \"kiss\" | \"kiss-beam\" | \"kiss-wink-heart\" | \"kite\" | \"kiwi-bird\" | \"knife-kitchen\" | \"lambda\" | \"lamp\" | \"lamp-desk\" | \"lamp-floor\" | \"landmark\" | \"landmark-alt\" | \"language\" | \"laptop\" | \"laptop-code\" | \"laptop-house\" | \"laptop-medical\" | \"lasso\" | \"laugh\" | \"laugh-beam\" | \"laugh-squint\" | \"laugh-wink\" | \"layer-group\" | \"layer-minus\" | \"layer-plus\" | \"leaf\" | \"leaf-heart\" | \"leaf-maple\" | \"leaf-oak\" | \"lemon\" | \"less-than\" | \"less-than-equal\" | \"level-down\" | \"level-down-alt\" | \"level-up\" | \"level-up-alt\" | \"life-ring\" | \"light-ceiling\" | \"light-switch\" | \"light-switch-off\" | \"light-switch-on\" | \"lightbulb\" | \"lightbulb-dollar\" | \"lightbulb-exclamation\" | \"lightbulb-on\" | \"lightbulb-slash\" | \"lights-holiday\" | \"line-columns\" | \"line-height\" | \"link\" | \"lips\" | \"lira-sign\" | \"list\" | \"list-alt\" | \"list-music\" | \"list-ol\" | \"list-ul\" | \"location\" | \"location-arrow\" | \"location-circle\" | \"location-slash\" | \"lock\" | \"lock-alt\" | \"lock-open\" | \"lock-open-alt\" | \"long-arrow-alt-down\" | \"long-arrow-alt-left\" | \"long-arrow-alt-right\" | \"long-arrow-alt-up\" | \"long-arrow-down\" | \"long-arrow-left\" | \"long-arrow-right\" | \"long-arrow-up\" | \"loveseat\" | \"low-vision\" | \"luchador\" | \"luggage-cart\" | \"lungs\" | \"lungs-virus\" | \"mace\" | \"magic\" | \"magnet\" | \"mail-bulk\" | \"mailbox\" | \"male\" | \"mandolin\" | \"map\" | \"map-marked\" | \"map-marked-alt\" | \"map-marker\" | \"map-marker-alt\" | \"map-marker-alt-slash\" | \"map-marker-check\" | \"map-marker-edit\" | \"map-marker-exclamation\" | \"map-marker-minus\" | \"map-marker-plus\" | \"map-marker-question\" | \"map-marker-slash\" | \"map-marker-smile\" | \"map-marker-times\" | \"map-pin\" | \"map-signs\" | \"marker\" | \"mars\" | \"mars-double\" | \"mars-stroke\" | \"mars-stroke-h\" | \"mars-stroke-v\" | \"mask\" | \"meat\" | \"medal\" | \"medkit\" | \"megaphone\" | \"meh\" | \"meh-blank\" | \"meh-rolling-eyes\" | \"memory\" | \"menorah\" | \"mercury\" | \"meteor\" | \"microchip\" | \"microphone\" | \"microphone-alt\" | \"microphone-alt-slash\" | \"microphone-slash\" | \"microphone-stand\" | \"microscope\" | \"microwave\" | \"mind-share\" | \"minus\" | \"minus-circle\" | \"minus-hexagon\" | \"minus-octagon\" | \"minus-square\" | \"mistletoe\" | \"mitten\" | \"mobile\" | \"mobile-alt\" | \"mobile-android\" | \"mobile-android-alt\" | \"money-bill\" | \"money-bill-alt\" | \"money-bill-wave\" | \"money-bill-wave-alt\" | \"money-check\" | \"money-check-alt\" | \"money-check-edit\" | \"money-check-edit-alt\" | \"monitor-heart-rate\" | \"monkey\" | \"monument\" | \"moon\" | \"moon-cloud\" | \"moon-stars\" | \"mortar-pestle\" | \"mosque\" | \"motorcycle\" | \"mountain\" | \"mountains\" | \"mouse\" | \"mouse-alt\" | \"mouse-pointer\" | \"mp3-player\" | \"mug\" | \"mug-hot\" | \"mug-marshmallows\" | \"mug-tea\" | \"music\" | \"music-alt\" | \"music-alt-slash\" | \"music-slash\" | \"narwhal\" | \"network-wired\" | \"neuter\" | \"newspaper\" | \"not-equal\" | \"notes-medical\" | \"object-group\" | \"object-ungroup\" | \"octagon\" | \"oil-can\" | \"oil-temp\" | \"om\" | \"omega\" | \"ornament\" | \"otter\" | \"outdent\" | \"outlet\" | \"oven\" | \"overline\" | \"page-break\" | \"pager\" | \"paint-brush\" | \"paint-brush-alt\" | \"paint-roller\" | \"palette\" | \"pallet\" | \"pallet-alt\" | \"paper-plane\" | \"paperclip\" | \"parachute-box\" | \"paragraph\" | \"paragraph-rtl\" | \"parking\" | \"parking-circle\" | \"parking-circle-slash\" | \"parking-slash\" | \"passport\" | \"pastafarianism\" | \"paste\" | \"pause\" | \"pause-circle\" | \"paw\" | \"paw-alt\" | \"paw-claws\" | \"peace\" | \"pegasus\" | \"pen\" | \"pen-alt\" | \"pen-fancy\" | \"pen-nib\" | \"pen-square\" | \"pencil\" | \"pencil-alt\" | \"pencil-paintbrush\" | \"pencil-ruler\" | \"pennant\" | \"people-arrows\" | \"people-carry\" | \"pepper-hot\" | \"percent\" | \"percentage\" | \"person-booth\" | \"person-carry\" | \"person-dolly\" | \"person-dolly-empty\" | \"person-sign\" | \"phone\" | \"phone-alt\" | \"phone-laptop\" | \"phone-office\" | \"phone-plus\" | \"phone-rotary\" | \"phone-slash\" | \"phone-square\" | \"phone-square-alt\" | \"phone-volume\" | \"photo-video\" | \"pi\" | \"piano\" | \"piano-keyboard\" | \"pie\" | \"pig\" | \"piggy-bank\" | \"pills\" | \"pizza\" | \"pizza-slice\" | \"place-of-worship\" | \"plane\" | \"plane-alt\" | \"plane-arrival\" | \"plane-departure\" | \"plane-slash\" | \"planet-moon\" | \"planet-ringed\" | \"play\" | \"play-circle\" | \"plug\" | \"plus\" | \"plus-circle\" | \"plus-hexagon\" | \"plus-octagon\" | \"plus-square\" | \"podcast\" | \"podium\" | \"podium-star\" | \"police-box\" | \"poll\" | \"poll-h\" | \"poll-people\" | \"poo\" | \"poo-storm\" | \"poop\" | \"popcorn\" | \"portal-enter\" | \"portal-exit\" | \"portrait\" | \"pound-sign\" | \"power-off\" | \"pray\" | \"praying-hands\" | \"prescription\" | \"prescription-bottle\" | \"prescription-bottle-alt\" | \"presentation\" | \"print\" | \"print-search\" | \"print-slash\" | \"procedures\" | \"project-diagram\" | \"projector\" | \"pump-medical\" | \"pump-soap\" | \"pumpkin\" | \"puzzle-piece\" | \"qrcode\" | \"question\" | \"question-circle\" | \"question-square\" | \"quidditch\" | \"quote-left\" | \"quote-right\" | \"quran\" | \"rabbit\" | \"rabbit-fast\" | \"racquet\" | \"radar\" | \"radiation\" | \"radiation-alt\" | \"radio\" | \"radio-alt\" | \"rainbow\" | \"raindrops\" | \"ram\" | \"ramp-loading\" | \"random\" | \"raygun\" | \"receipt\" | \"record-vinyl\" | \"rectangle-landscape\" | \"rectangle-portrait\" | \"rectangle-wide\" | \"recycle\" | \"redo\" | \"redo-alt\" | \"refrigerator\" | \"registered\" | \"remove-format\" | \"repeat\" | \"repeat-1\" | \"repeat-1-alt\" | \"repeat-alt\" | \"reply\" | \"reply-all\" | \"republican\" | \"restroom\" | \"retweet\" | \"retweet-alt\" | \"ribbon\" | \"ring\" | \"rings-wedding\" | \"road\" | \"robot\" | \"rocket\" | \"rocket-launch\" | \"route\" | \"route-highway\" | \"route-interstate\" | \"router\" | \"rss\" | \"rss-square\" | \"ruble-sign\" | \"ruler\" | \"ruler-combined\" | \"ruler-horizontal\" | \"ruler-triangle\" | \"ruler-vertical\" | \"running\" | \"rupee-sign\" | \"rv\" | \"sack\" | \"sack-dollar\" | \"sad-cry\" | \"sad-tear\" | \"salad\" | \"sandwich\" | \"satellite\" | \"satellite-dish\" | \"sausage\" | \"save\" | \"sax-hot\" | \"saxophone\" | \"scalpel\" | \"scalpel-path\" | \"scanner\" | \"scanner-image\" | \"scanner-keyboard\" | \"scanner-touchscreen\" | \"scarecrow\" | \"scarf\" | \"school\" | \"screwdriver\" | \"scroll\" | \"scroll-old\" | \"scrubber\" | \"scythe\" | \"sd-card\" | \"search\" | \"search-dollar\" | \"search-location\" | \"search-minus\" | \"search-plus\" | \"seedling\" | \"send-back\" | \"send-backward\" | \"sensor\" | \"sensor-alert\" | \"sensor-fire\" | \"sensor-on\" | \"sensor-smoke\" | \"server\" | \"shapes\" | \"share\" | \"share-all\" | \"share-alt\" | \"share-alt-square\" | \"share-square\" | \"sheep\" | \"shekel-sign\" | \"shield\" | \"shield-alt\" | \"shield-check\" | \"shield-cross\" | \"shield-virus\" | \"ship\" | \"shipping-fast\" | \"shipping-timed\" | \"shish-kebab\" | \"shoe-prints\" | \"shopping-bag\" | \"shopping-basket\" | \"shopping-cart\" | \"shovel\" | \"shovel-snow\" | \"shower\" | \"shredder\" | \"shuttle-van\" | \"shuttlecock\" | \"sickle\" | \"sigma\" | \"sign\" | \"sign-in\" | \"sign-in-alt\" | \"sign-language\" | \"sign-out\" | \"sign-out-alt\" | \"signal\" | \"signal-1\" | \"signal-2\" | \"signal-3\" | \"signal-4\" | \"signal-alt\" | \"signal-alt-1\" | \"signal-alt-2\" | \"signal-alt-3\" | \"signal-alt-slash\" | \"signal-slash\" | \"signal-stream\" | \"signature\" | \"sim-card\" | \"sink\" | \"siren\" | \"siren-on\" | \"sitemap\" | \"skating\" | \"skeleton\" | \"ski-jump\" | \"ski-lift\" | \"skiing\" | \"skiing-nordic\" | \"skull\" | \"skull-cow\" | \"skull-crossbones\" | \"slash\" | \"sledding\" | \"sleigh\" | \"sliders-h\" | \"sliders-h-square\" | \"sliders-v\" | \"sliders-v-square\" | \"smile\" | \"smile-beam\" | \"smile-plus\" | \"smile-wink\" | \"smog\" | \"smoke\" | \"smoking\" | \"smoking-ban\" | \"sms\" | \"snake\" | \"snooze\" | \"snow-blowing\" | \"snowboarding\" | \"snowflake\" | \"snowflakes\" | \"snowman\" | \"snowmobile\" | \"snowplow\" | \"soap\" | \"socks\" | \"solar-panel\" | \"solar-system\" | \"sort\" | \"sort-alpha-down\" | \"sort-alpha-down-alt\" | \"sort-alpha-up\" | \"sort-alpha-up-alt\" | \"sort-alt\" | \"sort-amount-down\" | \"sort-amount-down-alt\" | \"sort-amount-up\" | \"sort-amount-up-alt\" | \"sort-circle\" | \"sort-circle-down\" | \"sort-circle-up\" | \"sort-down\" | \"sort-numeric-down\" | \"sort-numeric-down-alt\" | \"sort-numeric-up\" | \"sort-numeric-up-alt\" | \"sort-shapes-down\" | \"sort-shapes-down-alt\" | \"sort-shapes-up\" | \"sort-shapes-up-alt\" | \"sort-size-down\" | \"sort-size-down-alt\" | \"sort-size-up\" | \"sort-size-up-alt\" | \"sort-up\" | \"soup\" | \"spa\" | \"space-shuttle\" | \"space-station-moon\" | \"space-station-moon-alt\" | \"spade\" | \"sparkles\" | \"speaker\" | \"speakers\" | \"spell-check\" | \"spider\" | \"spider-black-widow\" | \"spider-web\" | \"spinner\" | \"spinner-third\" | \"splotch\" | \"spray-can\" | \"sprinkler\" | \"square\" | \"square-full\" | \"square-root\" | \"square-root-alt\" | \"squirrel\" | \"staff\" | \"stamp\" | \"star\" | \"star-and-crescent\" | \"star-christmas\" | \"star-exclamation\" | \"star-half\" | \"star-half-alt\" | \"star-of-david\" | \"star-of-life\" | \"star-shooting\" | \"starfighter\" | \"starfighter-alt\" | \"stars\" | \"starship\" | \"starship-freighter\" | \"steak\" | \"steering-wheel\" | \"step-backward\" | \"step-forward\" | \"stethoscope\" | \"sticky-note\" | \"stocking\" | \"stomach\" | \"stop\" | \"stop-circle\" | \"stopwatch\" | \"stopwatch-20\" | \"store\" | \"store-alt\" | \"store-alt-slash\" | \"store-slash\" | \"stream\" | \"street-view\" | \"stretcher\" | \"strikethrough\" | \"stroopwafel\" | \"subscript\" | \"subway\" | \"suitcase\" | \"suitcase-rolling\" | \"sun\" | \"sun-cloud\" | \"sun-dust\" | \"sun-haze\" | \"sunglasses\" | \"sunrise\" | \"sunset\" | \"superscript\" | \"surprise\" | \"swatchbook\" | \"swimmer\" | \"swimming-pool\" | \"sword\" | \"sword-laser\" | \"sword-laser-alt\" | \"swords\" | \"swords-laser\" | \"synagogue\" | \"sync\" | \"sync-alt\" | \"syringe\" | \"table\" | \"table-tennis\" | \"tablet\" | \"tablet-alt\" | \"tablet-android\" | \"tablet-android-alt\" | \"tablet-rugged\" | \"tablets\" | \"tachometer\" | \"tachometer-alt\" | \"tachometer-alt-average\" | \"tachometer-alt-fast\" | \"tachometer-alt-fastest\" | \"tachometer-alt-slow\" | \"tachometer-alt-slowest\" | \"tachometer-average\" | \"tachometer-fast\" | \"tachometer-fastest\" | \"tachometer-slow\" | \"tachometer-slowest\" | \"taco\" | \"tag\" | \"tags\" | \"tally\" | \"tanakh\" | \"tape\" | \"tasks\" | \"tasks-alt\" | \"taxi\" | \"teeth\" | \"teeth-open\" | \"telescope\" | \"temperature-down\" | \"temperature-frigid\" | \"temperature-high\" | \"temperature-hot\" | \"temperature-low\" | \"temperature-up\" | \"tenge\" | \"tennis-ball\" | \"terminal\" | \"text\" | \"text-height\" | \"text-size\" | \"text-width\" | \"th\" | \"th-large\" | \"th-list\" | \"theater-masks\" | \"thermometer\" | \"thermometer-empty\" | \"thermometer-full\" | \"thermometer-half\" | \"thermometer-quarter\" | \"thermometer-three-quarters\" | \"theta\" | \"thumbs-down\" | \"thumbs-up\" | \"thumbtack\" | \"thunderstorm\" | \"thunderstorm-moon\" | \"thunderstorm-sun\" | \"ticket\" | \"ticket-alt\" | \"tilde\" | \"times\" | \"times-circle\" | \"times-hexagon\" | \"times-octagon\" | \"times-square\" | \"tint\" | \"tint-slash\" | \"tire\" | \"tire-flat\" | \"tire-pressure-warning\" | \"tire-rugged\" | \"tired\" | \"toggle-off\" | \"toggle-on\" | \"toilet\" | \"toilet-paper\" | \"toilet-paper-alt\" | \"toilet-paper-slash\" | \"tombstone\" | \"tombstone-alt\" | \"toolbox\" | \"tools\" | \"tooth\" | \"toothbrush\" | \"torah\" | \"torii-gate\" | \"tornado\" | \"tractor\" | \"trademark\" | \"traffic-cone\" | \"traffic-light\" | \"traffic-light-go\" | \"traffic-light-slow\" | \"traffic-light-stop\" | \"trailer\" | \"train\" | \"tram\" | \"transgender\" | \"transgender-alt\" | \"transporter\" | \"transporter-1\" | \"transporter-2\" | \"transporter-3\" | \"transporter-empty\" | \"trash\" | \"trash-alt\" | \"trash-restore\" | \"trash-restore-alt\" | \"trash-undo\" | \"trash-undo-alt\" | \"treasure-chest\" | \"tree\" | \"tree-alt\" | \"tree-christmas\" | \"tree-decorated\" | \"tree-large\" | \"tree-palm\" | \"trees\" | \"triangle\" | \"triangle-music\" | \"trophy\" | \"trophy-alt\" | \"truck\" | \"truck-container\" | \"truck-couch\" | \"truck-loading\" | \"truck-monster\" | \"truck-moving\" | \"truck-pickup\" | \"truck-plow\" | \"truck-ramp\" | \"trumpet\" | \"tshirt\" | \"tty\" | \"turkey\" | \"turntable\" | \"turtle\" | \"tv\" | \"tv-alt\" | \"tv-music\" | \"tv-retro\" | \"typewriter\" | \"ufo\" | \"ufo-beam\" | \"umbrella\" | \"umbrella-beach\" | \"underline\" | \"undo\" | \"undo-alt\" | \"unicorn\" | \"union\" | \"universal-access\" | \"university\" | \"unlink\" | \"unlock\" | \"unlock-alt\" | \"upload\" | \"usb-drive\" | \"usd-circle\" | \"usd-square\" | \"user\" | \"user-alien\" | \"user-alt\" | \"user-alt-slash\" | \"user-astronaut\" | \"user-chart\" | \"user-check\" | \"user-circle\" | \"user-clock\" | \"user-cog\" | \"user-cowboy\" | \"user-crown\" | \"user-edit\" | \"user-friends\" | \"user-graduate\" | \"user-hard-hat\" | \"user-headset\" | \"user-injured\" | \"user-lock\" | \"user-md\" | \"user-md-chat\" | \"user-minus\" | \"user-music\" | \"user-ninja\" | \"user-nurse\" | \"user-plus\" | \"user-robot\" | \"user-secret\" | \"user-shield\" | \"user-slash\" | \"user-tag\" | \"user-tie\" | \"user-times\" | \"user-unlock\" | \"user-visor\" | \"users\" | \"users-class\" | \"users-cog\" | \"users-crown\" | \"users-medical\" | \"users-slash\" | \"utensil-fork\" | \"utensil-knife\" | \"utensil-spoon\" | \"utensils\" | \"utensils-alt\" | \"vacuum\" | \"vacuum-robot\" | \"value-absolute\" | \"vector-square\" | \"venus\" | \"venus-double\" | \"venus-mars\" | \"vest\" | \"vest-patches\" | \"vhs\" | \"vial\" | \"vials\" | \"video\" | \"video-plus\" | \"video-slash\" | \"vihara\" | \"violin\" | \"virus\" | \"virus-slash\" | \"viruses\" | \"voicemail\" | \"volcano\" | \"volleyball-ball\" | \"volume\" | \"volume-down\" | \"volume-mute\" | \"volume-off\" | \"volume-slash\" | \"volume-up\" | \"vote-nay\" | \"vote-yea\" | \"vr-cardboard\" | \"wagon-covered\" | \"walker\" | \"walkie-talkie\" | \"walking\" | \"wallet\" | \"wand\" | \"wand-magic\" | \"warehouse\" | \"warehouse-alt\" | \"washer\" | \"watch\" | \"watch-calculator\" | \"watch-fitness\" | \"water\" | \"water-lower\" | \"water-rise\" | \"wave-sine\" | \"wave-square\" | \"wave-triangle\" | \"waveform\" | \"waveform-path\" | \"webcam\" | \"webcam-slash\" | \"weight\" | \"weight-hanging\" | \"whale\" | \"wheat\" | \"wheelchair\" | \"whistle\" | \"wifi\" | \"wifi-1\" | \"wifi-2\" | \"wifi-slash\" | \"wind\" | \"wind-turbine\" | \"wind-warning\" | \"window\" | \"window-alt\" | \"window-close\" | \"window-frame\" | \"window-frame-open\" | \"window-maximize\" | \"window-minimize\" | \"window-restore\" | \"windsock\" | \"wine-bottle\" | \"wine-glass\" | \"wine-glass-alt\" | \"won-sign\" | \"wreath\" | \"wrench\" | \"x-ray\" | \"yen-sign\" | \"yin-yang\"",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconPrefix",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"far\" | \"fal\" | \"fas\" | \"fad\"",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconRotation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"rotate-90\" | \"rotate-180\" | \"rotate-270\" | \"flip-horizontal\" | \"flip-vertical\" | \"flip-both\"",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"lg\" | \"2x\" | \"3x\" | \"5x\" | \"7x\" | \"10x\"",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconStyle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"solid\" | \"regular\" | \"light\" | \"duotone\"",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IconName | IconInputs",
                    "file": "src/app/components/icon/icon.component.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/classes/tile/tile.types.ts": [
                {
                    "name": "LetterValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" | \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" | \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" | \"Y\" | \"Z\" | \"*\"",
                    "file": "src/app/classes/tile/tile.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/classes/square/square.ts": [
                {
                    "name": "Multiplier",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ScoreMultiplier | null",
                    "file": "src/app/classes/square/square.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/classes/square/score-multiplier.ts": [
                {
                    "name": "MultiplierValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"2\" | \"3\"",
                    "file": "src/app/classes/square/score-multiplier.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/components/tile-rack/tile-rack.component.ts": [
                {
                    "name": "RackTile",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/components/tile-rack/tile-rack.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/components/update-virtual-player-dialog/update-virtual-player.component.types.ts": [
                {
                    "name": "UpdateVirtualPlayerDialogParameters",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<VirtualPlayer | isDefault>",
                    "file": "src/app/components/update-virtual-player-dialog/update-virtual-player.component.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/modules/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "home",
                        "component": "HomePageComponent"
                    },
                    {
                        "path": "game",
                        "component": "GamePageComponent"
                    },
                    {
                        "path": "game-creation",
                        "component": "GameCreationPageComponent"
                    },
                    {
                        "path": "lobby",
                        "component": "LobbyPageComponent"
                    },
                    {
                        "path": "waiting-room",
                        "component": "CreateWaitingPageComponent"
                    },
                    {
                        "path": "join-waiting-room",
                        "component": "JoinWaitingPageComponent"
                    },
                    {
                        "path": "high-scores",
                        "component": "HighScoresPageComponent"
                    },
                    {
                        "path": "admin",
                        "component": "AdminPageComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/home"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/classes/actions/action-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/action-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionPayload",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/action-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExchangeActionPayload",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/action-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlaceActionPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/action-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTION_COMMAND_INDICATOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/location.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Location",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/orientation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ORIENTATION_HORIZONTAL_LETTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/actions/orientation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ORIENTATION_VERTICAL_LETTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/board-navigator/board-navigator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BoardNavigator",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/board-navigator/position.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Position",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/board-navigator/vec2.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Vec2",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/dictionary-summary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DictionarySummary",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameConfigData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InitializeGameData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReadyGameConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StartGameData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-histories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameHistoriesData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameInfoData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-objectives-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameObjectivesData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/game-update-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameUpdateData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/lobby-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LobbyData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/lobby-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LobbyInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/objective-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ObjectiveData",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/player-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/player-name.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerName",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/communication/round-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoundData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/connection-state-service/connection-state-service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConnectionStateService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/dictionary/dictionary-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasicDictionaryData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/dictionary/dictionary-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DictionaryData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/dictionary/dictionary-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DictionaryUpdateInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/focusable-component/focusable-component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FocusableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/game-history/game-histories-converter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GameHistoriesConverter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/game-history/game-histories-converter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVERSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/player/player-container.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PlayerContainer",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/player/player.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Player",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/round/round.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Round",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/round/timer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Timer",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/round/timer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ILLEGAL_TIMER_PARAMETERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/round/timer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_MINUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/square/score-multiplier.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScoreMultiplier",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/square/square-multiplier-to-color-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LETTER_MULTIPLIER_COLOR_MAP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/square/square-multiplier-to-color-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MULTIPLIER_COLOR_MAP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/square/square-multiplier-to-color-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WORD_MULTIPLIER_COLOR_MAP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/square/square-view.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SquareView",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/square/square.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/tile/tile.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Tile",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/tile/tile.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TileData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/classes/tile/tile.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TileReserveData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/admin-dictionaries-component/admin-dictionaries.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminDictionariesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/admin-game-history/admin-game-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminGameHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/admin-high-scores/admin-high-scores.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminHighScoresComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/admin-virtual-players/admin-virtual-players.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminVirtualPlayersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/admin-virtual-players/admin-virtual-players.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteVirtualPlayerDialogParameters",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-container/chatbox-container.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withVeryLongName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-container/chatbox-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatboxContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-container/chatbox-container.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Channel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-message/chatbox-message.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-message/chatbox-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatboxMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-message/chatbox-message.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DisplayMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox-message/chatbox-message.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox/chatbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox/chatbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chatbox/chatbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/communication-box/communication-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommunicationBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/components/convert-dialog/convert-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConvertDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/convert-dialog/convert-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConvertResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/create-virtual-player-dialog/create-virtual-player-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateVirtualPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/default-dialog/default-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/default-dialog/default-dialog.component.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultDialogButtonParameters",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/default-dialog/default-dialog.component.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultDialogParameters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/delete-dictionary-dialog/delete-dictionary-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteDictionaryDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/delete-dictionary-dialog/delete-dictionary-dialog.component.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteDictionaryDialogParameters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/delete-virtual-player-dialog/delete-virtual-player-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteVirtualPlayerDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/high-score-box/high-score-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HighScoreBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/icon-button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/icon/icon.component.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IconInputs",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/information-box/information-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InformationBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lobby-info/lobby-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LobbyInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModifyDictionaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modify-dictionary-dialog/modify-dictionary-dialog.component.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DictionaryDialogParameters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/name-field/name-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NameFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/objective-box/objective-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectiveBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/objective/objective.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObjectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-header/page-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/square/square.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SquareComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/square/square.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CssStyleProperty",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tile-rack/tile-rack.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileRackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tile-rack/tile-rack.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SHUFFLE_ANIMATION_DELAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tile/tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tile/tile.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AMOUNT_OF_TILE_BACKGROUND_IMAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/timer-selection/timer-selection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimerSelectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/update-virtual-player-dialog/update-virtual-player-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateVirtualPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/upload-dictionary/upload-dictionary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadDictionaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/upload-dictionary/upload-dictionary.component.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UploadEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/classes-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVALID_MULTIPLIER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/classes-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_COLOR_FOR_MULTIPLIER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/classes-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_SQUARE_FOR_SQUARE_VIEW",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/command-exception-messages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BAD_SYNTAX_MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/command-exception-messages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLAYER_NOT_FOUND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BUTTON_MUST_HAVE_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CANNOT_REMOVE_UNUSED_TILE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_BUTTONS_MUST_BE_AN_ARRAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_MUST_HAVE_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICTIONARY_DELETED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICTIONARY_REQUIRED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_LOBBY_CAN_BE_JOINED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/component-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_VIEW_COLOR_UNDEFINED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN_RESET_DICTIONARY_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN_RESET_HIGH_SCORE_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN_RESET_HISTORY_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN_RESET_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN_RESET_VIRTUAL_PLAYER_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARROW_LEFT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARROW_RIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASCENDING_COLUMN_SORTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BACKSPACE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CANCEL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CANCEL_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CODE_HTML_TAG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DICTIONARIES_COLUMNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_GAME_HISTORY_COLUMNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_HIGH_SCORE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICTIONARIES_COLUMNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ERROR_SNACK_BAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ESCAPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GAME_HISTORY_COLUMNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IS_CLICKABLE_CLASS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KEYDOWN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOCAL_PLAYER_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NOT_FOUND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OPPONENT_COMPLETED_THIS_OBJECTIVE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERCENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REINITIALIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REINITIALIZE_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUCCESS_SNACK_BAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VIRTUAL_PLAYERS_COLUMNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/components-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YOU_COMPLETED_THIS_OBJECTIVE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controller-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controller-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_GAME_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controller-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LEAVER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controller-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_OPPONENT_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controller-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SOCKET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controller-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_DICTIONARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controllers-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HTTP_ABORT_ERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/controllers-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVALID_DICTIONARY_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dialogs-constants.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PositiveFeedbackResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dialogs-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_VIRTUAL_PLAYER_DIALOG_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dialogs-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_VIRTUAL_PLAYER_DIALOG_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dialogs-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_VIRTUAL_PLAYER_DIALOG_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dialogs-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_VIRTUAL_PLAYER_DIALOG_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionaries-component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACK_BAR_ERROR_DURATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionaries-components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_COMPONENT_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionaries-components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FILE_NOT_DICTIONARY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionaries-components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACK_BAR_ERROR_DURATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionaries-components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SNACK_BAR_SUCCESS_DURATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionaries-components.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WRONG_FILE_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICTIONARY_DESCRIPTION_VALIDATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICTIONARY_NAME_VALIDATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_DESCRIPTION_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_NAME_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_DESCRIPTION_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_NAME_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATION_RULE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/dictionary-service-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOWNLOAD_ELEMENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/fun-facts-scrabble-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FUN_FACTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/fun-facts-scrabble-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRandomFact",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BLANK_TILE_LETTER_VALUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BOARD_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_ORIENTATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PLAYER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PLAYER_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SQUARE_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SQUARE_VIEW",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPECTED_COMMAND_WORD_COUNT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GAME_ID_COOKIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LETTER_VALUES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOCAL_PLAYER_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MARGIN_COLUMN_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_COL_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_INPUT_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_LOCATION_COMMAND_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_ROW_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_TILES_PER_PLAYER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_COL_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_LOCATION_COMMAND_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_ROW_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MINIMUM_TIMER_TIME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ON_YOUR_TURN_ACTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OPPONENT_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLAYER_1_INDEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLAYER_2_INDEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_TO_MILLISECONDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SOCKET_ID_COOKIE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SYSTEM_ERROR_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SYSTEM_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIME_TO_RECONNECT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UNDEFINED_GRID_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UNDEFINED_SQUARE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UNDEFINED_SQUARE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UNDEFINED_TILE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/game-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALID_MULTIPLIERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-field.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_NO_MATCH_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-field.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_REQUIRED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-field.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_SAME_AS_VIRTUAL_PLAYER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-field.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_TOO_LONG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-field.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_TOO_SHORT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAME_VALIDATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATION_RULE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LOBBY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_TIMER_VALUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_ABANDON_BUTTON_CONFIRM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_ABANDON_BUTTON_CONTINUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_ABANDON_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_ABANDON_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_BUTTON_CONTENT_REJECTED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_BUTTON_CONTENT_RETURN_LOBBY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_CANCEL_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_CANCEL_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_CANCELED_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_CANCELED_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_END_OF_GAME_CLOSE_BUTTON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_END_OF_GAME_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_END_OF_GAME_EXIT_BUTTON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_END_OF_GAME_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_FULL_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_FULL_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_NO_ACTIVE_GAME_BUTTON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_NO_ACTIVE_GAME_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_NO_ACTIVE_GAME_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_QUIT_BUTTON_CONFIRM",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_QUIT_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_QUIT_STAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_QUIT_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_REJECT_CONTENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_REJECT_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOG_TITLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOST_WAITING_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KEEP_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_CONFETTI_COUNT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAXIMUM_TIMER_VALUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_CONFETTI_COUNT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MINIMUM_TIMER_VALUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OPPONENT_FOUND_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/pages-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIMER_VALUE_INCREMENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/service-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_PLAYER_PROFILE_MAP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/service-test-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_PLAYER_PROFILES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACTIVE_PLAYER_NOT_FOUND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DB_CONNECTED_ENDPOINT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_STATE_VALUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPIRED_COOKIE_AGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVALID_PAYLOAD_FOR_ACTION_TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INVALID_ROUND_DATA_PLAYER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IS_NOT_BEHAVIOR_OBJECT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MISSING_PLAYER_DATA_TO_INITIALIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_CURRENT_ROUND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_LOCAL_PLAYER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_START_GAME_TIME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_SUBJECT_FOR_EVENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLAYER_NUMBER_INVALID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SOCKET_ID_UNDEFINED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/services-errors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WAIT_FOR_COMMAND_CONFIRMATION_MESSAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/session-storage-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DICTIONARY_NAME_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/session-storage-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MESSAGE_STORAGE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/session-storage-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLAYER_NAME_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/session-storage-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIMER_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RACK_FONT_SIZE_INCREMENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RACK_TILE_DEFAULT_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RACK_TILE_MAX_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RACK_TILE_MIN_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_FONT_SIZE_INCREMENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_TILE_DEFAULT_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_TILE_MAX_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/tile-font-size-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUARE_TILE_MIN_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/virtual-player-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_NAME_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/virtual-player-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MIN_NAME_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/virtual-player-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATION_RULE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/constants/virtual-player-name-validation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VIRTUAL_PLAYER_NAME_VALIDATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/dictionary-controller/dictionary.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DictionaryController",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/game-dispatcher-controller/game-dispatcher.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameDispatcherController",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/game-history-controller/game-history.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameHistoryController",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/game-play-controller/game-play.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GamePlayController",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/high-score-controller/high-score.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HighScoresController",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/player-leave-controller/player-leave.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlayerLeavesController",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/controllers/virtual-player-profile-controller/virtual-player-profile.controller.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VirtualPlayerProfilesController",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/admin-page/admin-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/admin-page/admin-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_ADMIN_TAB",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-waiting-page/create-waiting-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateWaitingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/game-creation-page/game-creation-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameCreationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/game-page/game-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GamePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/high-scores-page/high-scores-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HighScoresPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/join-waiting-page/join-waiting-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JoinWaitingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/loading-page/loading-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/lobby-page/lobby-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LobbyPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DurationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOURS_IN_DAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAXIMUM_TIME_UNITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MINIMUM_TIME_UNITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MINUTES_IN_HOUR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_DAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_HOUR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/duration/duration.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SECONDS_IN_MINUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/action-service/action.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActionService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/board-service/board.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cookie-service/cookie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookieService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/database-service/database.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatabaseService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dictionary-service/dictionary.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DictionaryService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/services/focusable-components-service/focusable-components.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FocusableComponentsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-dispatcher-service/game-dispatcher.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameDispatcherService",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-history-service/game-history.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameHistoryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-service/game.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameService",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-view-event-manager-service/event-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventClass",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-view-event-manager-service/event-types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventTypes",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-view-event-manager-service/game-view-event-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameViewEventManagerService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/high-score-service/high-score.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HighScoresService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/initializer-service/initializer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InitializerService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/input-parser-service/command-exception.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CommandException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/input-parser-service/input-parser.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InputParserService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/services/input-parser-service/input-parser.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ASCII_VALUE_OF_LOWERCASE_A",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/message-storage-service/message-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/objectives-manager-service/objectives-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ObjectivesManagerService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/player-leave-service/player-leave.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlayerLeavesService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/reconnection-service/reconnection.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReconnectionService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/round-manager-service/round-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoundManagerService",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/services/socket-service/socket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/virtual-player-profile-service/virtual-player-profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VirtualPlayerProfilesService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/action-payload-to-string/action-payload-to-string.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ActionPayloadToString",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/action-payload-to-string/action-payload-to-string.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLUMN_INDEX_ADJUSTMENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/delay/delay.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Delay",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/emoji/emoji.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMOJI_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/emoji/emoji.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyHasEmoji",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/i-reset-service-data/i-reset-service-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResetServiceData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/isKey/is-key.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/isNumber/is-number.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/next-index/next-index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextIndex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/preserve-array-order/preserve-array-order.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NOT_FOUND",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/preserve-array-order/preserve-array-order.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preserveArrayOrder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/random/random.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Random",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/randomize-array/randomize-array.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "randomizeArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/remove-accents/remove-accents.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeAccents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}