// Mocks generated by Mockito 5.3.2 from annotations
// in mobile/test/components/create-account-form_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i3;

import 'package:flutter/material.dart' as _i2;
import 'package:mobile/classes/account.dart' as _i9;
import 'package:mobile/classes/text-field-handler.dart' as _i5;
import 'package:mobile/controllers/account-authentification-controller.dart'
    as _i4;
import 'package:mobile/services/account-authentification-service.dart' as _i7;
import 'package:mobile/services/theme-color-service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFocusNode_0 extends _i1.SmartFake implements _i2.FocusNode {
  _FakeFocusNode_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeTextEditingController_1 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_2 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountAuthenticationController_3 extends _i1.SmartFake
    implements _i4.AccountAuthenticationController {
  _FakeAccountAuthenticationController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TextFieldHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextFieldHandler extends _i1.Mock implements _i5.TextFieldHandler {
  MockTextFieldHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);
  @override
  set errorMessage(String? _errorMessage) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          _errorMessage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.FocusNode get focusNode => (super.noSuchMethod(
        Invocation.getter(#focusNode),
        returnValue: _FakeFocusNode_0(
          this,
          Invocation.getter(#focusNode),
        ),
      ) as _i2.FocusNode);
  @override
  set focusNode(_i2.FocusNode? _focusNode) => super.noSuchMethod(
        Invocation.setter(
          #focusNode,
          _focusNode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.TextEditingController get controller => (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeTextEditingController_1(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i2.TextEditingController);
  @override
  set controller(_i2.TextEditingController? _controller) => super.noSuchMethod(
        Invocation.setter(
          #controller,
          _controller,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(Function? function) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [function],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isValid() => (super.noSuchMethod(
        Invocation.method(
          #isValid,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ThemeColorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeColorService extends _i1.Mock implements _i6.ThemeColorService {
  MockThemeColorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Color get themeColor => (super.noSuchMethod(
        Invocation.getter(#themeColor),
        returnValue: _FakeColor_2(
          this,
          Invocation.getter(#themeColor),
        ),
      ) as _i3.Color);
  @override
  set themeColor(_i3.Color? _themeColor) => super.noSuchMethod(
        Invocation.setter(
          #themeColor,
          _themeColor,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AccountAuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountAuthenticationService extends _i1.Mock
    implements _i7.AccountAuthenticationService {
  MockAccountAuthenticationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AccountAuthenticationController get accountAuthenticationController =>
      (super.noSuchMethod(
        Invocation.getter(#accountAuthenticationController),
        returnValue: _FakeAccountAuthenticationController_3(
          this,
          Invocation.getter(#accountAuthenticationController),
        ),
      ) as _i4.AccountAuthenticationController);
  @override
  _i8.Future<bool> createAccount(_i9.Account? account) => (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [account],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> isEmailUnique(String? email) => (super.noSuchMethod(
        Invocation.method(
          #isEmailUnique,
          [email],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> isUsernameUnique(String? username) => (super.noSuchMethod(
        Invocation.method(
          #isUsernameUnique,
          [username],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
